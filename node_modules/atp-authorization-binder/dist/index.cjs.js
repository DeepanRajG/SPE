'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */
function formatProdErrorMessage(code) {
  return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or " + 'use the non-minified dev environment for full errors. ';
}

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */
var randomString = function randomString() {
  return Math.random().toString(36).substring(7).split('').join('.');
};

var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = obj;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(obj) === proto;
}

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of
function miniKindOf(val) {
  if (val === void 0) return 'undefined';
  if (val === null) return 'null';
  var type = typeof val;

  switch (type) {
    case 'boolean':
    case 'string':
    case 'number':
    case 'symbol':
    case 'function':
      {
        return type;
      }
  }

  if (Array.isArray(val)) return 'array';
  if (isDate(val)) return 'date';
  if (isError(val)) return 'error';
  var constructorName = ctorName(val);

  switch (constructorName) {
    case 'Symbol':
    case 'Promise':
    case 'WeakMap':
    case 'WeakSet':
    case 'Map':
    case 'Set':
      return constructorName;
  } // other


  return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
}

function ctorName(val) {
  return typeof val.constructor === 'function' ? val.constructor.name : null;
}

function isError(val) {
  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';
}

function isDate(val) {
  if (val instanceof Date) return true;
  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';
}

function kindOf(val) {
  var typeOfVal = typeof val;

  if (process.env.NODE_ENV !== 'production') {
    typeOfVal = miniKindOf(val);
  }

  return typeOfVal;
}

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */


  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
  } catch (e) {} // eslint-disable-line no-empty

}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!isPlainObject(inputState)) {
    return "The " + argumentName + " has unexpected type of \"" + kindOf(inputState) + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });
  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });
  if (action && action.type === ActionTypes.REPLACE) return;

  if (unexpectedKeys.length > 0) {
    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
  }
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, {
      type: ActionTypes.INIT
    });

    if (typeof initialState === 'undefined') {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(12) : "The slice reducer for key \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
    }

    if (typeof reducer(undefined, {
      type: ActionTypes.PROBE_UNKNOWN_ACTION()
    }) === 'undefined') {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(13) : "The slice reducer for key \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle '" + ActionTypes.INIT + "' or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
    }
  });
}
/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */


function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};

  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (process.env.NODE_ENV !== 'production') {
      if (typeof reducers[key] === 'undefined') {
        warning("No reducer provided for key \"" + key + "\"");
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }

  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
  // keys multiple times.

  var unexpectedKeyCache;

  if (process.env.NODE_ENV !== 'production') {
    unexpectedKeyCache = {};
  }

  var shapeAssertionError;

  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination(state, action) {
    if (state === void 0) {
      state = {};
    }

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (process.env.NODE_ENV !== 'production') {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

      if (warningMessage) {
        warning(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};

    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);

      if (typeof nextStateForKey === 'undefined') {
        var actionType = action && action.type;
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(14) : "When called with an action of type " + (actionType ? "\"" + String(actionType) + "\"" : '(unknown type)') + ", the slice reducer for key \"" + _key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.");
      }

      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }

    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
    return hasChanged ? nextState : state;
  };
}

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

function isCrushed() {}

if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
  warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function () {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) keys.push(key);

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectDestructuringEmpty(obj) {
  if (obj == null) throw new TypeError("Cannot destructure undefined");
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var es6Promise = createCommonjsModule(function (module, exports) {
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */

(function (global, factory) {
	module.exports = factory() ;
}(commonjsGlobal, (function () {
function objectOrFunction(x) {
  var type = typeof x;
  return x !== null && (type === 'object' || type === 'function');
}

function isFunction(x) {
  return typeof x === 'function';
}



var _isArray = void 0;
if (Array.isArray) {
  _isArray = Array.isArray;
} else {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
}

var isArray = _isArray;

var len = 0;
var vertxNext = void 0;
var customSchedulerFn = void 0;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  if (typeof vertxNext !== 'undefined') {
    return function () {
      vertxNext(flush);
    };
  }

  return useSetTimeout();
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var vertx = Function('return this')().require('vertx');
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = void 0;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && typeof commonjsRequire === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;


  if (_state) {
    var callback = arguments[_state - 1];
    asap(function () {
      return invokeCallback(_state, child, callback, parent._result);
    });
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve$1(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(2);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
  try {
    then$$1.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then$$1) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then$$1, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return resolve(promise, value);
    }, function (reason) {
      return reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$1) {
  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$1 === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$1)) {
      handleForeignThenable(promise, maybeThenable, then$$1);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function resolve(promise, value) {
  if (promise === value) {
    reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    var then$$1 = void 0;
    try {
      then$$1 = value.then;
    } catch (error) {
      reject(promise, error);
      return;
    }
    handleMaybeThenable(promise, value, then$$1);
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;


  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = void 0,
      callback = void 0,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = void 0,
      error = void 0,
      succeeded = true;

  if (hasCallback) {
    try {
      value = callback(detail);
    } catch (e) {
      succeeded = false;
      error = e;
    }

    if (promise === value) {
      reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
  }

  if (promise._state !== PENDING) ; else if (hasCallback && succeeded) {
    resolve(promise, value);
  } else if (succeeded === false) {
    reject(promise, error);
  } else if (settled === FULFILLED) {
    fulfill(promise, value);
  } else if (settled === REJECTED) {
    reject(promise, value);
  }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      resolve(promise, value);
    }, function rejectPromise(reason) {
      reject(promise, reason);
    });
  } catch (e) {
    reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
}

var Enumerator = function () {
  function Enumerator(Constructor, input) {
    this._instanceConstructor = Constructor;
    this.promise = new Constructor(noop);

    if (!this.promise[PROMISE_ID]) {
      makePromise(this.promise);
    }

    if (isArray(input)) {
      this.length = input.length;
      this._remaining = input.length;

      this._result = new Array(this.length);

      if (this.length === 0) {
        fulfill(this.promise, this._result);
      } else {
        this.length = this.length || 0;
        this._enumerate(input);
        if (this._remaining === 0) {
          fulfill(this.promise, this._result);
        }
      }
    } else {
      reject(this.promise, validationError());
    }
  }

  Enumerator.prototype._enumerate = function _enumerate(input) {
    for (var i = 0; this._state === PENDING && i < input.length; i++) {
      this._eachEntry(input[i], i);
    }
  };

  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
    var c = this._instanceConstructor;
    var resolve$$1 = c.resolve;


    if (resolve$$1 === resolve$1) {
      var _then = void 0;
      var error = void 0;
      var didError = false;
      try {
        _then = entry.then;
      } catch (e) {
        didError = true;
        error = e;
      }

      if (_then === then && entry._state !== PENDING) {
        this._settledAt(entry._state, i, entry._result);
      } else if (typeof _then !== 'function') {
        this._remaining--;
        this._result[i] = entry;
      } else if (c === Promise$1) {
        var promise = new c(noop);
        if (didError) {
          reject(promise, error);
        } else {
          handleMaybeThenable(promise, entry, _then);
        }
        this._willSettleAt(promise, i);
      } else {
        this._willSettleAt(new c(function (resolve$$1) {
          return resolve$$1(entry);
        }), i);
      }
    } else {
      this._willSettleAt(resolve$$1(entry), i);
    }
  };

  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
    var promise = this.promise;


    if (promise._state === PENDING) {
      this._remaining--;

      if (state === REJECTED) {
        reject(promise, value);
      } else {
        this._result[i] = value;
      }
    }

    if (this._remaining === 0) {
      fulfill(promise, this._result);
    }
  };

  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
    var enumerator = this;

    subscribe(promise, undefined, function (value) {
      return enumerator._settledAt(FULFILLED, i, value);
    }, function (reason) {
      return enumerator._settledAt(REJECTED, i, reason);
    });
  };

  return Enumerator;
}();

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject$1(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {Function} resolver
  Useful for tooling.
  @constructor
*/

var Promise$1 = function () {
  function Promise(resolver) {
    this[PROMISE_ID] = nextId();
    this._result = this._state = undefined;
    this._subscribers = [];

    if (noop !== resolver) {
      typeof resolver !== 'function' && needsResolver();
      this instanceof Promise ? initializePromise(this, resolver) : needsNew();
    }
  }

  /**
  The primary way of interacting with a promise is through its `then` method,
  which registers callbacks to receive either a promise's eventual value or the
  reason why the promise cannot be fulfilled.
   ```js
  findUser().then(function(user){
    // user is available
  }, function(reason){
    // user is unavailable, and you are given the reason why
  });
  ```
   Chaining
  --------
   The return value of `then` is itself a promise.  This second, 'downstream'
  promise is resolved with the return value of the first promise's fulfillment
  or rejection handler, or rejected if the handler throws an exception.
   ```js
  findUser().then(function (user) {
    return user.name;
  }, function (reason) {
    return 'default name';
  }).then(function (userName) {
    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
    // will be `'default name'`
  });
   findUser().then(function (user) {
    throw new Error('Found user, but still unhappy');
  }, function (reason) {
    throw new Error('`findUser` rejected and we're unhappy');
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
  });
  ```
  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
   ```js
  findUser().then(function (user) {
    throw new PedagogicalException('Upstream error');
  }).then(function (value) {
    // never reached
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // The `PedgagocialException` is propagated all the way down to here
  });
  ```
   Assimilation
  ------------
   Sometimes the value you want to propagate to a downstream promise can only be
  retrieved asynchronously. This can be achieved by returning a promise in the
  fulfillment or rejection handler. The downstream promise will then be pending
  until the returned promise is settled. This is called *assimilation*.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // The user's comments are now available
  });
  ```
   If the assimliated promise rejects, then the downstream promise will also reject.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // If `findCommentsByAuthor` fulfills, we'll have the value here
  }, function (reason) {
    // If `findCommentsByAuthor` rejects, we'll have the reason here
  });
  ```
   Simple Example
  --------------
   Synchronous Example
   ```javascript
  let result;
   try {
    result = findResult();
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
  findResult(function(result, err){
    if (err) {
      // failure
    } else {
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findResult().then(function(result){
    // success
  }, function(reason){
    // failure
  });
  ```
   Advanced Example
  --------------
   Synchronous Example
   ```javascript
  let author, books;
   try {
    author = findAuthor();
    books  = findBooksByAuthor(author);
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
   function foundBooks(books) {
   }
   function failure(reason) {
   }
   findAuthor(function(author, err){
    if (err) {
      failure(err);
      // failure
    } else {
      try {
        findBoooksByAuthor(author, function(books, err) {
          if (err) {
            failure(err);
          } else {
            try {
              foundBooks(books);
            } catch(reason) {
              failure(reason);
            }
          }
        });
      } catch(error) {
        failure(err);
      }
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findAuthor().
    then(findBooksByAuthor).
    then(function(books){
      // found books
  }).catch(function(reason){
    // something went wrong
  });
  ```
   @method then
  @param {Function} onFulfilled
  @param {Function} onRejected
  Useful for tooling.
  @return {Promise}
  */

  /**
  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
  as the catch block of a try/catch statement.
  ```js
  function findAuthor(){
  throw new Error('couldn't find that author');
  }
  // synchronous
  try {
  findAuthor();
  } catch(reason) {
  // something went wrong
  }
  // async with promises
  findAuthor().catch(function(reason){
  // something went wrong
  });
  ```
  @method catch
  @param {Function} onRejection
  Useful for tooling.
  @return {Promise}
  */


  Promise.prototype.catch = function _catch(onRejection) {
    return this.then(null, onRejection);
  };

  /**
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves
  
    Synchronous example:
  
    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }
  
    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```
  
    Asynchronous example:
  
    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  
    @method finally
    @param {Function} callback
    @return {Promise}
  */


  Promise.prototype.finally = function _finally(callback) {
    var promise = this;
    var constructor = promise.constructor;

    if (isFunction(callback)) {
      return promise.then(function (value) {
        return constructor.resolve(callback()).then(function () {
          return value;
        });
      }, function (reason) {
        return constructor.resolve(callback()).then(function () {
          throw reason;
        });
      });
    }

    return promise.then(callback, callback);
  };

  return Promise;
}();

Promise$1.prototype.then = then;
Promise$1.all = all;
Promise$1.race = race;
Promise$1.resolve = resolve$1;
Promise$1.reject = reject$1;
Promise$1._setScheduler = setScheduler;
Promise$1._setAsap = setAsap;
Promise$1._asap = asap;

/*global self*/
function polyfill() {
  var local = void 0;

  if (typeof commonjsGlobal !== 'undefined') {
    local = commonjsGlobal;
  } else if (typeof self !== 'undefined') {
    local = self;
  } else {
    try {
      local = Function('return this')();
    } catch (e) {
      throw new Error('polyfill failed because global object is unavailable in this environment');
    }
  }

  var P = local.Promise;

  if (P) {
    var promiseToString = null;
    try {
      promiseToString = Object.prototype.toString.call(P.resolve());
    } catch (e) {
      // silently ignored
    }

    if (promiseToString === '[object Promise]' && !P.cast) {
      return;
    }
  }

  local.Promise = Promise$1;
}

// Strange compat..
Promise$1.polyfill = polyfill;
Promise$1.Promise = Promise$1;

return Promise$1;

})));




});

function n(n){for(var r=arguments.length,t=Array(r>1?r-1:0),e=1;e<r;e++)t[e-1]=arguments[e];if("production"!==process.env.NODE_ENV){var i=Y[n],o=i?"function"==typeof i?i.apply(null,t):i:"unknown error nr: "+n;throw Error("[Immer] "+o)}throw Error("[Immer] minified error nr: "+n+(t.length?" "+t.map((function(n){return "'"+n+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function r(n){return !!n&&!!n[Q]}function t(n){return !!n&&(function(n){if(!n||"object"!=typeof n)return !1;var r=Object.getPrototypeOf(n);if(null===r)return !0;var t=Object.hasOwnProperty.call(r,"constructor")&&r.constructor;return t===Object||"function"==typeof t&&Function.toString.call(t)===Z}(n)||Array.isArray(n)||!!n[L]||!!n.constructor[L]||s(n)||v(n))}function i(n,r,t){void 0===t&&(t=!1),0===o(n)?(t?Object.keys:nn)(n).forEach((function(e){t&&"symbol"==typeof e||r(e,n[e],n);})):n.forEach((function(t,e){return r(e,t,n)}));}function o(n){var r=n[Q];return r?r.i>3?r.i-4:r.i:Array.isArray(n)?1:s(n)?2:v(n)?3:0}function u(n,r){return 2===o(n)?n.has(r):Object.prototype.hasOwnProperty.call(n,r)}function a(n,r){return 2===o(n)?n.get(r):n[r]}function f(n,r,t){var e=o(n);2===e?n.set(r,t):3===e?(n.delete(r),n.add(t)):n[r]=t;}function c(n,r){return n===r?0!==n||1/n==1/r:n!=n&&r!=r}function s(n){return X&&n instanceof Map}function v(n){return q&&n instanceof Set}function p(n){return n.o||n.t}function l(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var r=rn(n);delete r[Q];for(var t=nn(r),e=0;e<t.length;e++){var i=t[e],o=r[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(r[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]});}return Object.create(Object.getPrototypeOf(n),r)}function d(n,e){return void 0===e&&(e=!1),y(n)||r(n)||!t(n)?n:(o(n)>1&&(n.set=n.add=n.clear=n.delete=h),Object.freeze(n),e&&i(n,(function(n,r){return d(r,!0)}),!0),n)}function h(){n(2);}function y(n){return null==n||"object"!=typeof n||Object.isFrozen(n)}function b(r){var t=tn[r];return t||n(18,r),t}function m(n,r){tn[n]||(tn[n]=r);}function _(){return "production"===process.env.NODE_ENV||U||n(0),U}function j(n,r){r&&(b("Patches"),n.u=[],n.s=[],n.v=r);}function O(n){g(n),n.p.forEach(S),n.p=null;}function g(n){n===U&&(U=n.l);}function w(n){return U={p:[],l:U,h:n,m:!0,_:0}}function S(n){var r=n[Q];0===r.i||1===r.i?r.j():r.O=!0;}function P(r,e){e._=e.p.length;var i=e.p[0],o=void 0!==r&&r!==i;return e.h.g||b("ES5").S(e,r,o),o?(i[Q].P&&(O(e),n(4)),t(r)&&(r=M(e,r),e.l||x(e,r)),e.u&&b("Patches").M(i[Q].t,r,e.u,e.s)):r=M(e,i,[]),O(e),e.u&&e.v(e.u,e.s),r!==H?r:void 0}function M(n,r,t){if(y(r))return r;var e=r[Q];if(!e)return i(r,(function(i,o){return A(n,e,r,i,o,t)}),!0),r;if(e.A!==n)return r;if(!e.P)return x(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=l(e.k):e.o;i(3===e.i?new Set(o):o,(function(r,i){return A(n,e,o,r,i,t)})),x(n,o,!1),t&&n.u&&b("Patches").R(e,t,n.u,n.s);}return e.o}function A(e,i,o,a,c,s){if("production"!==process.env.NODE_ENV&&c===o&&n(5),r(c)){var v=M(e,c,s&&i&&3!==i.i&&!u(i.D,a)?s.concat(a):void 0);if(f(o,a,v),!r(v))return;e.m=!1;}if(t(c)&&!y(c)){if(!e.h.F&&e._<1)return;M(e,c),i&&i.A.l||x(e,c);}}function x(n,r,t){void 0===t&&(t=!1),n.h.F&&n.m&&d(r,t);}function z(n,r){var t=n[Q];return (t?p(t):n)[r]}function I(n,r){if(r in n)for(var t=Object.getPrototypeOf(n);t;){var e=Object.getOwnPropertyDescriptor(t,r);if(e)return e;t=Object.getPrototypeOf(t);}}function k(n){n.P||(n.P=!0,n.l&&k(n.l));}function E(n){n.o||(n.o=l(n.t));}function R(n,r,t){var e=s(r)?b("MapSet").N(r,t):v(r)?b("MapSet").T(r,t):n.g?function(n,r){var t=Array.isArray(n),e={i:t?1:0,A:r?r.A:_(),P:!1,I:!1,D:{},l:r,t:n,k:null,o:null,j:null,C:!1},i=e,o=en;t&&(i=[e],o=on);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(r,t):b("ES5").J(r,t);return (t?t.A:_()).p.push(e),e}function D(e){return r(e)||n(22,e),function n(r){if(!t(r))return r;var e,u=r[Q],c=o(r);if(u){if(!u.P&&(u.i<4||!b("ES5").K(u)))return u.t;u.I=!0,e=F(r,c),u.I=!1;}else e=F(r,c);return i(e,(function(r,t){u&&a(u.t,r)===t||f(e,r,n(t));})),3===c?new Set(e):e}(e)}function F(n,r){switch(r){case 2:return new Map(n);case 3:return Array.from(n)}return l(n)}function N(){function t(n,r){var t=s[n];return t?t.enumerable=r:s[n]=t={configurable:!0,enumerable:r,get:function(){var r=this[Q];return "production"!==process.env.NODE_ENV&&f(r),en.get(r,n)},set:function(r){var t=this[Q];"production"!==process.env.NODE_ENV&&f(t),en.set(t,n,r);}},t}function e(n){for(var r=n.length-1;r>=0;r--){var t=n[r][Q];if(!t.P)switch(t.i){case 5:a(t)&&k(t);break;case 4:o(t)&&k(t);}}}function o(n){for(var r=n.t,t=n.k,e=nn(t),i=e.length-1;i>=0;i--){var o=e[i];if(o!==Q){var a=r[o];if(void 0===a&&!u(r,o))return !0;var f=t[o],s=f&&f[Q];if(s?s.t!==a:!c(f,a))return !0}}var v=!!r[Q];return e.length!==nn(r).length+(v?0:1)}function a(n){var r=n.k;if(r.length!==n.t.length)return !0;var t=Object.getOwnPropertyDescriptor(r,r.length-1);if(t&&!t.get)return !0;for(var e=0;e<r.length;e++)if(!r.hasOwnProperty(e))return !0;return !1}function f(r){r.O&&n(3,JSON.stringify(p(r)));}var s={};m("ES5",{J:function(n,r){var e=Array.isArray(n),i=function(n,r){if(n){for(var e=Array(r.length),i=0;i<r.length;i++)Object.defineProperty(e,""+i,t(i,!0));return e}var o=rn(r);delete o[Q];for(var u=nn(o),a=0;a<u.length;a++){var f=u[a];o[f]=t(f,n||!!o[f].enumerable);}return Object.create(Object.getPrototypeOf(r),o)}(e,n),o={i:e?5:4,A:r?r.A:_(),P:!1,I:!1,D:{},l:r,t:n,k:i,o:null,O:!1,C:!1};return Object.defineProperty(i,Q,{value:o,writable:!0}),i},S:function(n,t,o){o?r(t)&&t[Q].A===n&&e(n.p):(n.u&&function n(r){if(r&&"object"==typeof r){var t=r[Q];if(t){var e=t.t,o=t.k,f=t.D,c=t.i;if(4===c)i(o,(function(r){r!==Q&&(void 0!==e[r]||u(e,r)?f[r]||n(o[r]):(f[r]=!0,k(t)));})),i(e,(function(n){void 0!==o[n]||u(o,n)||(f[n]=!1,k(t));}));else if(5===c){if(a(t)&&(k(t),f.length=!0),o.length<e.length)for(var s=o.length;s<e.length;s++)f[s]=!1;else for(var v=e.length;v<o.length;v++)f[v]=!0;for(var p=Math.min(o.length,e.length),l=0;l<p;l++)o.hasOwnProperty(l)||(f[l]=!0),void 0===f[l]&&n(o[l]);}}}}(n.p[0]),e(n.p));},K:function(n){return 4===n.i?o(n):a(n)}});}var G,U,W="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),X="undefined"!=typeof Map,q="undefined"!=typeof Set,B="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,H=W?Symbol.for("immer-nothing"):((G={})["immer-nothing"]=!0,G),L=W?Symbol.for("immer-draftable"):"__$immer_draftable",Q=W?Symbol.for("immer-state"):"__$immer_state",Y={0:"Illegal state",1:"Immer drafts cannot have computed properties",2:"This object has been frozen and should not be mutated",3:function(n){return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+n},4:"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",5:"Immer forbids circular references",6:"The first or second argument to `produce` must be a function",7:"The third argument to `produce` must be a function or undefined",8:"First argument to `createDraft` must be a plain object, an array, or an immerable object",9:"First argument to `finishDraft` must be a draft returned by `createDraft`",10:"The given draft is already finalized",11:"Object.defineProperty() cannot be used on an Immer draft",12:"Object.setPrototypeOf() cannot be used on an Immer draft",13:"Immer only supports deleting array indices",14:"Immer only supports setting array indices and the 'length' property",15:function(n){return "Cannot apply patch, path doesn't resolve: "+n},16:'Sets cannot have "replace" patches.',17:function(n){return "Unsupported patch operation: "+n},18:function(n){return "The plugin for '"+n+"' has not been loaded into Immer. To enable the plugin, import and call `enable"+n+"()` when initializing your application."},20:"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",21:function(n){return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '"+n+"'"},22:function(n){return "'current' expects a draft, got: "+n},23:function(n){return "'original' expects a draft, got: "+n},24:"Patching reserved attributes like __proto__, prototype and constructor is not allowed"},Z=""+Object.prototype.constructor,nn="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,rn=Object.getOwnPropertyDescriptors||function(n){var r={};return nn(n).forEach((function(t){r[t]=Object.getOwnPropertyDescriptor(n,t);})),r},tn={},en={get:function(n,r){if(r===Q)return n;var e=p(n);if(!u(e,r))return function(n,r,t){var e,i=I(r,t);return i?"value"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,r);var i=e[r];return n.I||!t(i)?i:i===z(n.t,r)?(E(n),n.o[r]=R(n.A.h,i,n)):i},has:function(n,r){return r in p(n)},ownKeys:function(n){return Reflect.ownKeys(p(n))},set:function(n,r,t){var e=I(p(n),r);if(null==e?void 0:e.set)return e.set.call(n.k,t),!0;if(!n.P){var i=z(p(n),r),o=null==i?void 0:i[Q];if(o&&o.t===t)return n.o[r]=t,n.D[r]=!1,!0;if(c(t,i)&&(void 0!==t||u(n.t,r)))return !0;E(n),k(n);}return n.o[r]===t&&"number"!=typeof t&&(void 0!==t||r in n.o)||(n.o[r]=t,n.D[r]=!0,!0)},deleteProperty:function(n,r){return void 0!==z(n.t,r)||r in n.t?(n.D[r]=!1,E(n),k(n)):delete n.D[r],n.o&&delete n.o[r],!0},getOwnPropertyDescriptor:function(n,r){var t=p(n),e=Reflect.getOwnPropertyDescriptor(t,r);return e?{writable:!0,configurable:1!==n.i||"length"!==r,enumerable:e.enumerable,value:t[r]}:e},defineProperty:function(){n(11);},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n(12);}},on={};i(en,(function(n,r){on[n]=function(){return arguments[0]=arguments[0][0],r.apply(this,arguments)};})),on.deleteProperty=function(r,t){return "production"!==process.env.NODE_ENV&&isNaN(parseInt(t))&&n(13),on.set.call(this,r,t,void 0)},on.set=function(r,t,e){return "production"!==process.env.NODE_ENV&&"length"!==t&&isNaN(parseInt(t))&&n(14),en.set.call(this,r[0],t,e,r[0])};var un=function(){function e(r){var e=this;this.g=B,this.F=!0,this.produce=function(r,i,o){if("function"==typeof r&&"function"!=typeof i){var u=i;i=r;var a=e;return function(n){var r=this;void 0===n&&(n=u);for(var t=arguments.length,e=Array(t>1?t-1:0),o=1;o<t;o++)e[o-1]=arguments[o];return a.produce(n,(function(n){var t;return (t=i).call.apply(t,[r,n].concat(e))}))}}var f;if("function"!=typeof i&&n(6),void 0!==o&&"function"!=typeof o&&n(7),t(r)){var c=w(e),s=R(e,r,void 0),v=!0;try{f=i(s),v=!1;}finally{v?O(c):g(c);}return "undefined"!=typeof es6Promise.Promise&&f instanceof es6Promise.Promise?f.then((function(n){return j(c,o),P(n,c)}),(function(n){throw O(c),n})):(j(c,o),P(f,c))}if(!r||"object"!=typeof r){if(void 0===(f=i(r))&&(f=r),f===H&&(f=void 0),e.F&&d(f,!0),o){var p=[],l=[];b("Patches").M(r,f,p,l),o(p,l);}return f}n(21,r);},this.produceWithPatches=function(n,r){if("function"==typeof n)return function(r){for(var t=arguments.length,i=Array(t>1?t-1:0),o=1;o<t;o++)i[o-1]=arguments[o];return e.produceWithPatches(r,(function(r){return n.apply(void 0,[r].concat(i))}))};var t,i,o=e.produce(n,r,(function(n,r){t=n,i=r;}));return "undefined"!=typeof es6Promise.Promise&&o instanceof es6Promise.Promise?o.then((function(n){return [n,t,i]})):[o,t,i]},"boolean"==typeof(null==r?void 0:r.useProxies)&&this.setUseProxies(r.useProxies),"boolean"==typeof(null==r?void 0:r.autoFreeze)&&this.setAutoFreeze(r.autoFreeze);}var i=e.prototype;return i.createDraft=function(e){t(e)||n(8),r(e)&&(e=D(e));var i=w(this),o=R(this,e,void 0);return o[Q].C=!0,g(i),o},i.finishDraft=function(r,t){var e=r&&r[Q];"production"!==process.env.NODE_ENV&&(e&&e.C||n(9),e.I&&n(10));var i=e.A;return j(i,t),P(void 0,i)},i.setAutoFreeze=function(n){this.F=n;},i.setUseProxies=function(r){r&&!B&&n(20),this.g=r;},i.applyPatches=function(n,t){var e;for(e=t.length-1;e>=0;e--){var i=t[e];if(0===i.path.length&&"replace"===i.op){n=i.value;break}}e>-1&&(t=t.slice(e+1));var o=b("Patches").$;return r(n)?o(n,t):this.produce(n,(function(n){return o(n,t)}))},e}(),an=new un,fn=an.produce;an.produceWithPatches.bind(an);an.setAutoFreeze.bind(an);an.setUseProxies.bind(an);an.applyPatches.bind(an);an.createDraft.bind(an);an.finishDraft.bind(an);

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = function (obj, key, value) { return key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value }) : obj[key] = value; };
var __spreadValues = function (a, b) {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++) {
            var prop = _c[_i];
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __spreadProps = function (a, b) { return __defProps(a, __getOwnPropDescs(b)); };
var __async = function (__this, __arguments, generator) {
    return new es6Promise.Promise(function (resolve, reject) {
        var fulfilled = function (value) {
            try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            }
        };
        var rejected = function (value) {
            try {
                step(generator.throw(value));
            }
            catch (e) {
                reject(e);
            }
        };
        var step = function (x) { return x.done ? resolve(x.value) : es6Promise.Promise.resolve(x.value).then(fulfilled, rejected); };
        step((generator = generator.apply(__this, __arguments)).next());
    });
};
/** @class */ ((function (_super) {
    __extends(MiddlewareArray, _super);
    function MiddlewareArray() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        Object.setPrototypeOf(_this, MiddlewareArray.prototype);
        return _this;
    }
    Object.defineProperty(MiddlewareArray, Symbol.species, {
        get: function () {
            return MiddlewareArray;
        },
        enumerable: false,
        configurable: true
    });
    MiddlewareArray.prototype.concat = function () {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arr[_i] = arguments[_i];
        }
        return _super.prototype.concat.apply(this, arr);
    };
    MiddlewareArray.prototype.prepend = function () {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arr[_i] = arguments[_i];
        }
        if (arr.length === 1 && Array.isArray(arr[0])) {
            return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr[0].concat(this))))();
        }
        return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr.concat(this))))();
    };
    return MiddlewareArray;
})(Array));
function freezeDraftable(val) {
    return t(val) ? fn(val, function () {
    }) : val;
}
// src/immutableStateInvariantMiddleware.ts
process.env.NODE_ENV === "production";
// src/configureStore.ts
process.env.NODE_ENV === "production";
// src/createAction.ts
function createAction(type, prepareAction) {
    function actionCreator() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (prepareAction) {
            var prepared = prepareAction.apply(void 0, args);
            if (!prepared) {
                throw new Error("prepareAction did not return an object");
            }
            return __spreadValues(__spreadValues({
                type: type,
                payload: prepared.payload
            }, "meta" in prepared && { meta: prepared.meta }), "error" in prepared && { error: prepared.error });
        }
        return { type: type, payload: args[0] };
    }
    actionCreator.toString = function () { return "" + type; };
    actionCreator.type = type;
    actionCreator.match = function (action) { return action.type === type; };
    return actionCreator;
}
// src/mapBuilders.ts
function executeReducerBuilderCallback(builderCallback) {
    var actionsMap = {};
    var actionMatchers = [];
    var defaultCaseReducer;
    var builder = {
        addCase: function (typeOrActionCreator, reducer) {
            if (process.env.NODE_ENV !== "production") {
                if (actionMatchers.length > 0) {
                    throw new Error("`builder.addCase` should only be called before calling `builder.addMatcher`");
                }
                if (defaultCaseReducer) {
                    throw new Error("`builder.addCase` should only be called before calling `builder.addDefaultCase`");
                }
            }
            var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
            if (type in actionsMap) {
                throw new Error("addCase cannot be called with two reducers for the same action type");
            }
            actionsMap[type] = reducer;
            return builder;
        },
        addMatcher: function (matcher, reducer) {
            if (process.env.NODE_ENV !== "production") {
                if (defaultCaseReducer) {
                    throw new Error("`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
                }
            }
            actionMatchers.push({ matcher: matcher, reducer: reducer });
            return builder;
        },
        addDefaultCase: function (reducer) {
            if (process.env.NODE_ENV !== "production") {
                if (defaultCaseReducer) {
                    throw new Error("`builder.addDefaultCase` can only be called once");
                }
            }
            defaultCaseReducer = reducer;
            return builder;
        }
    };
    builderCallback(builder);
    return [actionsMap, actionMatchers, defaultCaseReducer];
}
// src/createReducer.ts
function isStateFunction(x) {
    return typeof x === "function";
}
function createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
    if (actionMatchers === void 0) { actionMatchers = []; }
    var _c = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer], actionsMap = _c[0], finalActionMatchers = _c[1], finalDefaultCaseReducer = _c[2];
    var getInitialState;
    if (isStateFunction(initialState)) {
        getInitialState = function () { return freezeDraftable(initialState()); };
    }
    else {
        var frozenInitialState_1 = freezeDraftable(initialState);
        getInitialState = function () { return frozenInitialState_1; };
    }
    function reducer(state, action) {
        if (state === void 0) { state = getInitialState(); }
        var caseReducers = __spreadArray([
            actionsMap[action.type]
        ], finalActionMatchers.filter(function (_c) {
            var matcher = _c.matcher;
            return matcher(action);
        }).map(function (_c) {
            var reducer2 = _c.reducer;
            return reducer2;
        }));
        if (caseReducers.filter(function (cr) { return !!cr; }).length === 0) {
            caseReducers = [finalDefaultCaseReducer];
        }
        return caseReducers.reduce(function (previousState, caseReducer) {
            if (caseReducer) {
                if (r(previousState)) {
                    var draft = previousState;
                    var result = caseReducer(draft, action);
                    if (result === void 0) {
                        return previousState;
                    }
                    return result;
                }
                else if (!t(previousState)) {
                    var result = caseReducer(previousState, action);
                    if (result === void 0) {
                        if (previousState === null) {
                            return previousState;
                        }
                        throw Error("A case reducer on a non-draftable value must not return undefined");
                    }
                    return result;
                }
                else {
                    return fn(previousState, function (draft) {
                        return caseReducer(draft, action);
                    });
                }
            }
            return previousState;
        }, state);
    }
    reducer.getInitialState = getInitialState;
    return reducer;
}
// src/createSlice.ts
function getType2(slice, actionKey) {
    return slice + "/" + actionKey;
}
function createSlice(options) {
    var name = options.name;
    if (!name) {
        throw new Error("`name` is a required option for createSlice");
    }
    if (typeof process !== "undefined" && process.env.NODE_ENV === "development") {
        if (options.initialState === void 0) {
            console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
        }
    }
    var initialState = typeof options.initialState == "function" ? options.initialState : freezeDraftable(options.initialState);
    var reducers = options.reducers || {};
    var reducerNames = Object.keys(reducers);
    var sliceCaseReducersByName = {};
    var sliceCaseReducersByType = {};
    var actionCreators = {};
    reducerNames.forEach(function (reducerName) {
        var maybeReducerWithPrepare = reducers[reducerName];
        var type = getType2(name, reducerName);
        var caseReducer;
        var prepareCallback;
        if ("reducer" in maybeReducerWithPrepare) {
            caseReducer = maybeReducerWithPrepare.reducer;
            prepareCallback = maybeReducerWithPrepare.prepare;
        }
        else {
            caseReducer = maybeReducerWithPrepare;
        }
        sliceCaseReducersByName[reducerName] = caseReducer;
        sliceCaseReducersByType[type] = caseReducer;
        actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);
    });
    function buildReducer() {
        var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers], _d = _c[0], extraReducers = _d === void 0 ? {} : _d, _e = _c[1], actionMatchers = _e === void 0 ? [] : _e, _f = _c[2], defaultCaseReducer = _f === void 0 ? void 0 : _f;
        var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);
        return createReducer(initialState, finalCaseReducers, actionMatchers, defaultCaseReducer);
    }
    var _reducer;
    return {
        name: name,
        reducer: function (state, action) {
            if (!_reducer)
                _reducer = buildReducer();
            return _reducer(state, action);
        },
        actions: actionCreators,
        caseReducers: sliceCaseReducersByName,
        getInitialState: function () {
            if (!_reducer)
                _reducer = buildReducer();
            return _reducer.getInitialState();
        }
    };
}
// src/nanoid.ts
var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
var nanoid = function (size) {
    if (size === void 0) { size = 21; }
    var id = "";
    var i = size;
    while (i--) {
        id += urlAlphabet[Math.random() * 64 | 0];
    }
    return id;
};
// src/createAsyncThunk.ts
var commonProperties = [
    "name",
    "message",
    "stack",
    "code"
];
var RejectWithValue = /** @class */ (function () {
    function RejectWithValue(payload, meta) {
        this.payload = payload;
        this.meta = meta;
    }
    return RejectWithValue;
}());
var FulfillWithMeta = /** @class */ (function () {
    function FulfillWithMeta(payload, meta) {
        this.payload = payload;
        this.meta = meta;
    }
    return FulfillWithMeta;
}());
var miniSerializeError = function (value) {
    if (typeof value === "object" && value !== null) {
        var simpleError = {};
        for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {
            var property = commonProperties_1[_i];
            if (typeof value[property] === "string") {
                simpleError[property] = value[property];
            }
        }
        return simpleError;
    }
    return { message: String(value) };
};
function createAsyncThunk(typePrefix, payloadCreator, options) {
    var fulfilled = createAction(typePrefix + "/fulfilled", function (payload, requestId, arg, meta) { return ({
        payload: payload,
        meta: __spreadProps(__spreadValues({}, meta || {}), {
            arg: arg,
            requestId: requestId,
            requestStatus: "fulfilled"
        })
    }); });
    var pending = createAction(typePrefix + "/pending", function (requestId, arg, meta) { return ({
        payload: void 0,
        meta: __spreadProps(__spreadValues({}, meta || {}), {
            arg: arg,
            requestId: requestId,
            requestStatus: "pending"
        })
    }); });
    var rejected = createAction(typePrefix + "/rejected", function (error, requestId, arg, payload, meta) { return ({
        payload: payload,
        error: (options && options.serializeError || miniSerializeError)(error || "Rejected"),
        meta: __spreadProps(__spreadValues({}, meta || {}), {
            arg: arg,
            requestId: requestId,
            rejectedWithValue: !!payload,
            requestStatus: "rejected",
            aborted: (error == null ? void 0 : error.name) === "AbortError",
            condition: (error == null ? void 0 : error.name) === "ConditionError"
        })
    }); });
    var displayedWarning = false;
    var AC = typeof AbortController !== "undefined" ? AbortController : /** @class */ (function () {
        function class_1() {
            this.signal = {
                aborted: false,
                addEventListener: function () {
                },
                dispatchEvent: function () {
                    return false;
                },
                onabort: function () {
                },
                removeEventListener: function () {
                },
                reason: void 0,
                throwIfAborted: function () {
                }
            };
        }
        class_1.prototype.abort = function () {
            if (process.env.NODE_ENV !== "production") {
                if (!displayedWarning) {
                    displayedWarning = true;
                    console.info("This platform does not implement AbortController. \nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.");
                }
            }
        };
        return class_1;
    }());
    function actionCreator(arg) {
        return function (dispatch, getState, extra) {
            var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();
            var abortController = new AC();
            var abortReason;
            var abortedPromise = new es6Promise.Promise(function (_, reject) { return abortController.signal.addEventListener("abort", function () { return reject({ name: "AbortError", message: abortReason || "Aborted" }); }); });
            var started = false;
            function abort(reason) {
                if (started) {
                    abortReason = reason;
                    abortController.abort();
                }
            }
            var promise = function () {
                return __async(this, null, function () {
                    var _a, _b, finalAction, conditionResult, err_1, skipDispatch;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _c.trys.push([0, 4, , 5]);
                                conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, { getState: getState, extra: extra });
                                if (!isThenable(conditionResult)) return [3 /*break*/, 2];
                                return [4 /*yield*/, conditionResult];
                            case 1:
                                conditionResult = _c.sent();
                                _c.label = 2;
                            case 2:
                                if (conditionResult === false) {
                                    throw {
                                        name: "ConditionError",
                                        message: "Aborted due to condition callback returning false."
                                    };
                                }
                                started = true;
                                dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, { requestId: requestId, arg: arg }, { getState: getState, extra: extra })));
                                return [4 /*yield*/, es6Promise.Promise.race([
                                        abortedPromise,
                                        es6Promise.Promise.resolve(payloadCreator(arg, {
                                            dispatch: dispatch,
                                            getState: getState,
                                            extra: extra,
                                            requestId: requestId,
                                            signal: abortController.signal,
                                            rejectWithValue: function (value, meta) {
                                                return new RejectWithValue(value, meta);
                                            },
                                            fulfillWithValue: function (value, meta) {
                                                return new FulfillWithMeta(value, meta);
                                            }
                                        })).then(function (result) {
                                            if (result instanceof RejectWithValue) {
                                                throw result;
                                            }
                                            if (result instanceof FulfillWithMeta) {
                                                return fulfilled(result.payload, requestId, arg, result.meta);
                                            }
                                            return fulfilled(result, requestId, arg);
                                        })
                                    ])];
                            case 3:
                                finalAction = _c.sent();
                                return [3 /*break*/, 5];
                            case 4:
                                err_1 = _c.sent();
                                finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);
                                return [3 /*break*/, 5];
                            case 5:
                                skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
                                if (!skipDispatch) {
                                    dispatch(finalAction);
                                }
                                return [2 /*return*/, finalAction];
                        }
                    });
                });
            }();
            return Object.assign(promise, {
                abort: abort,
                requestId: requestId,
                arg: arg,
                unwrap: function () {
                    return promise.then(unwrapResult);
                }
            });
        };
    }
    return Object.assign(actionCreator, {
        pending: pending,
        rejected: rejected,
        fulfilled: fulfilled,
        typePrefix: typePrefix
    });
}
function unwrapResult(action) {
    if (action.meta && action.meta.rejectedWithValue) {
        throw action.payload;
    }
    if (action.error) {
        throw action.error;
    }
    return action.payload;
}
function isThenable(value) {
    return value !== null && typeof value === "object" && typeof value.then === "function";
}
var alm = "listenerMiddleware";
createAction(alm + "/add");
createAction(alm + "/removeAll");
createAction(alm + "/remove");
// src/index.ts
N();

var defaultReject = {
  loading: false,
  error: true,
  message: "",
  data: {}
};
var defaultState = {
  List: {
    loading: false,
    error: false,
    data: [],
    message: ""
  },
  Info: {
    loading: false,
    error: false,
    data: {},
    message: ""
  }
};

var moment = createCommonjsModule(function (module, exports) {
(function (global, factory) {
    module.exports = factory() ;
}(commonjsGlobal, (function () {
    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i,
            arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i,
            prop,
            val,
            momentPropertiesLen = momentProperties.length;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentPropertiesLen > 0) {
            for (i = 0; i < momentPropertiesLen; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key,
                    argLen = arguments.length;
                for (i = 0; i < argLen; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens =
            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i,
                prioritizedLen = prioritized.length;
            for (i = 0; i < prioritizedLen; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord =
            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(
                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
                    function (matched, p1, p2, p3, p4) {
                        return p1 || p2 || p3 || p4;
                    }
                )
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback,
            tokenLen;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        tokenLen = token.length;
        for (i = 0; i < tokenLen; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths =
            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                '_'
            ),
        defaultLocaleMonthsShort =
            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(
        ['w', 'ww', 'W', 'WW'],
        function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
        }
    );

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays =
            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function isLocaleNameSane(name) {
        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
        return name.match('^[^/\\\\]*$') != null;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            'object' !== 'undefined' &&
            module &&
            module.exports &&
            isLocaleNameSane(name)
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = commonjsRequire;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex =
            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex =
            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 =
            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat,
            isoDatesLen = isoDates.length,
            isoTimesLen = isoTimes.length;

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDatesLen; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimesLen; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^()]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era,
            tokenLen;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens.length;
        for (i = 0; i < tokenLen; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false,
            configfLen = config._f.length;

        if (configfLen === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < configfLen; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i,
            orderLen = ordering.length;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < orderLen; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex =
            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property,
            propertyLen = properties.length;

        for (i = 0; i < propertyLen; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(
        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
        function (input, array, config, token) {
            var era = config._locale.erasParse(input, token, config._strict);
            if (era) {
                getParsingFlags(config).era = era;
            } else {
                getParsingFlags(config).invalidEra = input;
            }
        }
    );

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(
        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
        function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
        }
    );

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.29.4';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));
});

var dbName = process.env.REACT_APP_DB;
var idm_metadata_dbname = process.env.REACT_APP_METADATA_DB_NAME;
process.env.REACT_APP_IDM_DB;
var __baseUrl__ = "".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_BASE_URL_HOST, ":").concat(process.env.REACT_APP_BASE_URL_PORT, "/api/read_qdmqueries");
var __uspsertUrl__ = "".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_BASE_URL_HOST, ":").concat(process.env.REACT_APP_BASE_URL_PORT, "/api/upsert_document");
"".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_BASE_URL_HOST, ":").concat(process.env.REACT_APP_BASE_URL_PORT, "/api/updatedocument");
var __readDocumentUrl__ = "".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_BASE_URL_HOST, ":").concat(process.env.REACT_APP_BASE_URL_PORT, "/api/read_documents");
var __deleteUrl__ = "".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_BASE_URL_HOST, ":").concat(process.env.REACT_APP_BASE_URL_PORT, "/api/delete_document");
var __softDelete__ = "".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_BASE_URL_HOST, ":").concat(process.env.REACT_APP_BASE_URL_PORT, "/api/soft_delete");
"".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_PHARMACY_URL_HOST, "/api/ScheduleGeneration/GetDispenseDuration");
"".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_PHARMACY_URL_HOST, "/api/UomConversion/CalculateDispenseDoseStrength");
"".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_PHARMACY_URL_HOST, "/api/ScheduleGeneration/DoseScheduleGeneration");
"".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_PHARMACY_URL_HOST, "/api/Exchequer/StockAvailabilityCheck");
"".concat(process.env.REACT_APP_STOCK_AVAILABLE_API_KEY);
"".concat(process.env.REACT_APP_STOCK_AVAILABLE_SECRET_KEY);
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/verifyUserAction");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/filling/Reverify");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/filling/Filled");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/verification/Discontinue");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/checking/Reverify");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/checking/Checked");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/dispense/Reverify");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/dispense/Issue");
"".concat(process.env.REACT_APP_PDF_API, "/api/generateReport");
"".concat(process.env.REACT_APP_QUERY_URL, "/GetReportList");
"".concat(process.env.REACT_APP_QUERY_URL, "/ReportQueryExecution");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/upsert/OrderlinewithQueue");
"".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_PHARMACY_URL_HOST, "/api/ScheduleGeneration/GetOrderStartDate");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/insertQdmTransactionLog");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/returnMedicationOrder");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/returnMedicationOrderRequestApproved");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/returnMedicationOrderRequestRejected");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/multiSelectOpenCart");
"".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_PHARMACY_URL_HOST, "/api/ScheduleGeneration/CartClose");
"".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_PHARMACY_URL_HOST, "/api/ScheduleGeneration/GetDispenseDurationbyCart");
"".concat(process.env.REACT_APP_TOKEN_URL, "/IDMJWTTokencreation");
"".concat(process.env.REACT_APP_TOKEN_URL, "/GetPermissionforRoles");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/getAllQueueList");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/LoadDispesnsepharmacy");
var __upsertPractitioner__ = "".concat(process.env.REACT_APP_NIFI_API, "/api/v1/upsertPractitioner");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/orderDefault"); // IDM Links

var __ListIDMRepositories__ = "".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_IDM_URL, "/list_idmRepository");
"".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_IDM_URL, "/getAllPermissions");
var __GetPermissionByID__ = "".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_IDM_URL, "/get_permissionById");
var __UpsertPermission__ = "".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_IDM_URL, "/upsert_permission");
var __DeletePermission__ = "".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_IDM_URL, "/permissionSoftDelete");
var __GetAllClientPermissions__ = "".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_IDM_URL, "/getAllClientPermissions");
var __GetRoleById__ = "".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_IDM_URL, "/get_roleById");
var __RoleSoftDelete__ = "".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_IDM_URL, "/roleSoftDelete");
"".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_IDM_URL, "/getAllClientRoles");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/reIssue/Insertqueue");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/upsertQueueNo");
var __personUpsert__ = "https://idmservices.dev.ainqaplatform.in/upsert_person";
var __idmroleadd__ = "https://idmservices.dev.ainqaplatform.in/add_role";
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/atpcreateuser");
"".concat(process.env.REACT_APP_NIFI_API, "/api/v1/atpsignin");
process.env.REACT_APP_tenentID;
"".concat(process.env.REACT_APP_BASE_URL_PROTOCAL, "://").concat(process.env.REACT_APP_IDM_URL, "/v1/list_idmRepository");
var ParentRepoId = process.env.REACT_APP_PARENTREPOID;
var IDM_METADATA_ID$1 = process.env.REACT_APP_IDM_METADATA_ID;
var METADATAID = process.env.REACT_APP_METADATAID;
process.env.REACT_APP_IDM_REPO;

var fetchData = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {
    var url,
        header,
        tenantid,
        __options,
        res,
        data,
        _args = arguments;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            url = _args.length > 1 && _args[1] !== undefined ? _args[1] : __baseUrl__;
            header = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            tenantid = localStorage.getItem("tenentid"); // get jwt token from local storage

            __options = {
              method: "POST",
              headers: _objectSpread2({
                "Content-Type": "application/json",
                "tenantid": tenantid
              }, header),
              body: {}
            };
            _context.next = 6;
            return fetch(url, _objectSpread2(_objectSpread2({}, __options), input));

          case 6:
            res = _context.sent;
            _context.next = 9;
            return res.json();

          case 9:
            data = _context.sent;
            return _context.abrupt("return", data);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function fetchData(_x) {
    return _ref3.apply(this, arguments);
  };
}();

var getUtcTime = function getUtcTime(date) {
  if (date) {
    return moment.utc(date).unix();
  } else {
    return moment.utc().unix();
  }
};

var utcTOLocal = function utcTOLocal(date, format) {
  var Ndate = new Date();

  if (typeof date === "number") {
    Ndate = moment.unix(date);
  } else {
    Ndate = moment(date);
  }

  var fmt = format ? format : "DD-MM-YYYY";

  if (format) {
    return moment.utc(Ndate).local().format(fmt);
  } else {
    return moment.utc(Ndate).local();
  }
};

var generateJson = {
  insert_json: function insert_json(data, key) {
    var _data$Identification, _data$Alias, _data$Address, _data$Contact, _data$ContactPersonDe, _data$specialtyDetail, _data$external, _data$ParentEntity, _data$ParentEntity2, _data$LevelOfCare, _data$imageDetails$, _data$imageDetails$2, _data$imageDetails$3, _data$imageDetails$4, _data$orgdateformat, _data$orgtimeformat, _data$orgdatetimeform;

    var identifierArr = data === null || data === void 0 ? void 0 : (_data$Identification = data.Identification) === null || _data$Identification === void 0 ? void 0 : _data$Identification.map(function (v, i) {
      var _v$use;

      if (v !== null && v !== void 0 && (_v$use = v.use) !== null && _v$use !== void 0 && _v$use.value) {
        var _v$use2, _v$idtype;

        return {
          user: v === null || v === void 0 ? void 0 : (_v$use2 = v.use) === null || _v$use2 === void 0 ? void 0 : _v$use2.value,
          value: v === null || v === void 0 ? void 0 : v.idnumber,
          period: [{
            start: getUtcTime(moment(v === null || v === void 0 ? void 0 : v.startdate)),
            end: getUtcTime(moment(v === null || v === void 0 ? void 0 : v.enddate)),
            id: 0
          }],
          Type: v === null || v === void 0 ? void 0 : (_v$idtype = v.idtype) === null || _v$idtype === void 0 ? void 0 : _v$idtype.value
        };
      }
    });
    var aliasArr = data === null || data === void 0 ? void 0 : (_data$Alias = data.Alias) === null || _data$Alias === void 0 ? void 0 : _data$Alias.map(function (v, i) {
      var _v$aliastype;

      return {
        aliasType: v === null || v === void 0 ? void 0 : (_v$aliastype = v.aliastype) === null || _v$aliastype === void 0 ? void 0 : _v$aliastype.value,
        aliasDesc: v === null || v === void 0 ? void 0 : v.aliasname,
        aliasStart: getUtcTime(moment(v === null || v === void 0 ? void 0 : v.startdate)),
        aliasEnd: getUtcTime(moment(v === null || v === void 0 ? void 0 : v.enddate))
      };
    });
    var addressArr = data === null || data === void 0 ? void 0 : (_data$Address = data.Address) === null || _data$Address === void 0 ? void 0 : _data$Address.map(function (val, i) {
      var _val$use, _val$city, _val$district, _val$state, _val$pincode, _val$country, _val$type;

      var address1 = val !== null && val !== void 0 && val.address1 ? val === null || val === void 0 ? void 0 : val.address1 : "";
      var address2 = val !== null && val !== void 0 && val.address2 ? val === null || val === void 0 ? void 0 : val.address2 : "";
      var address3 = val !== null && val !== void 0 && val.address3 ? val === null || val === void 0 ? void 0 : val.address3 : "";
      return {
        use: val === null || val === void 0 ? void 0 : (_val$use = val.use) === null || _val$use === void 0 ? void 0 : _val$use.value,
        text: "",
        line: address1 + "," + address2 + "," + address3,
        city: val === null || val === void 0 ? void 0 : (_val$city = val.city) === null || _val$city === void 0 ? void 0 : _val$city.value,
        district: val === null || val === void 0 ? void 0 : (_val$district = val.district) === null || _val$district === void 0 ? void 0 : _val$district.value,
        state: val === null || val === void 0 ? void 0 : (_val$state = val.state) === null || _val$state === void 0 ? void 0 : _val$state.value,
        postalCode: val === null || val === void 0 ? void 0 : (_val$pincode = val.pincode) === null || _val$pincode === void 0 ? void 0 : _val$pincode.value,
        country: val === null || val === void 0 ? void 0 : (_val$country = val.country) === null || _val$country === void 0 ? void 0 : _val$country.value,
        Type: val === null || val === void 0 ? void 0 : (_val$type = val.type) === null || _val$type === void 0 ? void 0 : _val$type.value,
        id: 0
      };
    });
    var teltcomArr = data === null || data === void 0 ? void 0 : (_data$Contact = data.Contact) === null || _data$Contact === void 0 ? void 0 : _data$Contact.map(function (val, i) {
      if (val.mode.value) {
        var _val$mode, _val$use2, _val$priority, _val$code;

        return {
          system: val === null || val === void 0 ? void 0 : (_val$mode = val.mode) === null || _val$mode === void 0 ? void 0 : _val$mode.value,
          value: val === null || val === void 0 ? void 0 : val.number,
          use: val === null || val === void 0 ? void 0 : (_val$use2 = val.use) === null || _val$use2 === void 0 ? void 0 : _val$use2.value,
          rank: val === null || val === void 0 ? void 0 : (_val$priority = val.priority) === null || _val$priority === void 0 ? void 0 : _val$priority.value,
          id: 0,
          valueprefix: val === null || val === void 0 ? void 0 : (_val$code = val.code) === null || _val$code === void 0 ? void 0 : _val$code.value
        };
      }
    });
    var contactpersondetailsArr = data === null || data === void 0 ? void 0 : (_data$ContactPersonDe = data.ContactPersonDetails) === null || _data$ContactPersonDe === void 0 ? void 0 : _data$ContactPersonDe.map(function (val, i) {
      var _val$point, _val$use3, _val$prefix, _val$suffix, _val$designation;

      var telecomArr = [];
      val === null || val === void 0 ? void 0 : (_val$point = val.point) === null || _val$point === void 0 ? void 0 : _val$point.map(function (v, i) {
        var _v$use3, _v$mode;

        if (v !== null && v !== void 0 && (_v$use3 = v.use) !== null && _v$use3 !== void 0 && _v$use3.value && v !== null && v !== void 0 && (_v$mode = v.mode) !== null && _v$mode !== void 0 && _v$mode.value && v !== null && v !== void 0 && v.number) {
          var _v$mode2, _v$use4, _v$priority, _v$code;

          telecomArr.push({
            system: v === null || v === void 0 ? void 0 : (_v$mode2 = v.mode) === null || _v$mode2 === void 0 ? void 0 : _v$mode2.value,
            value: v === null || v === void 0 ? void 0 : v.number,
            use: v === null || v === void 0 ? void 0 : (_v$use4 = v.use) === null || _v$use4 === void 0 ? void 0 : _v$use4.value,
            rank: v === null || v === void 0 ? void 0 : (_v$priority = v.priority) === null || _v$priority === void 0 ? void 0 : _v$priority.value,
            id: 0,
            valueprefix: v === null || v === void 0 ? void 0 : (_v$code = v.code) === null || _v$code === void 0 ? void 0 : _v$code.value
          });
        }
      });
      return {
        telecom: telecomArr,
        name: [{
          use: val === null || val === void 0 ? void 0 : (_val$use3 = val.use) === null || _val$use3 === void 0 ? void 0 : _val$use3.value,
          text: val === null || val === void 0 ? void 0 : val.firstName,
          family: val === null || val === void 0 ? void 0 : val.middleName,
          given: val === null || val === void 0 ? void 0 : val.lastName,
          prefix: val === null || val === void 0 ? void 0 : (_val$prefix = val.prefix) === null || _val$prefix === void 0 ? void 0 : _val$prefix.value,
          suffix: val === null || val === void 0 ? void 0 : (_val$suffix = val.suffix) === null || _val$suffix === void 0 ? void 0 : _val$suffix.value,
          period: [],
          id: 0
        }],
        designation: val === null || val === void 0 ? void 0 : (_val$designation = val.designation) === null || _val$designation === void 0 ? void 0 : _val$designation.value
      };
    });
    var specialtyDetailsArr = data === null || data === void 0 ? void 0 : (_data$specialtyDetail = data.specialtyDetails) === null || _data$specialtyDetail === void 0 ? void 0 : _data$specialtyDetail.map(function (val, i) {
      return {
        specialty: val === null || val === void 0 ? void 0 : val.dropdown.id,
        effFrom: getUtcTime(moment(val === null || val === void 0 ? void 0 : val.fromDate)),
        effTo: getUtcTime(moment(val === null || val === void 0 ? void 0 : val.toDate)),
        external: false
      };
    });
    var filter = {};
    var id = {
      id: 0
    };

    if (key) {
      filter = {
        filter: {
          _key: "".concat(key)
        }
      };
      id = {};
    }

    return [_objectSpread2(_objectSpread2({
      db_name: dbName,
      entity: "Organization",
      is_metadata: true,
      metadataId: METADATAID
    }, filter), {}, {
      doc: _objectSpread2(_objectSpread2({
        active: true,
        identifier: identifierArr === null || identifierArr === void 0 ? void 0 : identifierArr.filter(function (val) {
          return val != undefined;
        }),
        name: data === null || data === void 0 ? void 0 : data.EntityName,
        alias: aliasArr,
        telecom: teltcomArr === null || teltcomArr === void 0 ? void 0 : teltcomArr.filter(function (val) {
          return val != undefined;
        }),
        address: addressArr,
        contact: contactpersondetailsArr,
        specialtyDetails: specialtyDetailsArr
      }, id), {}, {
        isExternal: (_data$external = data === null || data === void 0 ? void 0 : data.external) !== null && _data$external !== void 0 ? _data$external : false,
        ParentOrgID: data !== null && data !== void 0 && (_data$ParentEntity = data.ParentEntity) !== null && _data$ParentEntity !== void 0 && _data$ParentEntity.value ? [data === null || data === void 0 ? void 0 : (_data$ParentEntity2 = data.ParentEntity) === null || _data$ParentEntity2 === void 0 ? void 0 : _data$ParentEntity2.value] : [],
        OrgType: [data.EntityType.value],
        levelofcareid: data === null || data === void 0 ? void 0 : (_data$LevelOfCare = data.LevelOfCare) === null || _data$LevelOfCare === void 0 ? void 0 : _data$LevelOfCare.value,
        logo: data !== null && data !== void 0 && data.imageDetails && (data === null || data === void 0 ? void 0 : data.imageDetails.length) > 0 ? [{
          date: "",
          url: "",
          id: 0,
          fileName: data === null || data === void 0 ? void 0 : (_data$imageDetails$ = data.imageDetails[0]) === null || _data$imageDetails$ === void 0 ? void 0 : _data$imageDetails$.filename,
          fileid: data === null || data === void 0 ? void 0 : (_data$imageDetails$2 = data.imageDetails[0]) === null || _data$imageDetails$2 === void 0 ? void 0 : _data$imageDetails$2.fileid,
          filetype: data === null || data === void 0 ? void 0 : (_data$imageDetails$3 = data.imageDetails[0]) === null || _data$imageDetails$3 === void 0 ? void 0 : _data$imageDetails$3.filetype,
          objectid: data === null || data === void 0 ? void 0 : (_data$imageDetails$4 = data.imageDetails[0]) === null || _data$imageDetails$4 === void 0 ? void 0 : _data$imageDetails$4.objectid
        }] : [],
        entitycode: data === null || data === void 0 ? void 0 : data.EntityCode,
        orgdateformat: data === null || data === void 0 ? void 0 : (_data$orgdateformat = data.orgdateformat) === null || _data$orgdateformat === void 0 ? void 0 : _data$orgdateformat.value,
        orgtimeformat: data === null || data === void 0 ? void 0 : (_data$orgtimeformat = data.orgtimeformat) === null || _data$orgtimeformat === void 0 ? void 0 : _data$orgtimeformat.value,
        orgdatetimeformat: data === null || data === void 0 ? void 0 : (_data$orgdatetimeform = data.orgdatetimeformat) === null || _data$orgdatetimeform === void 0 ? void 0 : _data$orgdatetimeform.value
      })
    })];
  },
  IMPOORGJSON: function IMPOORGJSON(data, key) {
    if ((data === null || data === void 0 ? void 0 : data.entityType) === "Facility") {
      var params = {
        OrgCode: data === null || data === void 0 ? void 0 : data.parentEntity,
        FacName: data === null || data === void 0 ? void 0 : data.entityName,
        FacDescription: data === null || data === void 0 ? void 0 : data.entityDescription,
        FacAddress: data === null || data === void 0 ? void 0 : data.facilityAddress,
        FacStatus: true,
        EntityType: data === null || data === void 0 ? void 0 : data.entityType
      };
      return [_objectSpread2(_objectSpread2({
        db_name: dbName,
        entity: "Facility"
      }, key && {
        filter: {
          _key: key
        }
      }), {}, {
        doc: params
      })];
    } else if ((data === null || data === void 0 ? void 0 : data.entityType) === "Ward") {
      var _params = {
        FacCode: data === null || data === void 0 ? void 0 : data.parentEntity,
        WardName: data === null || data === void 0 ? void 0 : data.entityName,
        WardDescription: data === null || data === void 0 ? void 0 : data.entityDescription,
        WardAddress: data === null || data === void 0 ? void 0 : data.facilityAddress,
        WardStatus: true,
        EntityType: data === null || data === void 0 ? void 0 : data.entityType
      };
      return [_objectSpread2(_objectSpread2({
        db_name: dbName,
        entity: "Ward"
      }, key && {
        filter: {
          _key: key
        }
      }), {}, {
        doc: _params
      })];
    } else if ((data === null || data === void 0 ? void 0 : data.entityType) === "Room") {
      var _params2 = {
        WardCode: data === null || data === void 0 ? void 0 : data.parentEntity,
        RoomNumber: data === null || data === void 0 ? void 0 : data.entityName,
        RoomDescription: data === null || data === void 0 ? void 0 : data.entityDescription,
        RoomType: data === null || data === void 0 ? void 0 : data.roomType,
        RoomStatus: true,
        EntityType: data === null || data === void 0 ? void 0 : data.entityType
      };
      return [_objectSpread2(_objectSpread2({
        db_name: dbName,
        entity: "Room"
      }, key && {
        filter: {
          _key: key
        }
      }), {}, {
        doc: _params2
      })];
    } else if ((data === null || data === void 0 ? void 0 : data.entityType) === "Bed") {
      var _params3 = {
        RoomCode: data === null || data === void 0 ? void 0 : data.parentEntity,
        BedNumber: data === null || data === void 0 ? void 0 : data.entityName,
        BedDescription: data === null || data === void 0 ? void 0 : data.entityDescription,
        BedType: data === null || data === void 0 ? void 0 : data.bedType,
        BedStatus: true,
        EntityType: data === null || data === void 0 ? void 0 : data.entityType
      };
      return [_objectSpread2(_objectSpread2({
        db_name: dbName,
        entity: "Bed"
      }, key && {
        filter: {
          _key: key
        }
      }), {}, {
        doc: _params3
      })];
    } else {
      var _params4 = {
        OrgName: data === null || data === void 0 ? void 0 : data.entityName,
        OrgDescription: data === null || data === void 0 ? void 0 : data.entityDescription,
        OrgStatus: true,
        EntityType: data === null || data === void 0 ? void 0 : data.entityType
      };
      return [_objectSpread2(_objectSpread2({
        db_name: dbName,
        entity: "Organization"
      }, key && {
        filter: {
          _key: key
        }
      }), {}, {
        doc: _params4
      })];
    }
  }
};
var generateReadJson = {
  read_json: function read_json(data, Parentget) {
    var _data$identifier, _data$alias, _data$address, _data$telecom, _data$contact, _data$OrgType$, _data$OrgType$2, _data$OrgType$3, _data$ParentOrgID, _data$levelofcareid, _data$levelofcareid2, _data$isExternal, _data$logo$, _data$logo$2, _data$logo$3, _data$logo$4, _data$logo$5, _data$orgdateformat2, _data$orgdateformat3, _data$orgdatetimeform2, _data$orgdatetimeform3, _data$orgtimeformat2, _data$orgtimeformat3;

    var IdentificationArr = data === null || data === void 0 ? void 0 : (_data$identifier = data.identifier) === null || _data$identifier === void 0 ? void 0 : _data$identifier.map(function (v, i) {
      var _v$period$, _v$period$2, _v$user, _v$user2, _v$Type, _v$Type2;

      // IdentificationArr readdd
      return {
        startdate: moment.utc(moment.unix(v === null || v === void 0 ? void 0 : (_v$period$ = v.period[0]) === null || _v$period$ === void 0 ? void 0 : _v$period$.start)).local()._d,
        // startdate: moment().utc(v?.period[0]?.start, "DD-MM-YYYY")._d,
        enddate: moment.utc(moment.unix(v === null || v === void 0 ? void 0 : (_v$period$2 = v.period[0]) === null || _v$period$2 === void 0 ? void 0 : _v$period$2.end)).local()._d,
        // enddate: moment().utc(v?.period[0]?.end, "DD-MM-YYYY")._d,
        use: {
          title: v === null || v === void 0 ? void 0 : (_v$user = v.user) === null || _v$user === void 0 ? void 0 : _v$user.display,
          value: v === null || v === void 0 ? void 0 : (_v$user2 = v.user) === null || _v$user2 === void 0 ? void 0 : _v$user2._id
        },
        idtype: {
          title: v === null || v === void 0 ? void 0 : (_v$Type = v.Type) === null || _v$Type === void 0 ? void 0 : _v$Type.display,
          value: v === null || v === void 0 ? void 0 : (_v$Type2 = v.Type) === null || _v$Type2 === void 0 ? void 0 : _v$Type2._id
        },
        idnumber: v === null || v === void 0 ? void 0 : v.value
      };
    });
    var AliasArr = data === null || data === void 0 ? void 0 : (_data$alias = data.alias) === null || _data$alias === void 0 ? void 0 : _data$alias.map(function (v, i) {
      var _v$aliasType, _v$aliasType2;

      // AliasArr read
      return {
        startdate: moment().utc(v === null || v === void 0 ? void 0 : v.aliasEnd, "DD-MM-YYYY")._d,
        enddate: moment().utc(v === null || v === void 0 ? void 0 : v.aliasStart, "DD-MM-YYYY")._d,
        aliastype: {
          title: v === null || v === void 0 ? void 0 : (_v$aliasType = v.aliasType) === null || _v$aliasType === void 0 ? void 0 : _v$aliasType.display,
          value: v === null || v === void 0 ? void 0 : (_v$aliasType2 = v.aliasType) === null || _v$aliasType2 === void 0 ? void 0 : _v$aliasType2._id
        },
        aliasname: v === null || v === void 0 ? void 0 : v.aliasDesc
      };
    });
    var AddressArr = data === null || data === void 0 ? void 0 : (_data$address = data.address) === null || _data$address === void 0 ? void 0 : _data$address.map(function (v, i) {
      var _v$use5, _v$use6, _v$Type3, _v$Type4, _v$city, _v$city2, _v$district, _v$district2, _v$state, _v$state2, _v$country, _v$country2, _v$postalCode, _v$postalCode2;

      // AddressArr read
      var addressAll = v.line.split(",");
      return {
        use: {
          title: v === null || v === void 0 ? void 0 : (_v$use5 = v.use) === null || _v$use5 === void 0 ? void 0 : _v$use5.display,
          value: v === null || v === void 0 ? void 0 : (_v$use6 = v.use) === null || _v$use6 === void 0 ? void 0 : _v$use6._id
        },
        type: {
          title: v === null || v === void 0 ? void 0 : (_v$Type3 = v.Type) === null || _v$Type3 === void 0 ? void 0 : _v$Type3.display,
          value: v === null || v === void 0 ? void 0 : (_v$Type4 = v.Type) === null || _v$Type4 === void 0 ? void 0 : _v$Type4._id
        },
        address1: addressAll[0],
        address2: addressAll[1],
        address3: addressAll[2],
        city: {
          title: v === null || v === void 0 ? void 0 : (_v$city = v.city) === null || _v$city === void 0 ? void 0 : _v$city.geogLevelName,
          value: v === null || v === void 0 ? void 0 : (_v$city2 = v.city) === null || _v$city2 === void 0 ? void 0 : _v$city2._id
        },
        district: {
          title: v === null || v === void 0 ? void 0 : (_v$district = v.district) === null || _v$district === void 0 ? void 0 : _v$district.geogLevelName,
          value: v === null || v === void 0 ? void 0 : (_v$district2 = v.district) === null || _v$district2 === void 0 ? void 0 : _v$district2._id
        },
        state: {
          title: v === null || v === void 0 ? void 0 : (_v$state = v.state) === null || _v$state === void 0 ? void 0 : _v$state.geogLevelName,
          value: v === null || v === void 0 ? void 0 : (_v$state2 = v.state) === null || _v$state2 === void 0 ? void 0 : _v$state2._id
        },
        country: {
          title: v === null || v === void 0 ? void 0 : (_v$country = v.country) === null || _v$country === void 0 ? void 0 : _v$country.geogLevelName,
          value: v === null || v === void 0 ? void 0 : (_v$country2 = v.country) === null || _v$country2 === void 0 ? void 0 : _v$country2._id
        },
        pincode: {
          title: v === null || v === void 0 ? void 0 : (_v$postalCode = v.postalCode) === null || _v$postalCode === void 0 ? void 0 : _v$postalCode.geogLevelName,
          value: v === null || v === void 0 ? void 0 : (_v$postalCode2 = v.postalCode) === null || _v$postalCode2 === void 0 ? void 0 : _v$postalCode2._id
        }
      };
    });
    var ContactArr = data === null || data === void 0 ? void 0 : (_data$telecom = data.telecom) === null || _data$telecom === void 0 ? void 0 : _data$telecom.map(function (v, i) {
      var _v$valueprefix, _v$valueprefix2, _v$system, _v$system2, _v$use7, _v$use8, _v$rank, _v$rank2;

      // AliasArr read
      return {
        code: {
          title: v === null || v === void 0 ? void 0 : (_v$valueprefix = v.valueprefix) === null || _v$valueprefix === void 0 ? void 0 : _v$valueprefix.GeoLocationISDCode,
          value: v === null || v === void 0 ? void 0 : (_v$valueprefix2 = v.valueprefix) === null || _v$valueprefix2 === void 0 ? void 0 : _v$valueprefix2._id
        },
        mode: {
          title: v === null || v === void 0 ? void 0 : (_v$system = v.system) === null || _v$system === void 0 ? void 0 : _v$system.display,
          value: v === null || v === void 0 ? void 0 : (_v$system2 = v.system) === null || _v$system2 === void 0 ? void 0 : _v$system2._id
        },
        number: v === null || v === void 0 ? void 0 : v.value,
        use: {
          title: v === null || v === void 0 ? void 0 : (_v$use7 = v.use) === null || _v$use7 === void 0 ? void 0 : _v$use7.display,
          value: v === null || v === void 0 ? void 0 : (_v$use8 = v.use) === null || _v$use8 === void 0 ? void 0 : _v$use8._id
        },
        priority: {
          title: v === null || v === void 0 ? void 0 : (_v$rank = v.rank) === null || _v$rank === void 0 ? void 0 : _v$rank.display,
          value: v === null || v === void 0 ? void 0 : (_v$rank2 = v.rank) === null || _v$rank2 === void 0 ? void 0 : _v$rank2._id
        }
      };
    });
    var ContactPersonDetailsArr = data === null || data === void 0 ? void 0 : (_data$contact = data.contact) === null || _data$contact === void 0 ? void 0 : _data$contact.map(function (v, i) {
      var _v$name$, _v$name$$prefix, _v$name$2, _v$name$2$prefix, _v$name$3, _v$name$4, _v$name$5, _v$name$6, _v$name$6$suffix, _v$name$7, _v$name$7$suffix, _v$designation, _v$designation2, _v$telecom;

      // ContactPersonDetailsArr read
      return {
        use: {
          title: v.name[0].use.display,
          value: v.name[0].use._id
        },
        prefix: {
          title: v === null || v === void 0 ? void 0 : (_v$name$ = v.name[0]) === null || _v$name$ === void 0 ? void 0 : (_v$name$$prefix = _v$name$.prefix) === null || _v$name$$prefix === void 0 ? void 0 : _v$name$$prefix.display,
          value: v === null || v === void 0 ? void 0 : (_v$name$2 = v.name[0]) === null || _v$name$2 === void 0 ? void 0 : (_v$name$2$prefix = _v$name$2.prefix) === null || _v$name$2$prefix === void 0 ? void 0 : _v$name$2$prefix._id
        },
        firstName: v === null || v === void 0 ? void 0 : (_v$name$3 = v.name[0]) === null || _v$name$3 === void 0 ? void 0 : _v$name$3.text,
        middleName: v === null || v === void 0 ? void 0 : (_v$name$4 = v.name[0]) === null || _v$name$4 === void 0 ? void 0 : _v$name$4.family,
        lastName: v === null || v === void 0 ? void 0 : (_v$name$5 = v.name[0]) === null || _v$name$5 === void 0 ? void 0 : _v$name$5.given,
        suffix: {
          title: v === null || v === void 0 ? void 0 : (_v$name$6 = v.name[0]) === null || _v$name$6 === void 0 ? void 0 : (_v$name$6$suffix = _v$name$6.suffix) === null || _v$name$6$suffix === void 0 ? void 0 : _v$name$6$suffix.display,
          value: v === null || v === void 0 ? void 0 : (_v$name$7 = v.name[0]) === null || _v$name$7 === void 0 ? void 0 : (_v$name$7$suffix = _v$name$7.suffix) === null || _v$name$7$suffix === void 0 ? void 0 : _v$name$7$suffix._id
        },
        designation: {
          title: v === null || v === void 0 ? void 0 : (_v$designation = v.designation) === null || _v$designation === void 0 ? void 0 : _v$designation.display,
          value: v === null || v === void 0 ? void 0 : (_v$designation2 = v.designation) === null || _v$designation2 === void 0 ? void 0 : _v$designation2._id
        },
        point: v === null || v === void 0 ? void 0 : (_v$telecom = v.telecom) === null || _v$telecom === void 0 ? void 0 : _v$telecom.map(function (val, i) {
          var _val$system, _val$system2, _val$valueprefix, _val$valueprefix2, _val$use4, _val$use5, _val$rank, _val$rank2;

          return {
            mode: {
              title: val === null || val === void 0 ? void 0 : (_val$system = val.system) === null || _val$system === void 0 ? void 0 : _val$system.display,
              value: val === null || val === void 0 ? void 0 : (_val$system2 = val.system) === null || _val$system2 === void 0 ? void 0 : _val$system2._id
            },
            code: {
              title: val === null || val === void 0 ? void 0 : (_val$valueprefix = val.valueprefix) === null || _val$valueprefix === void 0 ? void 0 : _val$valueprefix.GeoLocationISDCode,
              value: val === null || val === void 0 ? void 0 : (_val$valueprefix2 = val.valueprefix) === null || _val$valueprefix2 === void 0 ? void 0 : _val$valueprefix2._id
            },
            number: val === null || val === void 0 ? void 0 : val.value,
            use: {
              title: val === null || val === void 0 ? void 0 : (_val$use4 = val.use) === null || _val$use4 === void 0 ? void 0 : _val$use4.display,
              value: val === null || val === void 0 ? void 0 : (_val$use5 = val.use) === null || _val$use5 === void 0 ? void 0 : _val$use5._id
            },
            priority: {
              title: val === null || val === void 0 ? void 0 : (_val$rank = val.rank) === null || _val$rank === void 0 ? void 0 : _val$rank.display,
              value: val === null || val === void 0 ? void 0 : (_val$rank2 = val.rank) === null || _val$rank2 === void 0 ? void 0 : _val$rank2._id
            }
          };
        })
      };
    });
    var specialtyDetailsarr = data === null || data === void 0 ? void 0 : data.specialtyDetails.map(function (val, i) {
      var _val$specialty, _val$specialty2, _val$specialty3, _val$specialty4, _val$specialty5, _val$specialty6, _val$specialty7, _val$specialty8;

      // specialtyDetailsarr
      return {
        effFrom: utcTOLocal(val === null || val === void 0 ? void 0 : val.effFrom, "DD-MM-YYYY"),
        effTo: utcTOLocal(val === null || val === void 0 ? void 0 : val.effTo, "DD-MM-YYYY"),
        specialty: val === null || val === void 0 ? void 0 : (_val$specialty = val.specialty) === null || _val$specialty === void 0 ? void 0 : _val$specialty.display,
        code: val === null || val === void 0 ? void 0 : (_val$specialty2 = val.specialty) === null || _val$specialty2 === void 0 ? void 0 : _val$specialty2.code,
        specialty_id: val === null || val === void 0 ? void 0 : (_val$specialty3 = val.specialty) === null || _val$specialty3 === void 0 ? void 0 : _val$specialty3._id,
        fromDate: moment(utcTOLocal(val === null || val === void 0 ? void 0 : val.effFrom, "DD-MM-YYYY"))._d,
        // moment(val?.effFrom)._d,
        toDate: moment(utcTOLocal(val === null || val === void 0 ? void 0 : val.effTo, "DD-MM-YYYY"))._d,
        //moment(val.effTo)._d,
        dropdown: {
          label: (val === null || val === void 0 ? void 0 : (_val$specialty4 = val.specialty) === null || _val$specialty4 === void 0 ? void 0 : _val$specialty4.display) + " (" + (val === null || val === void 0 ? void 0 : (_val$specialty5 = val.specialty) === null || _val$specialty5 === void 0 ? void 0 : _val$specialty5.code) + ")",
          value: val === null || val === void 0 ? void 0 : (_val$specialty6 = val.specialty) === null || _val$specialty6 === void 0 ? void 0 : _val$specialty6.code,
          name: val === null || val === void 0 ? void 0 : (_val$specialty7 = val.specialty) === null || _val$specialty7 === void 0 ? void 0 : _val$specialty7.display,
          id: val === null || val === void 0 ? void 0 : (_val$specialty8 = val.specialty) === null || _val$specialty8 === void 0 ? void 0 : _val$specialty8._id
        }
      };
    });
    return {
      _key: data === null || data === void 0 ? void 0 : data._key,
      status: data === null || data === void 0 ? void 0 : data.active,
      EntityType_: {
        title: data === null || data === void 0 ? void 0 : (_data$OrgType$ = data.OrgType[0]) === null || _data$OrgType$ === void 0 ? void 0 : _data$OrgType$.display,
        value: data === null || data === void 0 ? void 0 : (_data$OrgType$2 = data.OrgType[0]) === null || _data$OrgType$2 === void 0 ? void 0 : _data$OrgType$2._id,
        code: data === null || data === void 0 ? void 0 : (_data$OrgType$3 = data.OrgType[0]) === null || _data$OrgType$3 === void 0 ? void 0 : _data$OrgType$3.code
      },
      ParentEntity_: (data === null || data === void 0 ? void 0 : (_data$ParentOrgID = data.ParentOrgID) === null || _data$ParentOrgID === void 0 ? void 0 : _data$ParentOrgID.length) > 0 ? Parentget === null || Parentget === void 0 ? void 0 : Parentget.filter(function (val) {
        return (val === null || val === void 0 ? void 0 : val.value) === (data === null || data === void 0 ? void 0 : data.ParentOrgID[0]);
      }) : [],
      LevelOfCare_: {
        title: data === null || data === void 0 ? void 0 : (_data$levelofcareid = data.levelofcareid) === null || _data$levelofcareid === void 0 ? void 0 : _data$levelofcareid.description,
        value: data === null || data === void 0 ? void 0 : (_data$levelofcareid2 = data.levelofcareid) === null || _data$levelofcareid2 === void 0 ? void 0 : _data$levelofcareid2._id
      },
      EntityCode_: data === null || data === void 0 ? void 0 : data.entitycode,
      EntityName_: data === null || data === void 0 ? void 0 : data.name,
      //
      Identification_: IdentificationArr,
      Alias_: AliasArr,
      Address_: AddressArr,
      Contact_: ContactArr,
      ContactPersonDetails_: ContactPersonDetailsArr,
      specialtyDetails: specialtyDetailsarr,
      external: (_data$isExternal = data === null || data === void 0 ? void 0 : data.isExternal) !== null && _data$isExternal !== void 0 ? _data$isExternal : false,
      imageDetails_: data !== null && data !== void 0 && (_data$logo$ = data.logo[0]) !== null && _data$logo$ !== void 0 && _data$logo$.fileid ? [{
        fileid: data === null || data === void 0 ? void 0 : (_data$logo$2 = data.logo[0]) === null || _data$logo$2 === void 0 ? void 0 : _data$logo$2.fileid,
        filetype: data === null || data === void 0 ? void 0 : (_data$logo$3 = data.logo[0]) === null || _data$logo$3 === void 0 ? void 0 : _data$logo$3.filetype,
        objectid: data === null || data === void 0 ? void 0 : (_data$logo$4 = data.logo[0]) === null || _data$logo$4 === void 0 ? void 0 : _data$logo$4.objectid,
        filename: data === null || data === void 0 ? void 0 : (_data$logo$5 = data.logo[0]) === null || _data$logo$5 === void 0 ? void 0 : _data$logo$5.fileName
      }] : null,
      orgdateformat: data !== null && data !== void 0 && data.orgdateformat ? _objectSpread2(_objectSpread2({}, data === null || data === void 0 ? void 0 : data.orgdateformat), {}, {
        title: data === null || data === void 0 ? void 0 : (_data$orgdateformat2 = data.orgdateformat) === null || _data$orgdateformat2 === void 0 ? void 0 : _data$orgdateformat2.display,
        value: data === null || data === void 0 ? void 0 : (_data$orgdateformat3 = data.orgdateformat) === null || _data$orgdateformat3 === void 0 ? void 0 : _data$orgdateformat3._id
      }) : {},
      orgdatetimeformat: data !== null && data !== void 0 && data.orgdatetimeformat ? _objectSpread2(_objectSpread2({}, data === null || data === void 0 ? void 0 : data.orgdatetimeformat), {}, {
        title: data === null || data === void 0 ? void 0 : (_data$orgdatetimeform2 = data.orgdatetimeformat) === null || _data$orgdatetimeform2 === void 0 ? void 0 : _data$orgdatetimeform2.display,
        value: data === null || data === void 0 ? void 0 : (_data$orgdatetimeform3 = data.orgdatetimeformat) === null || _data$orgdatetimeform3 === void 0 ? void 0 : _data$orgdatetimeform3._id
      }) : {},
      orgtimeformat: data !== null && data !== void 0 && data.orgtimeformat ? _objectSpread2(_objectSpread2({}, data === null || data === void 0 ? void 0 : data.orgtimeformat), {}, {
        title: data === null || data === void 0 ? void 0 : (_data$orgtimeformat2 = data.orgtimeformat) === null || _data$orgtimeformat2 === void 0 ? void 0 : _data$orgtimeformat2.display,
        value: data === null || data === void 0 ? void 0 : (_data$orgtimeformat3 = data.orgtimeformat) === null || _data$orgtimeformat3 === void 0 ? void 0 : _data$orgtimeformat3._id
      }) : {}
    };
  }
};
/* {
    entityType: "",
    entityName: "",
    parentEntity: "",
    entityAddress: "",
    entityDescription: "",
    roomType: "",
    bedType: "",
    facilityAddress: "",
  } */

var getReturnforEnity = function getReturnforEnity(type) {
  switch (type) {
    case "Bed":
      return "{entityName:Bed.BedNumber,entityType:Bed.EntityType,parentEntity:Bed.RoomCode,entityDescription:Bed.BedDescription,roomType:\"\",bedType:Bed.BedType,status:Ward.BedStatus,facilityAddress:\"\",_id:Bed._id,_key:Bed._key}";

    case "Room":
      return "{entityName:Room.RoomNumber,entityType:Room.EntityType,parentEntity:Room.WardCode,entityDescription:Room.RoomDescription,roomType:Room.RoomType,bedType:\"\",status:Ward.RoomStatus,facilityAddress:\"\",_id:Bed._id,_key:Bed._key}";

    case "Ward":
      return "{entityName:Ward.WardName,entityType:Ward.EntityType,parentEntity:Ward.FacCode,entityDescription:Ward.WardDescription,roomType:\"\",bedType:\"\",status:Ward.WardStatus,facilityAddress:\"\",_id:Room._id,_key:Room._key}";

    case "Facility":
      return "{entityName:Facility.FacName,entityType:Facility.EntityType,parentEntity:Facility.OrgCode,entityDescription:Facility.FacDescription,roomType:\"\",bedType:\"\",status:Facility.FacStatus,facilityAddress:Facility.FacAddress,_id:Facility._id,_key:Facility._key}";

    case "Organization":
      return "{entityName:Organization.OrgName,entityType:Organization.EntityType,parentEntity:\"\",entityAddress:\"\",entityDescription:Organization.OrgDescription,roomType:\"\",bedType:\"\",status:Organization.OrgStatus,facilityAddress:\"\",_id:Organization._id,_key:Organization._key}";

    default:
      return "{entityName:Organization.OrgName,entityType:Organization.EntityType,parentEntity:\"\",entityAddress:\"\",entityDescription:Organization.OrgDescription,roomType:\"\",bedType:\"\",status:Organization.OrgStatus,facilityAddress:\"\",_id:Organization._id,_key:Organization._key}";
  }
};

// import { dbName } from "../../qdm_query_ids";
var queries$7 = {
  getTreeStuct: function getTreeStuct(type) {
    return {
      db_name: dbName,
      entity: "Organization",
      filter: "Organization.activestatus==true",
      return_fields: "MERGE({name:Organization.OrgName,_id:Organization._id,_key:Organization._key,type:Organization.EnitityType,children:(FOR fac IN Facility  FILTER fac.OrgCode==Organization._id  RETURN MERGE({name:fac.FacName,_id:fac._id,_key:fac._key,type:fac.EnitityType,children:(FOR ward IN Ward FILTER ward.FacCode==fac._id   RETURN MERGE({name:ward.WardName,_id:ward._id,_key:ward._key,type:ward.EnitityType,children:(FOR room IN Room FILTER room.WardCode==ward._id  RETURN MERGE({name:room.RoomNumber,_id:room._id,_key:room._key,type:room.EnitityType,children:(FOR bed IN Bed FILTER bed.RoomCode==room._id  return {name:bed.BedNumber,_id:bed._id,_key:bed._key,type:bed.EnitityType})}))}))}) )})",
      sort: "Organization.createddate desc"
    };
  },
  entityType: function entityType() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='ORGTYPE' AND CodeableConceptMaster.activestatus==true",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN TO_ARRAY(CodeableConceptMaster.coding) RETURN DOCUMENT(cod))})"
    };
  },
  getParentEntityFull: function getParentEntityFull() {
    return {
      db_name: dbName,
      entity: "Organization",
      sort: "Organization.name",
      filter: "Organization.activestatus==true AND Organization.active==true",
      return_fields: "{_id:Organization._id,_key:Organization._key,id:Organization.id,name:Organization.name,alias:Organization.alias}"
    };
  },
  getParentEntity: function getParentEntity(type) {
    var parent = type === "Facility" ? "Organization" : type === "Ward" ? "Facility" : type === "Room" ? "Ward" : type === "Bed" ? "Room" : "";
    var name = type === "Facility" ? "OrgName" : type === "Ward" ? "FacName" : type === "Room" ? "WardName" : type === "Bed" ? "RoomNumber" : "";
    return {
      db_name: dbName,
      entity: parent,
      sort: "".concat(parent, ".").concat(name),
      filter: "".concat(parent, ".activestatus==true"),
      return_fields: "{name: ".concat(parent, ".").concat(name, ", id:").concat(parent, "._id}")
    };
  },
  getSingleEntity: function getSingleEntity(key, type) {
    var Qreturn = getReturnforEnity(type);
    return {
      db_name: dbName,
      entity: type,
      filter: "".concat(type, "._id=='").concat(key, "' && ").concat(type, ".activestatus==true"),
      return_fields: Qreturn
    };
  },
  getLevelOfCare: function getLevelOfCare() {
    return {
      db_name: dbName,
      entity: "LevelOfCare",
      sort: "LevelOfCare.description",
      filter: "LevelOfCare.active==true && LevelOfCare.activestatus==true",
      return_fields: "{id:LevelOfCare.id,_id:LevelOfCare._id,levelofcareCode:LevelOfCare.levelofcareCode,description:LevelOfCare.description,careType:document(LevelOfCare.careType),active:LevelOfCare.active}"
    };
  },
  orgUseIdenifi: function orgUseIdenifi() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='USE' AND CodeableConceptMaster.activestatus==true",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN TO_ARRAY(CodeableConceptMaster.coding) RETURN DOCUMENT(cod))})"
    };
  },
  orgIdTypeIdenifi: function orgIdTypeIdenifi() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='ORGIDENTIFICATIONTYPE' AND CodeableConceptMaster.activestatus==true",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN TO_ARRAY(CodeableConceptMaster.coding) RETURN DOCUMENT(cod))})"
    };
  },
  aliastype: function aliastype() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='ACCOUNTENTITYTYPE' AND CodeableConceptMaster.activestatus==true",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN TO_ARRAY(CodeableConceptMaster.coding) RETURN DOCUMENT(cod))})"
    };
  },
  //ORGANIZATION TREE DETAILS
  getTreeDetails: function getTreeDetails(_key) {
    return {
      db_name: dbName,
      entity: "Organization",
      filter: "Organization._key=='".concat(_key, "' AND Organization.activestatus==true"),
      return_fields: "MERGE(Organization, {identifier:(FOR iden IN TO_ARRAY(Organization.identifier) RETURN MERGE(DOCUMENT(iden), {user:DOCUMENT(DOCUMENT(iden).user),period:(FOR per IN TO_ARRAY(DOCUMENT(iden).period) RETURN DOCUMENT(per) ),Type:DOCUMENT(DOCUMENT(iden).Type)})) , address:(FOR add IN TO_ARRAY(Organization.address) RETURN MERGE(DOCUMENT(add),{Type:DOCUMENT(DOCUMENT(add).Type),use:DOCUMENT(DOCUMENT(add).use),city:DOCUMENT(DOCUMENT(add).city),country:DOCUMENT(DOCUMENT(add).country),district:DOCUMENT(DOCUMENT(add).district),state:DOCUMENT(DOCUMENT(add).state),postalCode:DOCUMENT(DOCUMENT(add).postalCode)})) ,alias:(FOR alias IN TO_ARRAY(Organization.alias) RETURN MERGE(alias,{aliasType:DOCUMENT(alias.aliasType) ,aliasCode:DOCUMENT(alias.aliasCode) })) ,levelofcareid:DOCUMENT(Organization.levelofcareid) ,logo:(FOR attc IN TO_ARRAY(Organization.logo) RETURN DOCUMENT(attc)) ,telecom:(FOR tel IN TO_ARRAY(Organization.telecom) RETURN MERGE(DOCUMENT(tel),{system:DOCUMENT(DOCUMENT(tel).system),use:DOCUMENT(DOCUMENT(tel).use),rank:DOCUMENT(DOCUMENT(tel).rank) ,valueprefix:DOCUMENT(DOCUMENT(tel).valueprefix)})) , contact:(FOR cnt IN TO_ARRAY(Organization.contact) RETURN MERGE(cnt,{telecom:(FOR tel IN TO_ARRAY(cnt.telecom) RETURN MERGE(DOCUMENT(tel),{use:DOCUMENT(DOCUMENT(tel).use),system:DOCUMENT(DOCUMENT(tel).system),rank:DOCUMENT(DOCUMENT(tel).rank),valueprefix:DOCUMENT(DOCUMENT(tel).valueprefix) })),name:(FOR nm IN TO_ARRAY(cnt.name) RETURN MERGE(DOCUMENT(nm),{use:DOCUMENT(DOCUMENT(nm).use),prefix:DOCUMENT(DOCUMENT(nm).prefix),suffix:DOCUMENT(DOCUMENT(nm).suffix)})),designation:DOCUMENT(cnt.designation)}) ),OrgType:(FOR org IN TO_ARRAY(Organization.OrgType) RETURN DOCUMENT(org)),specialtyDetails:(FOR spec IN TO_ARRAY(Organization.specialtyDetails) RETURN MERGE(spec,{specialty:document(spec.specialty)})),orgdateformat:document(Organization.orgdateformat),orgtimeformat:document(Organization.orgtimeformat),orgdatetimeformat:document(Organization.orgdatetimeformat) })"
    };
  },
  //GET PARENT ORG NAME BY ID
  getParentOrgNameById: function getParentOrgNameById(_key) {
    return {
      db_name: dbName,
      entity: "Organization",
      filter: "Organization.id == ".concat(_key),
      return_fields: "{_id:Organization._id,_key:Organization._key,id:Organization.id,name:Organization.name,parentorgid:Organization.ParentOrgID}"
    };
  },
  //UPSERT STATUS
  upsertSatus: function upsertSatus(key, status) {
    return [{
      db_name: dbName,
      entity: "Organization",
      is_metadata: true,
      metadataId: METADATAID,
      filter: {
        _key: "".concat(key)
      },
      doc: {
        active: status
      }
    }];
  },
  orgAddType: function orgAddType() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='ADDRESSTYPE'",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})"
    };
  },
  orgAddUSE: function orgAddUSE() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='ADDRESSUSE'",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})"
    };
  },
  orgAddCity: function orgAddCity() {
    return {
      db_name: dbName,
      entity: "SMGeographicMaster",
      sort: "SMGeographicMaster.geogLevelName",
      filter: "Lower(DOCUMENT(SMGeographicMaster.geogLevelType).display)=='city' && SMGeographicMaster.activestatus == true && SMGeographicMaster.active == true",
      return_fields: "{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode,geogLevelCode:SMGeographicMaster.geogLevelCode}"
    };
  },
  orgAddDISTRICT: function orgAddDISTRICT(val) {
    return {
      db_name: dbName,
      entity: "SMGeographicMaster",
      sort: "SMGeographicMaster.geogLevelName",
      filter: "Lower(DOCUMENT(SMGeographicMaster.geogLevelType).display)=='district' && SMGeographicMaster._id=='".concat(val, "' && SMGeographicMaster.activestatus == true && SMGeographicMaster.active == true"),
      return_fields: "{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode}"
    };
  },
  orgAddSTATE: function orgAddSTATE(val) {
    return {
      db_name: dbName,
      entity: "SMGeographicMaster",
      sort: "SMGeographicMaster.geogLevelName",
      filter: "Lower(DOCUMENT(SMGeographicMaster.geogLevelType).display)=='state' && SMGeographicMaster._id=='".concat(val, "' && SMGeographicMaster.activestatus == true && SMGeographicMaster.active == true"),
      return_fields: "{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode}"
    };
  },
  orgAddCOUNTRY: function orgAddCOUNTRY(val) {
    return {
      db_name: dbName,
      entity: "SMGeographicMaster",
      sort: "SMGeographicMaster.geogLevelName",
      filter: "Lower(DOCUMENT(SMGeographicMaster.geogLevelType).display)=='country' && SMGeographicMaster._id=='".concat(val, "' && SMGeographicMaster.activestatus == true && SMGeographicMaster.active == true"),
      return_fields: "{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode}"
    };
  },
  orgAddPINCODE: function orgAddPINCODE(val) {
    return {
      db_name: dbName,
      entity: "SMGeographicMaster",
      sort: "SMGeographicMaster.geogLevelName",
      filter: "Lower(DOCUMENT(SMGeographicMaster.geogLevelType).display)=='pincode' && SMGeographicMaster.parentGeogLevelCode=='".concat(val, "' && SMGeographicMaster.activestatus == true && SMGeographicMaster.active == true"),
      return_fields: "{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode}"
    };
  },
  orgContactDetailMode: function orgContactDetailMode() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='CONTACTSYSTEM'",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})"
    };
  },
  orgContactDetailCode: function orgContactDetailCode() {
    return {
      db_name: dbName,
      entity: "SMGeographicMaster",
      sort: "SMGeographicMaster.geogLevelName",
      filter: "Lower(DOCUMENT(SMGeographicMaster.geogLevelType).display)=='country' && SMGeographicMaster.activestatus == true && SMGeographicMaster.active == true",
      return_fields: "{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode,GeoLocationISDCode:SMGeographicMaster.GeoLocationISDCode}"
    };
  },
  orgContactDetailUse: function orgContactDetailUse() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='USE'",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})"
    };
  },
  orgContactDetailPriority: function orgContactDetailPriority() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='PRIORITY'",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})"
    };
  },
  orgNamePrefix: function orgNamePrefix() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='NAMEPREFIX' AND CodeableConceptMaster.activestatus==true",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN TO_ARRAY(CodeableConceptMaster.coding) RETURN DOCUMENT(cod))})"
    };
  },
  orgNameSuffix: function orgNameSuffix() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='NAMESUFFIX' AND CodeableConceptMaster.activestatus==true",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN TO_ARRAY(CodeableConceptMaster.coding) RETURN DOCUMENT(cod))})"
    };
  },
  positionDesi: function positionDesi() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='DESIGNATION' && CodeableConceptMaster.activestatus==true",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})"
    };
  },
  SpecialtyDrop: function SpecialtyDrop() {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      sort: "document(CodeableConceptMaster.coding[0]).display",
      filter: "CodeableConceptMaster.Type=='SPECIALTY' && CodeableConceptMaster.activestatus==true",
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})"
    };
  },
  orgdateformat: function orgdateformat() {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='ORGDATEFORMAT' && CodingMaster.activestatus==true && CodingMaster.status == true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','Type','status','activestatus','shortdesc','display','code')",
      sort: "CodingMaster.shortdesc"
    };
  },
  orgtimeformat: function orgtimeformat() {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='ORGTIMEFORMAT' && CodingMaster.activestatus==true && CodingMaster.status == true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','Type','status','activestatus','shortdesc','display','code')",
      sort: "CodingMaster.shortdesc"
    };
  },
  orgdatetimeformat: function orgdatetimeformat() {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='ORGDATETIMEFORMAT' && CodingMaster.activestatus==true && CodingMaster.status == true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','Type','status','activestatus','shortdesc','display','code')",
      sort: "CodingMaster.shortdesc"
    };
  }
};

var contactConstruct = function contactConstruct(data) {
  var contact_arr = [];

  if (data.length > 0) {
    data.map(function (val_) {
      return contact_arr.push(_defineProperty({}, val_.system, val_.value)); // if(val_.system === "Phone"){
      // 	contact_arr.push({
      // 		phone : val_.value
      // 	})
      // } else if(val_.system === "Fax"){
      // 	contact_arr.push({
      // 		fax : val_.value
      // 	})
      // } else if(val_.system === "Email"){
      // 	contact_arr.push({
      // 		email : val_.value
      // 	})
      // } else if(val_.system === "Mobile"){
      // 	contact_arr.push({
      // 		mobile : val_.value
      // 	})
      // }
    });
  }

  return contact_arr;
}; //ADDRESS CONSTRUCTION FOR TREE DETAILS


var getpersondetails = function getpersondetails(contactlist) {
  var dataList = [];

  if ((contactlist === null || contactlist === void 0 ? void 0 : contactlist.length) > 0) {
    contactlist === null || contactlist === void 0 ? void 0 : contactlist.map(function (val) {
      var _val$name, _val$name$, _val$name2, _val$name2$, _val$name3, _val$name3$, _val$name4, _val$name4$, _val$designation$disp, _val$designation, _val$telecom$0$system, _val$telecom, _val$telecom$, _val$telecom$$system, _val$telecom2, _val$telecom2$, _val$telecom$0$valuep, _val$telecom3, _val$telecom3$, _val$telecom3$$valuep, _val$telecom4, _val$telecom4$;

      var lists = {
        name: val !== null && val !== void 0 && (_val$name = val.name) !== null && _val$name !== void 0 && (_val$name$ = _val$name[0]) !== null && _val$name$ !== void 0 && _val$name$.text ? (val === null || val === void 0 ? void 0 : (_val$name2 = val.name) === null || _val$name2 === void 0 ? void 0 : (_val$name2$ = _val$name2[0]) === null || _val$name2$ === void 0 ? void 0 : _val$name2$.text) + " " + (val === null || val === void 0 ? void 0 : (_val$name3 = val.name) === null || _val$name3 === void 0 ? void 0 : (_val$name3$ = _val$name3[0]) === null || _val$name3$ === void 0 ? void 0 : _val$name3$.family) + " " + (val === null || val === void 0 ? void 0 : (_val$name4 = val.name) === null || _val$name4 === void 0 ? void 0 : (_val$name4$ = _val$name4[0]) === null || _val$name4$ === void 0 ? void 0 : _val$name4$.given) : "",
        designation: (_val$designation$disp = val === null || val === void 0 ? void 0 : (_val$designation = val.designation) === null || _val$designation === void 0 ? void 0 : _val$designation.display) !== null && _val$designation$disp !== void 0 ? _val$designation$disp : "",
        contact_type: (_val$telecom$0$system = val === null || val === void 0 ? void 0 : (_val$telecom = val.telecom) === null || _val$telecom === void 0 ? void 0 : (_val$telecom$ = _val$telecom[0]) === null || _val$telecom$ === void 0 ? void 0 : (_val$telecom$$system = _val$telecom$.system) === null || _val$telecom$$system === void 0 ? void 0 : _val$telecom$$system.display) !== null && _val$telecom$0$system !== void 0 ? _val$telecom$0$system : "",
        contact: val !== null && val !== void 0 && (_val$telecom2 = val.telecom) !== null && _val$telecom2 !== void 0 && (_val$telecom2$ = _val$telecom2[0]) !== null && _val$telecom2$ !== void 0 && _val$telecom2$.value ? ((_val$telecom$0$valuep = val === null || val === void 0 ? void 0 : (_val$telecom3 = val.telecom) === null || _val$telecom3 === void 0 ? void 0 : (_val$telecom3$ = _val$telecom3[0]) === null || _val$telecom3$ === void 0 ? void 0 : (_val$telecom3$$valuep = _val$telecom3$.valueprefix) === null || _val$telecom3$$valuep === void 0 ? void 0 : _val$telecom3$$valuep.GeoLocationISDCode) !== null && _val$telecom$0$valuep !== void 0 ? _val$telecom$0$valuep : "") + " " + (val === null || val === void 0 ? void 0 : (_val$telecom4 = val.telecom) === null || _val$telecom4 === void 0 ? void 0 : (_val$telecom4$ = _val$telecom4[0]) === null || _val$telecom4$ === void 0 ? void 0 : _val$telecom4$.value) : ""
      };
      dataList.push(lists);
    });
  }

  return dataList;
};

var ReadTreeDetailJson = function ReadTreeDetailJson(data, parentOrgName) {
  var specialtyDetailsarr = data === null || data === void 0 ? void 0 : data.specialtyDetails.map(function (val, i) {
    var _val$specialty;

    // specialtyDetailsarr
    return {
      effFrom: moment(moment.unix(val.effFrom)._d).format("DD-MM-YYYY"),
      effTo: moment(moment.unix(val.effTo)._d).format("DD-MM-YYYY"),
      specialty: val === null || val === void 0 ? void 0 : (_val$specialty = val.specialty) === null || _val$specialty === void 0 ? void 0 : _val$specialty.display
    };
  });
  var obj = {};

  if (data) {
    var _data$name, _data$entitycode, _data$ParentOrgID, _data$levelofcareid$d, _data$levelofcareid, _data$levelofcareid$l, _data$levelofcareid2, _ref2, _data$address, _data$address$, _data$address2, _data$address2$, _data$address2$$city, _data$address3, _data$address3$, _data$address3$$distr, _data$address4, _data$address4$, _data$address4$$state, _data$address5, _data$address5$, _data$address5$$posta, _data$address6, _data$address6$, _data$address6$$count, _data$contact$, _data$contact$$name$, _data$contact$$name$$, _data$contact$2, _data$contact$2$name$, _data$contact$3, _data$contact$3$name$, _data$contact$4, _data$contact$4$name$, _data$contact$5, _data$contact$5$name$, _data$contact$5$name$2, _data$contact$0$desig, _data$contact, _data$contact$6, _data$contact$6$desig, _data$logo$, _getpersondetails, _data$contact2, _data$isExternal, _data$OrgType$0$code, _data$OrgType, _data$OrgType$;

    obj = {
      entityName: (_data$name = data === null || data === void 0 ? void 0 : data.name) !== null && _data$name !== void 0 ? _data$name : "",
      entityCode: (_data$entitycode = data === null || data === void 0 ? void 0 : data.entitycode) !== null && _data$entitycode !== void 0 ? _data$entitycode : "",
      _key: data === null || data === void 0 ? void 0 : data._key,
      parentEntityId: data === null || data === void 0 ? void 0 : (_data$ParentOrgID = data.ParentOrgID) === null || _data$ParentOrgID === void 0 ? void 0 : _data$ParentOrgID[0],
      parentEntity: parentOrgName !== null && parentOrgName !== void 0 ? parentOrgName : "",
      levelOfCare: (_data$levelofcareid$d = data === null || data === void 0 ? void 0 : (_data$levelofcareid = data.levelofcareid) === null || _data$levelofcareid === void 0 ? void 0 : _data$levelofcareid.description) !== null && _data$levelofcareid$d !== void 0 ? _data$levelofcareid$d : "",
      level: (_data$levelofcareid$l = data === null || data === void 0 ? void 0 : (_data$levelofcareid2 = data.levelofcareid) === null || _data$levelofcareid2 === void 0 ? void 0 : _data$levelofcareid2.levelofcareCode) !== null && _data$levelofcareid$l !== void 0 ? _data$levelofcareid$l : "",
      address: (_ref2 = (data === null || data === void 0 ? void 0 : (_data$address = data.address) === null || _data$address === void 0 ? void 0 : (_data$address$ = _data$address[0]) === null || _data$address$ === void 0 ? void 0 : _data$address$.line) + ", " + (data === null || data === void 0 ? void 0 : (_data$address2 = data.address) === null || _data$address2 === void 0 ? void 0 : (_data$address2$ = _data$address2[0]) === null || _data$address2$ === void 0 ? void 0 : (_data$address2$$city = _data$address2$.city) === null || _data$address2$$city === void 0 ? void 0 : _data$address2$$city.geogLevelName) + ", " + (data === null || data === void 0 ? void 0 : (_data$address3 = data.address) === null || _data$address3 === void 0 ? void 0 : (_data$address3$ = _data$address3[0]) === null || _data$address3$ === void 0 ? void 0 : (_data$address3$$distr = _data$address3$.district) === null || _data$address3$$distr === void 0 ? void 0 : _data$address3$$distr.geogLevelName) + ", " + (data === null || data === void 0 ? void 0 : (_data$address4 = data.address) === null || _data$address4 === void 0 ? void 0 : (_data$address4$ = _data$address4[0]) === null || _data$address4$ === void 0 ? void 0 : (_data$address4$$state = _data$address4$.state) === null || _data$address4$$state === void 0 ? void 0 : _data$address4$$state.geogLevelName) + ", " + (data === null || data === void 0 ? void 0 : (_data$address5 = data.address) === null || _data$address5 === void 0 ? void 0 : (_data$address5$ = _data$address5[0]) === null || _data$address5$ === void 0 ? void 0 : (_data$address5$$posta = _data$address5$.postalCode) === null || _data$address5$$posta === void 0 ? void 0 : _data$address5$$posta.geogLevelName) + ", " + (data === null || data === void 0 ? void 0 : (_data$address6 = data.address) === null || _data$address6 === void 0 ? void 0 : (_data$address6$ = _data$address6[0]) === null || _data$address6$ === void 0 ? void 0 : (_data$address6$$count = _data$address6$.country) === null || _data$address6$$count === void 0 ? void 0 : _data$address6$$count.geogLevelName)) !== null && _ref2 !== void 0 ? _ref2 : "",
      contactPersonName: (data === null || data === void 0 ? void 0 : (_data$contact$ = data.contact[0]) === null || _data$contact$ === void 0 ? void 0 : (_data$contact$$name$ = _data$contact$.name[0]) === null || _data$contact$$name$ === void 0 ? void 0 : (_data$contact$$name$$ = _data$contact$$name$.prefix) === null || _data$contact$$name$$ === void 0 ? void 0 : _data$contact$$name$$.display) + " " + (data === null || data === void 0 ? void 0 : (_data$contact$2 = data.contact[0]) === null || _data$contact$2 === void 0 ? void 0 : (_data$contact$2$name$ = _data$contact$2.name[0]) === null || _data$contact$2$name$ === void 0 ? void 0 : _data$contact$2$name$.text) + " " + (data === null || data === void 0 ? void 0 : (_data$contact$3 = data.contact[0]) === null || _data$contact$3 === void 0 ? void 0 : (_data$contact$3$name$ = _data$contact$3.name[0]) === null || _data$contact$3$name$ === void 0 ? void 0 : _data$contact$3$name$.family) + " " + (data === null || data === void 0 ? void 0 : (_data$contact$4 = data.contact[0]) === null || _data$contact$4 === void 0 ? void 0 : (_data$contact$4$name$ = _data$contact$4.name[0]) === null || _data$contact$4$name$ === void 0 ? void 0 : _data$contact$4$name$.given) + " " + (data === null || data === void 0 ? void 0 : (_data$contact$5 = data.contact[0]) === null || _data$contact$5 === void 0 ? void 0 : (_data$contact$5$name$ = _data$contact$5.name[0]) === null || _data$contact$5$name$ === void 0 ? void 0 : (_data$contact$5$name$2 = _data$contact$5$name$.suffix) === null || _data$contact$5$name$2 === void 0 ? void 0 : _data$contact$5$name$2.display) + "",
      designation: (_data$contact$0$desig = data === null || data === void 0 ? void 0 : (_data$contact = data.contact) === null || _data$contact === void 0 ? void 0 : (_data$contact$6 = _data$contact[0]) === null || _data$contact$6 === void 0 ? void 0 : (_data$contact$6$desig = _data$contact$6.designation) === null || _data$contact$6$desig === void 0 ? void 0 : _data$contact$6$desig.description) !== null && _data$contact$0$desig !== void 0 ? _data$contact$0$desig : "",
      contactData: contactConstruct(data === null || data === void 0 ? void 0 : data.telecom),
      status: data === null || data === void 0 ? void 0 : data.active,
      log: data === null || data === void 0 ? void 0 : (_data$logo$ = data.logo[0]) === null || _data$logo$ === void 0 ? void 0 : _data$logo$.fileid,
      specialtyDetails: specialtyDetailsarr,
      contact_person_name: (_getpersondetails = getpersondetails((data === null || data === void 0 ? void 0 : (_data$contact2 = data.contact) === null || _data$contact2 === void 0 ? void 0 : _data$contact2.length) > 0 ? data === null || data === void 0 ? void 0 : data.contact : null)) !== null && _getpersondetails !== void 0 ? _getpersondetails : null,
      external: (_data$isExternal = data === null || data === void 0 ? void 0 : data.isExternal) !== null && _data$isExternal !== void 0 ? _data$isExternal : false,
      orgEntityCode: (_data$OrgType$0$code = data === null || data === void 0 ? void 0 : (_data$OrgType = data.OrgType) === null || _data$OrgType === void 0 ? void 0 : (_data$OrgType$ = _data$OrgType[0]) === null || _data$OrgType$ === void 0 ? void 0 : _data$OrgType$.code) !== null && _data$OrgType$0$code !== void 0 ? _data$OrgType$0$code : "",
      orgdateformat: data !== null && data !== void 0 && data.orgdateformat ? data === null || data === void 0 ? void 0 : data.orgdateformat : {},
      orgdatetimeformat: data !== null && data !== void 0 && data.orgdatetimeformat ? data === null || data === void 0 ? void 0 : data.orgdatetimeformat : {},
      orgtimeformat: data !== null && data !== void 0 && data.orgtimeformat ? data === null || data === void 0 ? void 0 : data.orgtimeformat : {}
    };
  }

  return obj;
};

var CreateUser = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(userNumber) {
    var myHeaders, raw, requestOptions;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/json");
            raw = JSON.stringify({
              email: userNumber,
              firstName: userNumber,
              lastName: "ipmo",
              realmType: "IPMO"
            });
            requestOptions = {
              method: "POST",
              headers: myHeaders,
              body: raw,
              redirect: "follow"
            };
            _context.next = 7;
            return fetch("https://idmservices.dev.ainqaplatform.in/create_keycloack_user", requestOptions).then(function (response) {
              return response.text();
            }).then(function (result) {
              return console.log(result);
            })["catch"](function (error) {
              return console.log("error", error);
            });

          case 7:
            _context.next = 12;
            break;

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](0);
            console.log(_context.t0);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 9]]);
  }));

  return function CreateUser(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _extraReducers$8;
var ORGANIZATION_TREE_READ = createAsyncThunk("organizationSlice/organizationTreeList", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  var payload,
      _ref2,
      rejectWithValue,
      type,
      data,
      _args = arguments;

  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          payload = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          _ref2 = _args.length > 1 ? _args[1] : undefined, rejectWithValue = _ref2.rejectWithValue;
          _context.prev = 2;
          type = payload;
          _context.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.getTreeStuct(type))
          }, __readDocumentUrl__);

        case 6:
          data = _context.sent;
          return _context.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data.result
          }));

        case 10:
          _context.prev = 10;
          _context.t0 = _context["catch"](2);
          return _context.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context.t0.message
          })));

        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[2, 10]]);
})));
var ORGANIZATION_ENTITY_TYPE = createAsyncThunk("organizationSlice/organizationEntityType", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
  var payload,
      _ref4,
      rejectWithValue,
      data,
      result,
      _args2 = arguments;

  return _regeneratorRuntime().wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          payload = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
          _ref4 = _args2.length > 1 ? _args2[1] : undefined, rejectWithValue = _ref4.rejectWithValue;
          _context2.prev = 2;
          payload.type;
          _context2.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.entityType())
          }, __readDocumentUrl__);

        case 6:
          data = _context2.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding$, _val$coding$2;

            if (val !== null && val !== void 0 && (_val$coding$ = val.coding[0]) !== null && _val$coding$ !== void 0 && _val$coding$.display && val !== null && val !== void 0 && (_val$coding$2 = val.coding[0]) !== null && _val$coding$2 !== void 0 && _val$coding$2._id) {
              var _val$coding$3, _val$coding, _val$coding$4;

              result.push(_objectSpread2({
                title: val === null || val === void 0 ? void 0 : (_val$coding$3 = val.coding[0]) === null || _val$coding$3 === void 0 ? void 0 : _val$coding$3.display,
                value: val === null || val === void 0 ? void 0 : val.coding[0]._id,
                code: val === null || val === void 0 ? void 0 : (_val$coding = val.coding) === null || _val$coding === void 0 ? void 0 : (_val$coding$4 = _val$coding[0]) === null || _val$coding$4 === void 0 ? void 0 : _val$coding$4.code
              }, val));
            }
          });
          return _context2.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context2.prev = 12;
          _context2.t0 = _context2["catch"](2);
          return _context2.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context2.t0.message
          })));

        case 15:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, null, [[2, 12]]);
})));
var ORGANIZATION_GET_PARENT_ENTITY = createAsyncThunk("organizationSlice/orgParEntity", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
  var payload,
      _ref6,
      rejectWithValue,
      type,
      data,
      result,
      _args3 = arguments;

  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          payload = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
          _ref6 = _args3.length > 1 ? _args3[1] : undefined, rejectWithValue = _ref6.rejectWithValue;
          _context3.prev = 2;
          type = payload;
          _context3.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.getParentEntity(type))
          }, __readDocumentUrl__);

        case 6:
          data = _context3.sent;
          result = [];
          data.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val.name && val !== null && val !== void 0 && val._id) {
              result.push({
                title: val === null || val === void 0 ? void 0 : val.name,
                value: val === null || val === void 0 ? void 0 : val.id
              });
            }
          });
          return _context3.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context3.prev = 12;
          _context3.t0 = _context3["catch"](2);
          return _context3.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context3.t0.message
          })));

        case 15:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, null, [[2, 12]]);
})));
var ORGANIZATION_GET_LEVEL_CARE = createAsyncThunk("organizationSlice/orgLevelCare", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
  var payload,
      _ref8,
      rejectWithValue,
      data,
      result,
      _args4 = arguments;

  return _regeneratorRuntime().wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          payload = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
          _ref8 = _args4.length > 1 ? _args4[1] : undefined, rejectWithValue = _ref8.rejectWithValue;
          _context4.prev = 2;
          payload.type;
          _context4.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.getLevelOfCare())
          }, __readDocumentUrl__);

        case 6:
          data = _context4.sent;
          result = [];
          data.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val._id) {
              result.push({
                title: val === null || val === void 0 ? void 0 : val.description,
                value: val === null || val === void 0 ? void 0 : val._id
              });
            }
          });
          return _context4.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context4.prev = 12;
          _context4.t0 = _context4["catch"](2);
          return _context4.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context4.t0.message
          })));

        case 15:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4, null, [[2, 12]]);
})));
var ORGANIZATION_GET_USE_IDENTIFICATION = createAsyncThunk("organizationSlice/orgUseIdenifi", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
  var payload,
      _ref10,
      rejectWithValue,
      data,
      result,
      _args5 = arguments;

  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          payload = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
          _ref10 = _args5.length > 1 ? _args5[1] : undefined, rejectWithValue = _ref10.rejectWithValue;
          _context5.prev = 2;
          payload.type;
          _context5.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgUseIdenifi())
          }, __readDocumentUrl__);

        case 6:
          data = _context5.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding$5, _val$coding$6;

            if (val !== null && val !== void 0 && (_val$coding$5 = val.coding[0]) !== null && _val$coding$5 !== void 0 && _val$coding$5.display && val !== null && val !== void 0 && (_val$coding$6 = val.coding[0]) !== null && _val$coding$6 !== void 0 && _val$coding$6._id) {
              var _val$coding$7;

              result.push({
                title: val === null || val === void 0 ? void 0 : (_val$coding$7 = val.coding[0]) === null || _val$coding$7 === void 0 ? void 0 : _val$coding$7.display,
                value: val === null || val === void 0 ? void 0 : val.coding[0]._id
              });
            }
          });
          return _context5.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context5.prev = 12;
          _context5.t0 = _context5["catch"](2);
          return _context5.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context5.t0.message
          })));

        case 15:
        case "end":
          return _context5.stop();
      }
    }
  }, _callee5, null, [[2, 12]]);
})));
var ORGANIZATION_GET_IDTYPE_IDENTIF = createAsyncThunk("organizationSlice/orgIdTypeIdenifi", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
  var payload,
      _ref12,
      rejectWithValue,
      data,
      result,
      _args6 = arguments;

  return _regeneratorRuntime().wrap(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          payload = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
          _ref12 = _args6.length > 1 ? _args6[1] : undefined, rejectWithValue = _ref12.rejectWithValue;
          _context6.prev = 2;
          payload.type;
          _context6.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgIdTypeIdenifi())
          }, __readDocumentUrl__);

        case 6:
          data = _context6.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding$8, _val$coding$9;

            if (val !== null && val !== void 0 && (_val$coding$8 = val.coding[0]) !== null && _val$coding$8 !== void 0 && _val$coding$8.display && val !== null && val !== void 0 && (_val$coding$9 = val.coding[0]) !== null && _val$coding$9 !== void 0 && _val$coding$9._id) {
              var _val$coding$10;

              result.push({
                title: val === null || val === void 0 ? void 0 : (_val$coding$10 = val.coding[0]) === null || _val$coding$10 === void 0 ? void 0 : _val$coding$10.display,
                value: val === null || val === void 0 ? void 0 : val.coding[0]._id
              });
            }
          });
          return _context6.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context6.prev = 12;
          _context6.t0 = _context6["catch"](2);
          return _context6.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context6.t0.message
          })));

        case 15:
        case "end":
          return _context6.stop();
      }
    }
  }, _callee6, null, [[2, 12]]);
})));
var ORGANIZATION_GET_ALIAS_TYPE = createAsyncThunk("organizationSlice/aliastype", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
  var payload,
      _ref14,
      rejectWithValue,
      data,
      result,
      _args7 = arguments;

  return _regeneratorRuntime().wrap(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          payload = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
          _ref14 = _args7.length > 1 ? _args7[1] : undefined, rejectWithValue = _ref14.rejectWithValue;
          _context7.prev = 2;
          payload.type;
          _context7.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.aliastype())
          }, __readDocumentUrl__);

        case 6:
          data = _context7.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding$11, _val$coding$12;

            if (val !== null && val !== void 0 && (_val$coding$11 = val.coding[0]) !== null && _val$coding$11 !== void 0 && _val$coding$11.display && val !== null && val !== void 0 && (_val$coding$12 = val.coding[0]) !== null && _val$coding$12 !== void 0 && _val$coding$12._id) {
              var _val$coding$13;

              result.push({
                title: val === null || val === void 0 ? void 0 : (_val$coding$13 = val.coding[0]) === null || _val$coding$13 === void 0 ? void 0 : _val$coding$13.display,
                value: val === null || val === void 0 ? void 0 : val.coding[0]._id
              });
            }
          });
          return _context7.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context7.prev = 12;
          _context7.t0 = _context7["catch"](2);
          return _context7.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context7.t0.message
          })));

        case 15:
        case "end":
          return _context7.stop();
      }
    }
  }, _callee7, null, [[2, 12]]);
})));
var ORGANIZATION_READ_STATUS_UPSERT = createAsyncThunk("organizationSlice/organizationReadStatusUpsert", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
  var payload,
      _ref16,
      rejectWithValue,
      _key,
      status,
      data,
      _args8 = arguments;

  return _regeneratorRuntime().wrap(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          payload = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
          _ref16 = _args8.length > 1 ? _args8[1] : undefined, rejectWithValue = _ref16.rejectWithValue;
          _context8.prev = 2;
          _key = payload._key, status = payload.status;
          _context8.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.upsertSatus(_key, status))
          }, __uspsertUrl__);

        case 6:
          data = _context8.sent;
          data === null || data === void 0 ? void 0 : data.code;
          return _context8.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 11:
          _context8.prev = 11;
          _context8.t0 = _context8["catch"](2);
          return _context8.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context8.t0.message
          })));

        case 14:
        case "end":
          return _context8.stop();
      }
    }
  }, _callee8, null, [[2, 11]]);
})));
var ORGANIZATION_READ_DETAILS = createAsyncThunk("organizationSlice/organizationReadDetails", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
  var payload,
      _ref18,
      rejectWithValue,
      _data$result,
      _data$result$,
      _data$result$$ParentO,
      _data$result2,
      _parentOrgName$result,
      _parentOrgName$result2,
      _key,
      data,
      parentOrgId,
      parentOrgName,
      getJson,
      _args9 = arguments;

  return _regeneratorRuntime().wrap(function _callee9$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          payload = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};
          _ref18 = _args9.length > 1 ? _args9[1] : undefined, rejectWithValue = _ref18.rejectWithValue;
          _context9.prev = 2;
          _key = payload._key;
          _context9.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.getTreeDetails(_key))
          }, __readDocumentUrl__);

        case 6:
          data = _context9.sent;
          parentOrgId = data === null || data === void 0 ? void 0 : (_data$result = data.result) === null || _data$result === void 0 ? void 0 : (_data$result$ = _data$result[0]) === null || _data$result$ === void 0 ? void 0 : (_data$result$$ParentO = _data$result$.ParentOrgID) === null || _data$result$$ParentO === void 0 ? void 0 : _data$result$$ParentO[0];
          parentOrgName = 0;

          if (!parentOrgId) {
            _context9.next = 13;
            break;
          }

          _context9.next = 12;
          return fetchData({
            body: JSON.stringify(queries$7.getParentOrgNameById(parentOrgId))
          }, __readDocumentUrl__);

        case 12:
          parentOrgName = _context9.sent;

        case 13:
          getJson = ReadTreeDetailJson((_data$result2 = data.result) === null || _data$result2 === void 0 ? void 0 : _data$result2[0], (_parentOrgName$result = parentOrgName.result) === null || _parentOrgName$result === void 0 ? void 0 : (_parentOrgName$result2 = _parentOrgName$result[0]) === null || _parentOrgName$result2 === void 0 ? void 0 : _parentOrgName$result2.name);
          return _context9.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: getJson
          }));

        case 17:
          _context9.prev = 17;
          _context9.t0 = _context9["catch"](2);
          return _context9.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context9.t0.message
          })));

        case 20:
        case "end":
          return _context9.stop();
      }
    }
  }, _callee9, null, [[2, 17]]);
})));
var ORGANIZATION_GET_ADD_TYPE = createAsyncThunk("organizationSlice/orgAddType", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
  var payload,
      _ref20,
      rejectWithValue,
      data,
      result,
      _args10 = arguments;

  return _regeneratorRuntime().wrap(function _callee10$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          payload = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};
          _ref20 = _args10.length > 1 ? _args10[1] : undefined, rejectWithValue = _ref20.rejectWithValue;
          _context10.prev = 2;
          payload.type;
          _context10.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgAddType())
          }, __readDocumentUrl__);

        case 6:
          data = _context10.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding$14, _val$coding$15;

            if (val !== null && val !== void 0 && (_val$coding$14 = val.coding[0]) !== null && _val$coding$14 !== void 0 && _val$coding$14.display && val !== null && val !== void 0 && (_val$coding$15 = val.coding[0]) !== null && _val$coding$15 !== void 0 && _val$coding$15._id) {
              var _val$coding$16;

              result.push({
                title: val === null || val === void 0 ? void 0 : (_val$coding$16 = val.coding[0]) === null || _val$coding$16 === void 0 ? void 0 : _val$coding$16.display,
                value: val === null || val === void 0 ? void 0 : val.coding[0]._id
              });
            }
          });
          return _context10.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context10.prev = 12;
          _context10.t0 = _context10["catch"](2);
          return _context10.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context10.t0.message
          })));

        case 15:
        case "end":
          return _context10.stop();
      }
    }
  }, _callee10, null, [[2, 12]]);
})));
var ORGANIZATION_GET_ADD_USE = createAsyncThunk("organizationSlice/orgAddUSE", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
  var payload,
      _ref22,
      rejectWithValue,
      data,
      result,
      _args11 = arguments;

  return _regeneratorRuntime().wrap(function _callee11$(_context11) {
    while (1) {
      switch (_context11.prev = _context11.next) {
        case 0:
          payload = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};
          _ref22 = _args11.length > 1 ? _args11[1] : undefined, rejectWithValue = _ref22.rejectWithValue;
          _context11.prev = 2;
          payload.type;
          _context11.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgAddUSE())
          }, __readDocumentUrl__);

        case 6:
          data = _context11.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding$17, _val$coding$18;

            if (val !== null && val !== void 0 && (_val$coding$17 = val.coding[0]) !== null && _val$coding$17 !== void 0 && _val$coding$17.display && val !== null && val !== void 0 && (_val$coding$18 = val.coding[0]) !== null && _val$coding$18 !== void 0 && _val$coding$18._id) {
              var _val$coding$19;

              result.push({
                title: val === null || val === void 0 ? void 0 : (_val$coding$19 = val.coding[0]) === null || _val$coding$19 === void 0 ? void 0 : _val$coding$19.display,
                value: val === null || val === void 0 ? void 0 : val.coding[0]._id
              });
            }
          });
          return _context11.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context11.prev = 12;
          _context11.t0 = _context11["catch"](2);
          return _context11.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context11.t0.message
          })));

        case 15:
        case "end":
          return _context11.stop();
      }
    }
  }, _callee11, null, [[2, 12]]);
})));
var ORGANIZATION_GET_ADD_City = createAsyncThunk("organizationSlice/orgAddCity", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
  var payload,
      _ref24,
      rejectWithValue,
      data,
      result,
      _args12 = arguments;

  return _regeneratorRuntime().wrap(function _callee12$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          payload = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};
          _ref24 = _args12.length > 1 ? _args12[1] : undefined, rejectWithValue = _ref24.rejectWithValue;
          _context12.prev = 2;
          payload.type;
          _context12.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgAddCity())
          }, __readDocumentUrl__);

        case 6:
          data = _context12.sent;
          result = [];
          data.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val.parentGeogLevelCode && val !== null && val !== void 0 && val.geogLevelName) {
              result.push({
                id: val === null || val === void 0 ? void 0 : val.parentGeogLevelCode,
                title: val === null || val === void 0 ? void 0 : val.geogLevelName,
                value: val._id,
                code: val === null || val === void 0 ? void 0 : val.geogLevelCode
              });
            }
          });
          return _context12.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context12.prev = 12;
          _context12.t0 = _context12["catch"](2);
          return _context12.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context12.t0.message
          })));

        case 15:
        case "end":
          return _context12.stop();
      }
    }
  }, _callee12, null, [[2, 12]]);
})));
var ORGANIZATION_GET_ADD_DISTRICT = createAsyncThunk("organizationSlice/orgAddDISTRICT", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
  var payload,
      _ref26,
      rejectWithValue,
      val,
      data,
      result,
      _args13 = arguments;

  return _regeneratorRuntime().wrap(function _callee13$(_context13) {
    while (1) {
      switch (_context13.prev = _context13.next) {
        case 0:
          payload = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};
          _ref26 = _args13.length > 1 ? _args13[1] : undefined, rejectWithValue = _ref26.rejectWithValue;
          _context13.prev = 2;
          val = payload.val;
          _context13.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgAddDISTRICT(val))
          }, __readDocumentUrl__);

        case 6:
          data = _context13.sent;
          result = [];
          data.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val.parentGeogLevelCode && val !== null && val !== void 0 && val.geogLevelName) {
              result.push({
                id: val === null || val === void 0 ? void 0 : val.parentGeogLevelCode,
                title: val === null || val === void 0 ? void 0 : val.geogLevelName,
                value: val._id
              });
            }
          });
          return _context13.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context13.prev = 12;
          _context13.t0 = _context13["catch"](2);
          return _context13.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context13.t0.message
          })));

        case 15:
        case "end":
          return _context13.stop();
      }
    }
  }, _callee13, null, [[2, 12]]);
})));
var ORGANIZATION_GET_AddSTATE = createAsyncThunk("organizationSlice/orgAddSTATE", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
  var payload,
      _ref28,
      rejectWithValue,
      val,
      data,
      result,
      _args14 = arguments;

  return _regeneratorRuntime().wrap(function _callee14$(_context14) {
    while (1) {
      switch (_context14.prev = _context14.next) {
        case 0:
          payload = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};
          _ref28 = _args14.length > 1 ? _args14[1] : undefined, rejectWithValue = _ref28.rejectWithValue;
          _context14.prev = 2;
          val = payload.val;
          _context14.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgAddSTATE(val))
          }, __readDocumentUrl__);

        case 6:
          data = _context14.sent;
          result = [];
          data.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val.parentGeogLevelCode && val !== null && val !== void 0 && val.geogLevelName) {
              result.push({
                id: val === null || val === void 0 ? void 0 : val.parentGeogLevelCode,
                title: val === null || val === void 0 ? void 0 : val.geogLevelName,
                value: val._id
              });
            }
          });
          return _context14.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context14.prev = 12;
          _context14.t0 = _context14["catch"](2);
          return _context14.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context14.t0.message
          })));

        case 15:
        case "end":
          return _context14.stop();
      }
    }
  }, _callee14, null, [[2, 12]]);
})));
var ORGANIZATION_GET_COUNTRY = createAsyncThunk("organizationSlice/orgAddCOUNTRY", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
  var payload,
      _ref30,
      rejectWithValue,
      val,
      data,
      result,
      _args15 = arguments;

  return _regeneratorRuntime().wrap(function _callee15$(_context15) {
    while (1) {
      switch (_context15.prev = _context15.next) {
        case 0:
          payload = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {};
          _ref30 = _args15.length > 1 ? _args15[1] : undefined, rejectWithValue = _ref30.rejectWithValue;
          _context15.prev = 2;
          val = payload.val;
          _context15.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgAddCOUNTRY(val))
          }, __readDocumentUrl__);

        case 6:
          data = _context15.sent;
          result = [];
          data.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val.geogLevelName) {
              result.push({
                id: val === null || val === void 0 ? void 0 : val.parentGeogLevelCode,
                title: val === null || val === void 0 ? void 0 : val.geogLevelName,
                value: val._id
              });
            }
          });
          return _context15.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context15.prev = 12;
          _context15.t0 = _context15["catch"](2);
          return _context15.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context15.t0.message
          })));

        case 15:
        case "end":
          return _context15.stop();
      }
    }
  }, _callee15, null, [[2, 12]]);
})));
var ORGANIZATION_GET_PINCODE = createAsyncThunk("organizationSlice/orgAddPINCODE", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
  var payload,
      _ref32,
      rejectWithValue,
      val,
      data,
      result,
      _args16 = arguments;

  return _regeneratorRuntime().wrap(function _callee16$(_context16) {
    while (1) {
      switch (_context16.prev = _context16.next) {
        case 0:
          payload = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {};
          _ref32 = _args16.length > 1 ? _args16[1] : undefined, rejectWithValue = _ref32.rejectWithValue;
          _context16.prev = 2;
          val = payload.val;
          _context16.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgAddPINCODE(val))
          }, __readDocumentUrl__);

        case 6:
          data = _context16.sent;
          result = [];
          data.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val.parentGeogLevelCode && val !== null && val !== void 0 && val.geogLevelName) {
              result.push({
                id: val === null || val === void 0 ? void 0 : val.parentGeogLevelCode,
                title: val === null || val === void 0 ? void 0 : val.geogLevelName,
                value: val._id
              });
            }
          });
          return _context16.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context16.prev = 12;
          _context16.t0 = _context16["catch"](2);
          return _context16.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context16.t0.message
          })));

        case 15:
        case "end":
          return _context16.stop();
      }
    }
  }, _callee16, null, [[2, 12]]);
})));
var ORGANIZATION_GET_CONTACTDETAILMODE = createAsyncThunk("organizationSlice/orgContactDetailMode", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
  var payload,
      _ref34,
      rejectWithValue,
      data,
      result,
      _args17 = arguments;

  return _regeneratorRuntime().wrap(function _callee17$(_context17) {
    while (1) {
      switch (_context17.prev = _context17.next) {
        case 0:
          payload = _args17.length > 0 && _args17[0] !== undefined ? _args17[0] : {};
          _ref34 = _args17.length > 1 ? _args17[1] : undefined, rejectWithValue = _ref34.rejectWithValue;
          _context17.prev = 2;
          payload.type;
          _context17.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgContactDetailMode())
          }, __readDocumentUrl__);

        case 6:
          data = _context17.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding$20, _val$coding$21;

            if (val !== null && val !== void 0 && (_val$coding$20 = val.coding[0]) !== null && _val$coding$20 !== void 0 && _val$coding$20.display && val !== null && val !== void 0 && (_val$coding$21 = val.coding[0]) !== null && _val$coding$21 !== void 0 && _val$coding$21._id) {
              var _val$coding$22;

              result.push({
                title: val === null || val === void 0 ? void 0 : (_val$coding$22 = val.coding[0]) === null || _val$coding$22 === void 0 ? void 0 : _val$coding$22.display,
                value: val === null || val === void 0 ? void 0 : val.coding[0]._id
              });
            }
          });
          return _context17.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context17.prev = 12;
          _context17.t0 = _context17["catch"](2);
          return _context17.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context17.t0.message
          })));

        case 15:
        case "end":
          return _context17.stop();
      }
    }
  }, _callee17, null, [[2, 12]]);
})));
var ORGANIZATION_GET_CONNTACTDETAILCODE = createAsyncThunk("organizationSlice/orgContactDetailCode", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
  var payload,
      _ref36,
      rejectWithValue,
      val,
      data,
      result,
      _args18 = arguments;

  return _regeneratorRuntime().wrap(function _callee18$(_context18) {
    while (1) {
      switch (_context18.prev = _context18.next) {
        case 0:
          payload = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};
          _ref36 = _args18.length > 1 ? _args18[1] : undefined, rejectWithValue = _ref36.rejectWithValue;
          _context18.prev = 2;
          val = payload.val;
          _context18.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgContactDetailCode(val))
          }, __readDocumentUrl__);

        case 6:
          data = _context18.sent;
          result = [];
          data.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val.GeoLocationISDCode && val !== null && val !== void 0 && val._id) {
              result.push({
                title: val === null || val === void 0 ? void 0 : val.GeoLocationISDCode,
                value: val === null || val === void 0 ? void 0 : val._id
              });
            }
          });
          return _context18.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context18.prev = 12;
          _context18.t0 = _context18["catch"](2);
          return _context18.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context18.t0.message
          })));

        case 15:
        case "end":
          return _context18.stop();
      }
    }
  }, _callee18, null, [[2, 12]]);
})));
var ORGANIZATION_GET_CONTACTDETAILUSE = createAsyncThunk("organizationSlice/orgContactDetailUse", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
  var payload,
      _ref38,
      rejectWithValue,
      data,
      result,
      _args19 = arguments;

  return _regeneratorRuntime().wrap(function _callee19$(_context19) {
    while (1) {
      switch (_context19.prev = _context19.next) {
        case 0:
          payload = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : {};
          _ref38 = _args19.length > 1 ? _args19[1] : undefined, rejectWithValue = _ref38.rejectWithValue;
          _context19.prev = 2;
          payload.type;
          _context19.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgContactDetailUse())
          }, __readDocumentUrl__);

        case 6:
          data = _context19.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding$23, _val$coding$24;

            if (val !== null && val !== void 0 && (_val$coding$23 = val.coding[0]) !== null && _val$coding$23 !== void 0 && _val$coding$23.display && val !== null && val !== void 0 && (_val$coding$24 = val.coding[0]) !== null && _val$coding$24 !== void 0 && _val$coding$24._id) {
              var _val$coding$25;

              result.push({
                title: val === null || val === void 0 ? void 0 : (_val$coding$25 = val.coding[0]) === null || _val$coding$25 === void 0 ? void 0 : _val$coding$25.display,
                value: val === null || val === void 0 ? void 0 : val.coding[0]._id
              });
            }
          });
          return _context19.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context19.prev = 12;
          _context19.t0 = _context19["catch"](2);
          return _context19.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context19.t0.message
          })));

        case 15:
        case "end":
          return _context19.stop();
      }
    }
  }, _callee19, null, [[2, 12]]);
})));
var ORGANIZATION_GET_CONTACTDETAILPRIORITY = createAsyncThunk("organizationSlice/0", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
  var payload,
      _ref40,
      rejectWithValue,
      data,
      result,
      _args20 = arguments;

  return _regeneratorRuntime().wrap(function _callee20$(_context20) {
    while (1) {
      switch (_context20.prev = _context20.next) {
        case 0:
          payload = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : {};
          _ref40 = _args20.length > 1 ? _args20[1] : undefined, rejectWithValue = _ref40.rejectWithValue;
          _context20.prev = 2;
          payload.type;
          _context20.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgContactDetailPriority())
          }, __readDocumentUrl__);

        case 6:
          data = _context20.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding$26, _val$coding$27;

            if (val !== null && val !== void 0 && (_val$coding$26 = val.coding[0]) !== null && _val$coding$26 !== void 0 && _val$coding$26.display && val !== null && val !== void 0 && (_val$coding$27 = val.coding[0]) !== null && _val$coding$27 !== void 0 && _val$coding$27._id) {
              var _val$coding$28;

              result.push({
                title: val === null || val === void 0 ? void 0 : (_val$coding$28 = val.coding[0]) === null || _val$coding$28 === void 0 ? void 0 : _val$coding$28.display,
                value: val === null || val === void 0 ? void 0 : val.coding[0]._id
              });
            }
          });
          return _context20.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context20.prev = 12;
          _context20.t0 = _context20["catch"](2);
          return _context20.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context20.t0.message
          })));

        case 15:
        case "end":
          return _context20.stop();
      }
    }
  }, _callee20, null, [[2, 12]]);
})));
var ORGANIZATION_GET_CONTACT_PREFIX = createAsyncThunk("organizationSlice/orgNamePrefix", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
  var payload,
      _ref42,
      rejectWithValue,
      data,
      result,
      _args21 = arguments;

  return _regeneratorRuntime().wrap(function _callee21$(_context21) {
    while (1) {
      switch (_context21.prev = _context21.next) {
        case 0:
          payload = _args21.length > 0 && _args21[0] !== undefined ? _args21[0] : {};
          _ref42 = _args21.length > 1 ? _args21[1] : undefined, rejectWithValue = _ref42.rejectWithValue;
          _context21.prev = 2;
          payload.type;
          _context21.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgNamePrefix())
          }, __readDocumentUrl__);

        case 6:
          data = _context21.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding$29, _val$coding$30;

            if (val !== null && val !== void 0 && (_val$coding$29 = val.coding[0]) !== null && _val$coding$29 !== void 0 && _val$coding$29.display && val !== null && val !== void 0 && (_val$coding$30 = val.coding[0]) !== null && _val$coding$30 !== void 0 && _val$coding$30._id) {
              var _val$coding$31;

              result.push({
                title: val === null || val === void 0 ? void 0 : (_val$coding$31 = val.coding[0]) === null || _val$coding$31 === void 0 ? void 0 : _val$coding$31.display,
                value: val === null || val === void 0 ? void 0 : val.coding[0]._id
              });
            }
          });
          return _context21.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context21.prev = 12;
          _context21.t0 = _context21["catch"](2);
          return _context21.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context21.t0.message
          })));

        case 15:
        case "end":
          return _context21.stop();
      }
    }
  }, _callee21, null, [[2, 12]]);
})));
var ORGANIZATION_GET_CONTACT_SUFFIX = createAsyncThunk("organizationSlice/orgNameSuffix", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
  var payload,
      _ref44,
      rejectWithValue,
      data,
      result,
      _args22 = arguments;

  return _regeneratorRuntime().wrap(function _callee22$(_context22) {
    while (1) {
      switch (_context22.prev = _context22.next) {
        case 0:
          payload = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : {};
          _ref44 = _args22.length > 1 ? _args22[1] : undefined, rejectWithValue = _ref44.rejectWithValue;
          _context22.prev = 2;
          payload.type;
          _context22.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.orgNameSuffix())
          }, __readDocumentUrl__);

        case 6:
          data = _context22.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding$32, _val$coding$33;

            if (val !== null && val !== void 0 && (_val$coding$32 = val.coding[0]) !== null && _val$coding$32 !== void 0 && _val$coding$32.display && val !== null && val !== void 0 && (_val$coding$33 = val.coding[0]) !== null && _val$coding$33 !== void 0 && _val$coding$33._id) {
              var _val$coding$34;

              result.push({
                title: val === null || val === void 0 ? void 0 : (_val$coding$34 = val.coding[0]) === null || _val$coding$34 === void 0 ? void 0 : _val$coding$34.display,
                value: val === null || val === void 0 ? void 0 : val.coding[0]._id
              });
            }
          });
          return _context22.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context22.prev = 12;
          _context22.t0 = _context22["catch"](2);
          return _context22.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context22.t0.message
          })));

        case 15:
        case "end":
          return _context22.stop();
      }
    }
  }, _callee22, null, [[2, 12]]);
})));
var ORGANIZATION_GET_CONTACT_DESI = createAsyncThunk("organizationSlice/positionDesi", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
  var payload,
      _ref46,
      rejectWithValue,
      data,
      result,
      _args23 = arguments;

  return _regeneratorRuntime().wrap(function _callee23$(_context23) {
    while (1) {
      switch (_context23.prev = _context23.next) {
        case 0:
          payload = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : {};
          _ref46 = _args23.length > 1 ? _args23[1] : undefined, rejectWithValue = _ref46.rejectWithValue;
          _context23.prev = 2;
          payload.type;
          _context23.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.positionDesi())
          }, __readDocumentUrl__);

        case 6:
          data = _context23.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding2, _val$coding2$;

            if (val !== null && val !== void 0 && (_val$coding2 = val.coding) !== null && _val$coding2 !== void 0 && (_val$coding2$ = _val$coding2[0]) !== null && _val$coding2$ !== void 0 && _val$coding2$.display) {
              var _val$coding3, _val$coding3$, _val$coding4, _val$coding4$;

              result.push({
                title: val === null || val === void 0 ? void 0 : (_val$coding3 = val.coding) === null || _val$coding3 === void 0 ? void 0 : (_val$coding3$ = _val$coding3[0]) === null || _val$coding3$ === void 0 ? void 0 : _val$coding3$.display,
                value: val === null || val === void 0 ? void 0 : (_val$coding4 = val.coding) === null || _val$coding4 === void 0 ? void 0 : (_val$coding4$ = _val$coding4[0]) === null || _val$coding4$ === void 0 ? void 0 : _val$coding4$._id
              });
            }
          });
          return _context23.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context23.prev = 12;
          _context23.t0 = _context23["catch"](2);
          return _context23.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context23.t0.message
          })));

        case 15:
        case "end":
          return _context23.stop();
      }
    }
  }, _callee23, null, [[2, 12]]);
})));
var SET_ORGANIZATION = createAsyncThunk("organizationSlice/setOrganization", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
  var payload,
      _ref48,
      rejectWithValue,
      state,
      key,
      queriesjson,
      data,
      _args24 = arguments;

  return _regeneratorRuntime().wrap(function _callee24$(_context24) {
    while (1) {
      switch (_context24.prev = _context24.next) {
        case 0:
          payload = _args24.length > 0 && _args24[0] !== undefined ? _args24[0] : {};
          _ref48 = _args24.length > 1 ? _args24[1] : undefined, rejectWithValue = _ref48.rejectWithValue;
          _context24.prev = 2;
          state = payload.state, key = payload.key;
          queriesjson = generateJson.insert_json(state, key);
          _context24.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __uspsertUrl__);

        case 7:
          data = _context24.sent;
          return _context24.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 12:
          _context24.prev = 12;
          _context24.t0 = _context24["catch"](2);
          return _context24.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context24.t0.message
          })));

        case 15:
        case "end":
          return _context24.stop();
      }
    }
  }, _callee24, null, [[2, 12]]);
})));
var ORG_FROM_GET = createAsyncThunk("organizationSlice/getOrganization", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
  var payload,
      _ref50,
      rejectWithValue,
      key,
      getParentEntityData,
      result,
      data,
      queriesjson,
      _args25 = arguments;

  return _regeneratorRuntime().wrap(function _callee25$(_context25) {
    while (1) {
      switch (_context25.prev = _context25.next) {
        case 0:
          payload = _args25.length > 0 && _args25[0] !== undefined ? _args25[0] : {};
          _ref50 = _args25.length > 1 ? _args25[1] : undefined, rejectWithValue = _ref50.rejectWithValue;
          _context25.prev = 2;
          key = payload.key;
          _context25.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.getParentEntityFull())
          }, __readDocumentUrl__);

        case 6:
          getParentEntityData = _context25.sent;
          result = [];
          getParentEntityData.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val.name && val !== null && val !== void 0 && val._id) {
              result.push({
                title: val === null || val === void 0 ? void 0 : val.name,
                value: val === null || val === void 0 ? void 0 : val.id
              });
            }
          });
          _context25.next = 11;
          return fetchData({
            body: JSON.stringify(queries$7.getTreeDetails(key))
          }, __readDocumentUrl__);

        case 11:
          data = _context25.sent;
          queriesjson = generateReadJson.read_json(data.result[0], result);
          return _context25.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: queriesjson
          }));

        case 16:
          _context25.prev = 16;
          _context25.t0 = _context25["catch"](2);
          return _context25.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context25.t0.message
          })));

        case 19:
        case "end":
          return _context25.stop();
      }
    }
  }, _callee25, null, [[2, 16]]);
})));
var ORGANIZATION_GET_SPECIALTY_DROP = createAsyncThunk("organizationSlice/specialtyDrop", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
  var payload,
      _ref52,
      rejectWithValue,
      data,
      result,
      _args26 = arguments;

  return _regeneratorRuntime().wrap(function _callee26$(_context26) {
    while (1) {
      switch (_context26.prev = _context26.next) {
        case 0:
          payload = _args26.length > 0 && _args26[0] !== undefined ? _args26[0] : {};
          _ref52 = _args26.length > 1 ? _args26[1] : undefined, rejectWithValue = _ref52.rejectWithValue;
          _context26.prev = 2;
          payload.type;
          _context26.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.SpecialtyDrop())
          }, __readDocumentUrl__);

        case 6:
          data = _context26.sent;
          result = [];
          data.result.map(function (val, i) {
            var _val$coding5, _val$coding6, _val$coding6$;

            if (val !== null && val !== void 0 && (_val$coding5 = val.coding) !== null && _val$coding5 !== void 0 && _val$coding5[0] && val !== null && val !== void 0 && (_val$coding6 = val.coding) !== null && _val$coding6 !== void 0 && (_val$coding6$ = _val$coding6[0]) !== null && _val$coding6$ !== void 0 && _val$coding6$._id) {
              var _val$coding7, _val$coding7$, _val$coding8, _val$coding8$, _val$coding9, _val$coding9$, _val$coding10, _val$coding10$, _val$coding11, _val$coding11$;

              result.push({
                label: (val === null || val === void 0 ? void 0 : (_val$coding7 = val.coding) === null || _val$coding7 === void 0 ? void 0 : (_val$coding7$ = _val$coding7[0]) === null || _val$coding7$ === void 0 ? void 0 : _val$coding7$.display) + " (" + (val === null || val === void 0 ? void 0 : (_val$coding8 = val.coding) === null || _val$coding8 === void 0 ? void 0 : (_val$coding8$ = _val$coding8[0]) === null || _val$coding8$ === void 0 ? void 0 : _val$coding8$.code) + ")",
                value: val === null || val === void 0 ? void 0 : (_val$coding9 = val.coding) === null || _val$coding9 === void 0 ? void 0 : (_val$coding9$ = _val$coding9[0]) === null || _val$coding9$ === void 0 ? void 0 : _val$coding9$.code,
                name: val === null || val === void 0 ? void 0 : (_val$coding10 = val.coding) === null || _val$coding10 === void 0 ? void 0 : (_val$coding10$ = _val$coding10[0]) === null || _val$coding10$ === void 0 ? void 0 : _val$coding10$.display,
                id: val === null || val === void 0 ? void 0 : (_val$coding11 = val.coding) === null || _val$coding11 === void 0 ? void 0 : (_val$coding11$ = _val$coding11[0]) === null || _val$coding11$ === void 0 ? void 0 : _val$coding11$._id
              });
            }
          });
          return _context26.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context26.prev = 12;
          _context26.t0 = _context26["catch"](2);
          return _context26.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context26.t0.message
          })));

        case 15:
        case "end":
          return _context26.stop();
      }
    }
  }, _callee26, null, [[2, 12]]);
})));
var ORGANIZATION_GET_DATE_FORMAT = createAsyncThunk("organizationSlice/orgDateFormat", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
  var _ref54,
      rejectWithValue,
      data,
      result,
      _args27 = arguments;

  return _regeneratorRuntime().wrap(function _callee27$(_context27) {
    while (1) {
      switch (_context27.prev = _context27.next) {
        case 0:
          _ref54 = _args27.length > 1 ? _args27[1] : undefined, rejectWithValue = _ref54.rejectWithValue;
          _context27.prev = 2;
          _context27.next = 5;
          return fetchData({
            body: JSON.stringify(queries$7.orgdateformat())
          }, __readDocumentUrl__);

        case 5:
          data = _context27.sent;
          result = [];
          data.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val.display && val !== null && val !== void 0 && val._id) {
              result.push({
                title: val === null || val === void 0 ? void 0 : val.display,
                value: val._id
              });
            }
          });
          return _context27.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 11:
          _context27.prev = 11;
          _context27.t0 = _context27["catch"](2);
          return _context27.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context27.t0.message
          })));

        case 14:
        case "end":
          return _context27.stop();
      }
    }
  }, _callee27, null, [[2, 11]]);
})));
var ORGANIZATION_GET_TIME_FORMAT = createAsyncThunk("organizationSlice/orgTimeFormat", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {
  var _ref56,
      rejectWithValue,
      data,
      result,
      _args28 = arguments;

  return _regeneratorRuntime().wrap(function _callee28$(_context28) {
    while (1) {
      switch (_context28.prev = _context28.next) {
        case 0:
          _ref56 = _args28.length > 1 ? _args28[1] : undefined, rejectWithValue = _ref56.rejectWithValue;
          _context28.prev = 2;
          _context28.next = 5;
          return fetchData({
            body: JSON.stringify(queries$7.orgtimeformat())
          }, __readDocumentUrl__);

        case 5:
          data = _context28.sent;
          result = [];
          data.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val.display && val !== null && val !== void 0 && val._id) {
              result.push({
                title: val === null || val === void 0 ? void 0 : val.display,
                value: val._id
              });
            }
          });
          return _context28.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 11:
          _context28.prev = 11;
          _context28.t0 = _context28["catch"](2);
          return _context28.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context28.t0.message
          })));

        case 14:
        case "end":
          return _context28.stop();
      }
    }
  }, _callee28, null, [[2, 11]]);
})));
var ORGANIZATION_GET_DATE_TIME_FORMAT = createAsyncThunk("organizationSlice/orgDateTimeFormat", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {
  var _ref58,
      rejectWithValue,
      data,
      result,
      _args29 = arguments;

  return _regeneratorRuntime().wrap(function _callee29$(_context29) {
    while (1) {
      switch (_context29.prev = _context29.next) {
        case 0:
          _ref58 = _args29.length > 1 ? _args29[1] : undefined, rejectWithValue = _ref58.rejectWithValue;
          _context29.prev = 2;
          _context29.next = 5;
          return fetchData({
            body: JSON.stringify(queries$7.orgdatetimeformat())
          }, __readDocumentUrl__);

        case 5:
          data = _context29.sent;
          result = [];
          data.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val.display && val !== null && val !== void 0 && val._id) {
              result.push({
                title: val === null || val === void 0 ? void 0 : val.display,
                value: val._id
              });
            }
          });
          return _context29.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 11:
          _context29.prev = 11;
          _context29.t0 = _context29["catch"](2);
          return _context29.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context29.t0.message
          })));

        case 14:
        case "end":
          return _context29.stop();
      }
    }
  }, _callee29, null, [[2, 11]]);
})));
var UPSERT_ORAGANIZATION = createAsyncThunk("organizationSlice/upsertOrganiztion", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {
  var payload,
      _ref60,
      rejectWithValue,
      state,
      key,
      _queriesjson,
      _data,
      _data$Result$,
      _data$Result$$propert,
      _data$Result$$propert2,
      user,
      queriesjson,
      data,
      _args30 = arguments;

  return _regeneratorRuntime().wrap(function _callee30$(_context30) {
    while (1) {
      switch (_context30.prev = _context30.next) {
        case 0:
          payload = _args30.length > 0 && _args30[0] !== undefined ? _args30[0] : {};
          _ref60 = _args30.length > 1 ? _args30[1] : undefined, rejectWithValue = _ref60.rejectWithValue;
          _context30.prev = 2;
          state = payload.state, key = payload.key;

          if (!((state === null || state === void 0 ? void 0 : state.entityType) === "Bed")) {
            _context30.next = 15;
            break;
          }

          _queriesjson = generateJson.IMPOORGJSON(state, key);
          _context30.next = 8;
          return fetchData({
            body: JSON.stringify(_queriesjson)
          }, __uspsertUrl__);

        case 8:
          _data = _context30.sent;

          if (key) {
            _context30.next = 14;
            break;
          }

          user = (_data$Result$ = _data.Result[0]) === null || _data$Result$ === void 0 ? void 0 : (_data$Result$$propert = _data$Result$.properties) === null || _data$Result$$propert === void 0 ? void 0 : (_data$Result$$propert2 = _data$Result$$propert.doc) === null || _data$Result$$propert2 === void 0 ? void 0 : _data$Result$$propert2.BedNumber;
          _context30.next = 14;
          return CreateUser(user);

        case 14:
          return _context30.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: _data
          }));

        case 15:
          queriesjson = generateJson.IMPOORGJSON(state, key);
          _context30.next = 18;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __uspsertUrl__);

        case 18:
          data = _context30.sent;
          return _context30.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 23:
          _context30.prev = 23;
          _context30.t0 = _context30["catch"](2);
          return _context30.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context30.t0.message
          })));

        case 26:
        case "end":
          return _context30.stop();
      }
    }
  }, _callee30, null, [[2, 23]]);
})));
var GET_PARENT_ENTITY = createAsyncThunk("organizationSlice/getParentEntity", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
  var payload,
      _ref62,
      rejectWithValue,
      type,
      data,
      result,
      _args31 = arguments;

  return _regeneratorRuntime().wrap(function _callee31$(_context31) {
    while (1) {
      switch (_context31.prev = _context31.next) {
        case 0:
          payload = _args31.length > 0 && _args31[0] !== undefined ? _args31[0] : {};
          _ref62 = _args31.length > 1 ? _args31[1] : undefined, rejectWithValue = _ref62.rejectWithValue;
          _context31.prev = 2;
          type = payload;
          _context31.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.getParentEntity(type))
          }, __readDocumentUrl__);

        case 6:
          data = _context31.sent;
          result = [];
          data.result.map(function (val, i) {
            if (val !== null && val !== void 0 && val.name && val !== null && val !== void 0 && val.id) {
              result.push({
                title: val === null || val === void 0 ? void 0 : val.name,
                value: val === null || val === void 0 ? void 0 : val.id
              });
            }
          });
          return _context31.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 12:
          _context31.prev = 12;
          _context31.t0 = _context31["catch"](2);
          return _context31.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context31.t0.message
          })));

        case 15:
        case "end":
          return _context31.stop();
      }
    }
  }, _callee31, null, [[2, 12]]);
})));
var GET_ORG_DETAILS = createAsyncThunk("organizationSlice/getOrgDetails", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {
  var payload,
      _ref64,
      rejectWithValue,
      key,
      type,
      data,
      result,
      _args32 = arguments;

  return _regeneratorRuntime().wrap(function _callee32$(_context32) {
    while (1) {
      switch (_context32.prev = _context32.next) {
        case 0:
          payload = _args32.length > 0 && _args32[0] !== undefined ? _args32[0] : {};
          _ref64 = _args32.length > 1 ? _args32[1] : undefined, rejectWithValue = _ref64.rejectWithValue;
          _context32.prev = 2;
          key = payload.key, type = payload.type;
          _context32.next = 6;
          return fetchData({
            body: JSON.stringify(queries$7.getSingleEntity(key, type))
          }, __readDocumentUrl__);

        case 6:
          data = _context32.sent;
          result = data.result;
          return _context32.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: result
          }));

        case 11:
          _context32.prev = 11;
          _context32.t0 = _context32["catch"](2);
          return _context32.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context32.t0.message
          })));

        case 14:
        case "end":
          return _context32.stop();
      }
    }
  }, _callee32, null, [[2, 11]]);
})));
var organizationSlice = createSlice({
  name: "practitionerApiSlice",
  initialState: {
    organizationTreeList: _objectSpread2({}, defaultState.List),
    organizationEntityType: _objectSpread2({}, defaultState.List),
    orgParEntity: _objectSpread2({}, defaultState.List),
    orgLevelCare: _objectSpread2({}, defaultState.List),
    orgUseIdenifi: _objectSpread2({}, defaultState.List),
    orgIdTypeIdenifi: _objectSpread2({}, defaultState.List),
    aliastype: _objectSpread2({}, defaultState.List),
    organizationReadDetails: _objectSpread2({}, defaultState.Info),
    organizationReadStatusUpsert: _objectSpread2({}, defaultState.List),
    orgAddType: _objectSpread2({}, defaultState.List),
    orgAddUSE: _objectSpread2({}, defaultState.List),
    orgAddCity: _objectSpread2({}, defaultState.List),
    orgAddDISTRICT: _objectSpread2({}, defaultState.List),
    orgAddSTATE: _objectSpread2({}, defaultState.List),
    orgAddCOUNTRY: _objectSpread2({}, defaultState.List),
    orgAddPINCODE: _objectSpread2({}, defaultState.List),
    orgContactDetailMode: _objectSpread2({}, defaultState.List),
    orgContactDetailCode: _objectSpread2({}, defaultState.List),
    orgContactDetailUse: _objectSpread2({}, defaultState.List),
    orgContactDetailPriority: _objectSpread2({}, defaultState.List),
    orgNamePrefix: _objectSpread2({}, defaultState.List),
    orgNameSuffix: _objectSpread2({}, defaultState.List),
    positionDesi: _objectSpread2({}, defaultState.List),
    setOrganization: _objectSpread2({}, defaultState.List),
    getOrganization: _objectSpread2({}, defaultState.List),
    specialtyDrop: _objectSpread2({}, defaultState.List),
    orgDateFormat: _objectSpread2({}, defaultState.List),
    orgTimeFormat: _objectSpread2({}, defaultState.List),
    orgDateTimeFormat: _objectSpread2({}, defaultState.List),
    upsertOrganiztion: _objectSpread2({}, defaultState.List),
    getParentEntity: _objectSpread2({}, defaultState.List),
    getOrgDetails: _objectSpread2({}, defaultState.List)
  },
  extraReducers: (_extraReducers$8 = {}, _defineProperty(_extraReducers$8, ORGANIZATION_TREE_READ.fulfilled, function (state, action) {
    state.organizationTreeList.loading = false, state.organizationTreeList.error = false, state.organizationTreeList = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_TREE_READ.pending, function (state, action) {
    state.organizationTreeList.loading = true, state.organizationTreeList.error = false, state.organizationTreeList.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_TREE_READ.rejected, function (state, action) {
    state.organizationTreeList.loading = false, state.organizationTreeList.error = true, state.organizationTreeList = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_READ_DETAILS.fulfilled, function (state, action) {
    state.organizationReadDetails.loading = false, state.organizationReadDetails.error = false, state.organizationReadDetails = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_READ_DETAILS.pending, function (state, action) {
    state.organizationReadDetails.loading = true, state.organizationReadDetails.error = false, state.organizationReadDetails.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_READ_DETAILS.rejected, function (state, action) {
    state.organizationReadDetails.loading = false, state.organizationReadDetails.error = true, state.organizationReadDetails = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_READ_STATUS_UPSERT.fulfilled, function (state, action) {
    state.organizationReadStatusUpsert.loading = false, state.organizationReadStatusUpsert.error = false, state.organizationReadStatusUpsert = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_READ_STATUS_UPSERT.pending, function (state, action) {
    state.organizationReadStatusUpsert.loading = true, state.organizationReadStatusUpsert.error = false, state.organizationReadStatusUpsert.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_READ_STATUS_UPSERT.rejected, function (state, action) {
    state.organizationReadStatusUpsert.loading = false, state.organizationReadStatusUpsert.error = true, state.organizationReadStatusUpsert = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_ENTITY_TYPE.fulfilled, function (state, action) {
    state.organizationEntityType.loading = false, state.organizationEntityType.error = false, state.organizationEntityType = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_ENTITY_TYPE.pending, function (state, action) {
    state.organizationEntityType.loading = true, state.organizationEntityType.error = false, state.organizationEntityType.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_ENTITY_TYPE.rejected, function (state, action) {
    state.organizationEntityType.loading = false, state.organizationEntityType.error = true, state.organizationEntityType = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_PARENT_ENTITY.fulfilled, function (state, action) {
    state.orgParEntity.loading = false, state.orgParEntity.error = false, state.orgParEntity = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_PARENT_ENTITY.pending, function (state, action) {
    state.orgParEntity.loading = true, state.orgParEntity.error = false, state.orgParEntity.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_PARENT_ENTITY.rejected, function (state, action) {
    state.orgParEntity.loading = false, state.orgParEntity.error = true, state.orgParEntity = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_LEVEL_CARE.fulfilled, function (state, action) {
    state.orgLevelCare.loading = false, state.orgLevelCare.error = false, state.orgLevelCare = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_LEVEL_CARE.pending, function (state, action) {
    state.orgLevelCare.loading = true, state.orgLevelCare.error = false, state.orgLevelCare.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_LEVEL_CARE.rejected, function (state, action) {
    state.orgLevelCare.loading = false, state.orgLevelCare.error = true, state.orgLevelCare = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_USE_IDENTIFICATION.fulfilled, function (state, action) {
    state.orgUseIdenifi.loading = false, state.orgUseIdenifi.error = false, state.orgUseIdenifi = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_USE_IDENTIFICATION.pending, function (state, action) {
    state.orgUseIdenifi.loading = true, state.orgUseIdenifi.error = false, state.orgUseIdenifi.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_USE_IDENTIFICATION.rejected, function (state, action) {
    state.orgUseIdenifi.loading = false, state.orgUseIdenifi.error = true, state.orgUseIdenifi = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_IDTYPE_IDENTIF.fulfilled, function (state, action) {
    state.orgIdTypeIdenifi.loading = false, state.orgIdTypeIdenifi.error = false, state.orgIdTypeIdenifi = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_IDTYPE_IDENTIF.pending, function (state, action) {
    state.orgIdTypeIdenifi.loading = true, state.orgIdTypeIdenifi.error = false, state.orgIdTypeIdenifi.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_IDTYPE_IDENTIF.rejected, function (state, action) {
    state.orgIdTypeIdenifi.loading = false, state.orgIdTypeIdenifi.error = true, state.orgIdTypeIdenifi = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ALIAS_TYPE.fulfilled, function (state, action) {
    state.aliastype.loading = false, state.aliastype.error = false, state.aliastype = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ALIAS_TYPE.pending, function (state, action) {
    state.aliastype.loading = true, state.aliastype.error = false, state.aliastype.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ALIAS_TYPE.rejected, function (state, action) {
    state.aliastype.loading = false, state.aliastype.error = true, state.aliastype = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ADD_TYPE.fulfilled, function (state, action) {
    state.orgAddType.loading = false, state.orgAddType.error = false, state.orgAddType = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ADD_TYPE.pending, function (state, action) {
    state.orgAddType.loading = true, state.orgAddType.error = false, state.orgAddType.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ADD_TYPE.rejected, function (state, action) {
    state.orgAddType.loading = false, state.orgAddType.error = true, state.orgAddType = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ADD_USE.fulfilled, function (state, action) {
    state.orgAddUSE.loading = false, state.orgAddUSE.error = false, state.orgAddUSE = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ADD_USE.pending, function (state, action) {
    state.orgAddUSE.loading = true, state.orgAddUSE.error = false, state.orgAddUSE.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ADD_USE.rejected, function (state, action) {
    state.orgAddUSE.loading = false, state.orgAddUSE.error = true, state.orgAddUSE = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ADD_City.fulfilled, function (state, action) {
    state.orgAddCity.loading = false, state.orgAddCity.error = false, state.orgAddCity = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ADD_City.pending, function (state, action) {
    state.orgAddCity.loading = true, state.orgAddCity.error = false, state.orgAddCity.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ADD_City.rejected, function (state, action) {
    state.orgAddCity.loading = false, state.orgAddCity.error = true, state.orgAddCity = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ADD_DISTRICT.fulfilled, function (state, action) {
    state.orgAddDISTRICT.loading = false, state.orgAddDISTRICT.error = false, state.orgAddDISTRICT = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ADD_DISTRICT.pending, function (state, action) {
    state.orgAddDISTRICT.loading = true, state.orgAddDISTRICT.error = false, state.orgAddDISTRICT.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_ADD_DISTRICT.rejected, function (state, action) {
    state.orgAddDISTRICT.loading = false, state.orgAddDISTRICT.error = true, state.orgAddDISTRICT = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_AddSTATE.fulfilled, function (state, action) {
    state.orgAddSTATE.loading = false, state.orgAddSTATE.error = false, state.orgAddSTATE = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_AddSTATE.pending, function (state, action) {
    state.orgAddSTATE.loading = true, state.orgAddSTATE.error = false, state.orgAddSTATE.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_AddSTATE.rejected, function (state, action) {
    state.orgAddSTATE.loading = false, state.orgAddSTATE.error = true, state.orgAddSTATE = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_COUNTRY.fulfilled, function (state, action) {
    state.orgAddCOUNTRY.loading = false, state.orgAddCOUNTRY.error = false, state.orgAddCOUNTRY = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_COUNTRY.pending, function (state, action) {
    state.orgAddCOUNTRY.loading = true, state.orgAddCOUNTRY.error = false, state.orgAddCOUNTRY.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_COUNTRY.rejected, function (state, action) {
    state.orgAddCOUNTRY.loading = false, state.orgAddCOUNTRY.error = true, state.orgAddCOUNTRY = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_PINCODE.fulfilled, function (state, action) {
    state.orgAddPINCODE.loading = false, state.orgAddPINCODE.error = false, state.orgAddPINCODE = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_PINCODE.pending, function (state, action) {
    state.orgAddPINCODE.loading = true, state.orgAddPINCODE.error = false, state.orgAddPINCODE.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_PINCODE.rejected, function (state, action) {
    state.orgAddPINCODE.loading = false, state.orgAddPINCODE.error = true, state.orgAddPINCODE = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACTDETAILMODE.fulfilled, function (state, action) {
    state.orgContactDetailMode.loading = false, state.orgContactDetailMode.error = false, state.orgContactDetailMode = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACTDETAILMODE.pending, function (state, action) {
    state.orgContactDetailMode.loading = true, state.orgContactDetailMode.error = false, state.orgContactDetailMode.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACTDETAILMODE.rejected, function (state, action) {
    state.orgContactDetailMode.loading = false, state.orgContactDetailMode.error = true, state.orgContactDetailMode = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONNTACTDETAILCODE.fulfilled, function (state, action) {
    state.orgContactDetailCode.loading = false, state.orgContactDetailCode.error = false, state.orgContactDetailCode = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONNTACTDETAILCODE.pending, function (state, action) {
    state.orgContactDetailCode.loading = true, state.orgContactDetailCode.error = false, state.orgContactDetailCode.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONNTACTDETAILCODE.rejected, function (state, action) {
    state.orgContactDetailCode.loading = false, state.orgContactDetailCode.error = true, state.orgContactDetailCode = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACTDETAILUSE.fulfilled, function (state, action) {
    state.orgContactDetailUse.loading = false, state.orgContactDetailUse.error = false, state.orgContactDetailUse = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACTDETAILUSE.pending, function (state, action) {
    state.orgContactDetailUse.loading = true, state.orgContactDetailUse.error = false, state.orgContactDetailUse.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACTDETAILUSE.rejected, function (state, action) {
    state.orgContactDetailUse.loading = false, state.orgContactDetailUse.error = true, state.orgContactDetailUse = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACTDETAILPRIORITY.fulfilled, function (state, action) {
    state.orgContactDetailPriority.loading = false, state.orgContactDetailPriority.error = false, state.orgContactDetailPriority = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACTDETAILPRIORITY.pending, function (state, action) {
    state.orgContactDetailPriority.loading = true, state.orgContactDetailPriority.error = false, state.orgContactDetailPriority.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACTDETAILPRIORITY.rejected, function (state, action) {
    state.orgContactDetailPriority.loading = false, state.orgContactDetailPriority.error = true, state.orgContactDetailPriority = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACT_PREFIX.fulfilled, function (state, action) {
    state.orgNamePrefix.loading = false, state.orgNamePrefix.error = false, state.orgNamePrefix = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACT_PREFIX.pending, function (state, action) {
    state.orgNamePrefix.loading = true, state.orgNamePrefix.error = false, state.orgNamePrefix.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACT_PREFIX.rejected, function (state, action) {
    state.orgNamePrefix.loading = false, state.orgNamePrefix.error = true, state.orgNamePrefix = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACT_SUFFIX.fulfilled, function (state, action) {
    state.orgNameSuffix.loading = false, state.orgNameSuffix.error = false, state.orgNameSuffix = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACT_SUFFIX.pending, function (state, action) {
    state.orgNameSuffix.loading = true, state.orgNameSuffix.error = false, state.orgNameSuffix.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACT_SUFFIX.rejected, function (state, action) {
    state.orgNameSuffix.loading = false, state.orgNameSuffix.error = true, state.orgNameSuffix = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACT_DESI.fulfilled, function (state, action) {
    state.positionDesi.loading = false, state.positionDesi.error = false, state.positionDesi = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACT_DESI.pending, function (state, action) {
    state.positionDesi.loading = true, state.positionDesi.error = false, state.positionDesi.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_CONTACT_DESI.rejected, function (state, action) {
    state.positionDesi.loading = false, state.positionDesi.error = true, state.positionDesi = action.payload;
  }), _defineProperty(_extraReducers$8, SET_ORGANIZATION.fulfilled, function (state, action) {
    state.setOrganization.loading = false, state.setOrganization.error = false, state.setOrganization = action.payload;
  }), _defineProperty(_extraReducers$8, SET_ORGANIZATION.pending, function (state, action) {
    state.setOrganization.loading = true, state.setOrganization.error = false, state.setOrganization.loading = true;
  }), _defineProperty(_extraReducers$8, SET_ORGANIZATION.rejected, function (state, action) {
    state.setOrganization.loading = false, state.setOrganization.error = true, state.setOrganization = action.payload;
  }), _defineProperty(_extraReducers$8, ORG_FROM_GET.fulfilled, function (state, action) {
    state.getOrganization.loading = false, state.getOrganization.error = false, state.getOrganization = action.payload;
  }), _defineProperty(_extraReducers$8, ORG_FROM_GET.pending, function (state, action) {
    state.getOrganization.loading = true, state.getOrganization.error = false, state.getOrganization.loading = true;
  }), _defineProperty(_extraReducers$8, ORG_FROM_GET.rejected, function (state, action) {
    state.getOrganization.loading = false, state.getOrganization.error = true, state.getOrganization = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_SPECIALTY_DROP.fulfilled, function (state, action) {
    state.specialtyDrop.loading = false, state.specialtyDrop.error = false, state.specialtyDrop = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_SPECIALTY_DROP.pending, function (state, action) {
    state.specialtyDrop.loading = true, state.specialtyDrop.error = false, state.specialtyDrop.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_SPECIALTY_DROP.rejected, function (state, action) {
    state.specialtyDrop.loading = false, state.specialtyDrop.error = true, state.specialtyDrop = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_DATE_FORMAT.fulfilled, function (state, action) {
    state.orgDateFormat.loading = false, state.orgDateFormat.error = false, state.orgDateFormat = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_DATE_FORMAT.pending, function (state, action) {
    state.orgDateFormat.loading = true, state.orgDateFormat.error = false, state.orgDateFormat.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_DATE_FORMAT.rejected, function (state, action) {
    state.orgDateFormat.loading = false, state.orgDateFormat.error = true, state.orgDateFormat = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_TIME_FORMAT.fulfilled, function (state, action) {
    state.orgTimeFormat.loading = false, state.orgTimeFormat.error = false, state.orgTimeFormat = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_TIME_FORMAT.pending, function (state, action) {
    state.orgTimeFormat.loading = true, state.orgTimeFormat.error = false, state.orgTimeFormat.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_TIME_FORMAT.rejected, function (state, action) {
    state.orgTimeFormat.loading = false, state.orgTimeFormat.error = true, state.orgTimeFormat = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_DATE_TIME_FORMAT.fulfilled, function (state, action) {
    state.orgDateTimeFormat.loading = false, state.orgDateTimeFormat.error = false, state.orgDateTimeFormat = action.payload;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_DATE_TIME_FORMAT.pending, function (state, action) {
    state.orgDateTimeFormat.loading = true, state.orgDateTimeFormat.error = false, state.orgDateTimeFormat.loading = true;
  }), _defineProperty(_extraReducers$8, ORGANIZATION_GET_DATE_TIME_FORMAT.rejected, function (state, action) {
    state.orgDateTimeFormat.loading = false, state.orgDateTimeFormat.error = true, state.orgDateTimeFormat = action.payload;
  }), _defineProperty(_extraReducers$8, UPSERT_ORAGANIZATION.fulfilled, function (state, action) {
    state.upsertOrganiztion.loading = false, state.upsertOrganiztion.error = false, state.upsertOrganiztion = action.payload;
  }), _defineProperty(_extraReducers$8, UPSERT_ORAGANIZATION.pending, function (state, action) {
    state.upsertOrganiztion.loading = true, state.upsertOrganiztion.error = false, state.upsertOrganiztion.loading = true;
  }), _defineProperty(_extraReducers$8, UPSERT_ORAGANIZATION.rejected, function (state, action) {
    state.upsertOrganiztion.loading = false, state.upsertOrganiztion.error = true, state.upsertOrganiztion = action.payload;
  }), _defineProperty(_extraReducers$8, GET_PARENT_ENTITY.fulfilled, function (state, action) {
    state.getParentEntity.loading = false, state.getParentEntity.error = false, state.getParentEntity = action.payload;
  }), _defineProperty(_extraReducers$8, GET_PARENT_ENTITY.pending, function (state, action) {
    state.getParentEntity.loading = true, state.getParentEntity.error = false, state.getParentEntity.loading = true;
  }), _defineProperty(_extraReducers$8, GET_PARENT_ENTITY.rejected, function (state, action) {
    state.getParentEntity.loading = false, state.getParentEntity.error = true, state.getParentEntity = action.payload;
  }), _defineProperty(_extraReducers$8, GET_ORG_DETAILS.fulfilled, function (state, action) {
    state.getOrgDetails.loading = false, state.getOrgDetails.error = false, state.getOrgDetails = action.payload;
  }), _defineProperty(_extraReducers$8, GET_ORG_DETAILS.pending, function (state, action) {
    state.getOrgDetails.loading = true, state.getOrgDetails.error = false, state.getOrgDetails.loading = true;
  }), _defineProperty(_extraReducers$8, GET_ORG_DETAILS.rejected, function (state, action) {
    state.getOrgDetails.loading = false, state.getOrgDetails.error = true, state.getOrgDetails = action.payload;
  }), _extraReducers$8)
});
var organizationActions = {
  ORGANIZATION_TREE_READ: ORGANIZATION_TREE_READ,
  ORGANIZATION_ENTITY_TYPE: ORGANIZATION_ENTITY_TYPE,
  ORGANIZATION_GET_PARENT_ENTITY: ORGANIZATION_GET_PARENT_ENTITY,
  ORGANIZATION_GET_LEVEL_CARE: ORGANIZATION_GET_LEVEL_CARE,
  ORGANIZATION_GET_USE_IDENTIFICATION: ORGANIZATION_GET_USE_IDENTIFICATION,
  ORGANIZATION_GET_IDTYPE_IDENTIF: ORGANIZATION_GET_IDTYPE_IDENTIF,
  ORGANIZATION_GET_ALIAS_TYPE: ORGANIZATION_GET_ALIAS_TYPE,
  ORGANIZATION_READ_DETAILS: ORGANIZATION_READ_DETAILS,
  ORGANIZATION_READ_STATUS_UPSERT: ORGANIZATION_READ_STATUS_UPSERT,
  ORGANIZATION_GET_ADD_TYPE: ORGANIZATION_GET_ADD_TYPE,
  ORGANIZATION_GET_ADD_USE: ORGANIZATION_GET_ADD_USE,
  ORGANIZATION_GET_ADD_City: ORGANIZATION_GET_ADD_City,
  ORGANIZATION_GET_ADD_DISTRICT: ORGANIZATION_GET_ADD_DISTRICT,
  ORGANIZATION_GET_AddSTATE: ORGANIZATION_GET_AddSTATE,
  ORGANIZATION_GET_COUNTRY: ORGANIZATION_GET_COUNTRY,
  ORGANIZATION_GET_PINCODE: ORGANIZATION_GET_PINCODE,
  ORGANIZATION_GET_CONTACTDETAILMODE: ORGANIZATION_GET_CONTACTDETAILMODE,
  ORGANIZATION_GET_CONNTACTDETAILCODE: ORGANIZATION_GET_CONNTACTDETAILCODE,
  ORGANIZATION_GET_CONTACTDETAILUSE: ORGANIZATION_GET_CONTACTDETAILUSE,
  ORGANIZATION_GET_CONTACTDETAILPRIORITY: ORGANIZATION_GET_CONTACTDETAILPRIORITY,
  ORGANIZATION_GET_CONTACT_SUFFIX: ORGANIZATION_GET_CONTACT_SUFFIX,
  ORGANIZATION_GET_CONTACT_PREFIX: ORGANIZATION_GET_CONTACT_PREFIX,
  ORGANIZATION_GET_CONTACT_DESI: ORGANIZATION_GET_CONTACT_DESI,
  SET_ORGANIZATION: SET_ORGANIZATION,
  ORG_FROM_GET: ORG_FROM_GET,
  ORGANIZATION_GET_SPECIALTY_DROP: ORGANIZATION_GET_SPECIALTY_DROP,
  ORGANIZATION_GET_DATE_FORMAT: ORGANIZATION_GET_DATE_FORMAT,
  ORGANIZATION_GET_TIME_FORMAT: ORGANIZATION_GET_TIME_FORMAT,
  ORGANIZATION_GET_DATE_TIME_FORMAT: ORGANIZATION_GET_DATE_TIME_FORMAT,
  UPSERT_ORAGANIZATION: UPSERT_ORAGANIZATION,
  GET_PARENT_ENTITY: GET_PARENT_ENTITY,
  GET_ORG_DETAILS: GET_ORG_DETAILS
};
var organizationSlice$1 = organizationSlice.reducer;

var queries$6 = {
  getRoleDetails: function getRoleDetails(roleid) {
    return {
      db_name: dbName,
      "entity": "IDM_PermissionRoleMapping",
      "filter": "IDM_PermissionRoleMapping.roleid ==\"".concat(roleid, "\""),
      "return_fields": "IDM_PermissionRoleMapping.rolename"
    };
  },
  role_read: function role_read(data) {
    return {
      db_name: dbName,
      entity: "IDM_PermissionRoleMapping",
      filter: "IDM_PermissionRoleMapping.activestatus ==true",
      return_fields: "IDM_PermissionRoleMapping"
    };
  },
  role_read_tenetid: function role_read_tenetid(data) {
    var tenentid = localStorage.getItem("tenentid");
    return {
      db_name: dbName,
      entity: "IDM_PermissionRoleMapping",
      filter: "IDM_PermissionRoleMapping.activestatus ==true && IDM_PermissionRoleMapping.tenantid == '".concat(tenentid, "' "),
      return_fields: "IDM_PermissionRoleMapping"
    };
  },
  permission_role_read: function permission_role_read(data) {
    var filter = {};

    if ((data === null || data === void 0 ? void 0 : data.role_id) >= 0) {
      filter = {
        filter: "PermissionRoleMapping.role_id == ".concat(data.role_id)
      };
    }

    return _objectSpread2(_objectSpread2({
      db_name: dbName,
      entity: "PermissionRoleMapping"
    }, filter), {}, {
      return_fields: "{PermissionRoleMapping}"
    });
  },
  get_role_by_id: function get_role_by_id(roleid) {
    return {
      db_name: dbName,
      entity: "IDM_PermissionRoleMapping",
      roleid: roleid //"CodingMaster/11117",

    };
  },
  permission_management_read: function permission_management_read(data) {
    var filter = {}; // if(data.role_id){
    //   filter = { "filter": `PermissionManagement.role_id == '${data.role_id}'` }
    // }

    return _objectSpread2(_objectSpread2({
      db_name: dbName,
      entity: "PermissionManagement"
    }, filter), {}, {
      return_fields: "{PermissionManagement}"
    });
  },
  permission_role_upsert: function permission_role_upsert(data) {
    var filter = {};

    if (data._key) {
      filter = {
        filter: {
          _key: data._key
        }
      };
    }

    return [_objectSpread2(_objectSpread2({
      db_name: dbName,
      entity: "IDM_PermissionRoleMapping",
      is_metadata: true,
      metadataId: METADATAID,
      metadata_dbname: idm_metadata_dbname
    }, filter), {}, {
      doc: _objectSpread2({}, data)
    })];
  },
  role_upsert: function role_upsert(data) {
    var filter = {};

    if (data._key) {
      filter = {
        filter: {
          _key: data._key
        }
      };
    }

    return [_objectSpread2(_objectSpread2({
      db_name: dbName,
      entity: "CodeableConceptMaster",
      is_metadata: true,
      metadataId: METADATAID
    }, filter), {}, {
      doc: _objectSpread2({}, data)
    })];
  },
  role_soft_delete: function role_soft_delete(key) {
    return {
      db_name: dbName,
      // metadata_dbname: idm_metadata_dbname,
      entity: "IDM_PermissionRoleMapping",
      filter: "IDM_PermissionRoleMapping._key=='".concat(key, "'")
    };
  },
  role_delete: function role_delete(data) {
    var filter = {};

    if (data._id) {
      filter = {
        filter: {
          _id: data._id
        }
      };
    }

    return [_objectSpread2({
      db_name: dbName,
      entity: "CodeableConceptMaster",
      // "is_metadata": true,
      metadataId: METADATAID
    }, filter)];
  },
  coding_update: function coding_update(data) {
    // return [{
    //   "db_name": dbName,
    //   "entity": "CodingMaster",
    //   "is_metadata": true,
    //   "metadataId": "04ecb73d-f048-44ce-8563-c9be015812dd",
    //   "filter": {
    //   "_key":`${data._key}` ,
    //   },
    //   "doc": {
    //     ...data
    //   }
    // }]
    var filter = {
      filter: {
        _key: "".concat(data === null || data === void 0 ? void 0 : data._key)
      }
    };
    return [_objectSpread2(_objectSpread2({
      db_name: dbName,
      entity: "IDM_PermissionRoleMapping",
      is_metadata: true,
      metadataId: METADATAID
    }, (data === null || data === void 0 ? void 0 : data._key) && filter), {}, {
      doc: {
        id: data === null || data === void 0 ? void 0 : data.id,
        roleid: data === null || data === void 0 ? void 0 : data.roleid,
        rolename: data === null || data === void 0 ? void 0 : data.rolename,
        perrolepermsnid: data === null || data === void 0 ? void 0 : data.perrolepermsnid,
        activestatus: data === null || data === void 0 ? void 0 : data.activestatus,
        metadataid: IDM_METADATA_ID,
        clientid: "clients/540256733",
        projectid: "projects/540346760"
      }
    })];
  }
};

var _extraReducers$7;
var PERMISSION_ROLE_UPSERT = createAsyncThunk("rolesSlice/permission_role_upsert", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  var payload,
      _ref2,
      rejectWithValue,
      params,
      queriesjson,
      data,
      _args = arguments;

  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          payload = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          _ref2 = _args.length > 1 ? _args[1] : undefined, rejectWithValue = _ref2.rejectWithValue;
          _context.prev = 2;
          params = _objectSpread2({
            _key: payload._key
          }, payload);
          queriesjson = queries$6.permission_role_upsert(params);
          _context.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __idmroleadd__);

        case 7:
          data = _context.sent;
          return _context.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 11:
          _context.prev = 11;
          _context.t0 = _context["catch"](2);
          return _context.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context.t0.message
          })));

        case 14:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[2, 11]]);
})));
var CODABALE_CONCEPT_UPSERT = createAsyncThunk("rolesSlice/codable_concept_upsert", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
  var payload,
      _ref4,
      rejectWithValue,
      params,
      queriesjson,
      data,
      _args2 = arguments;

  return _regeneratorRuntime().wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          payload = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
          _ref4 = _args2.length > 1 ? _args2[1] : undefined, rejectWithValue = _ref4.rejectWithValue;
          _context2.prev = 2;
          params = _objectSpread2({
            _key: payload._key
          }, payload);
          queriesjson = queries$6.role_upsert(params);
          _context2.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __uspsertUrl__);

        case 7:
          data = _context2.sent;
          return _context2.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 11:
          _context2.prev = 11;
          _context2.t0 = _context2["catch"](2);
          return _context2.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context2.t0.message
          })));

        case 14:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, null, [[2, 11]]);
}))); //coding_update

var ROLE_SOFT_DELETE = createAsyncThunk("rolesSlice/role_soft_delete", /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref5, _ref6) {
    var _key, rejectWithValue, queriesjson, data;

    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _key = _ref5._key;
            rejectWithValue = _ref6.rejectWithValue;
            _context3.prev = 2;
            queriesjson = queries$6.role_soft_delete(_key);
            _context3.next = 6;
            return fetchData({
              body: JSON.stringify(queriesjson)
            }, __RoleSoftDelete__);

          case 6:
            data = _context3.sent;
            return _context3.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
              data: data
            }));

          case 10:
            _context3.prev = 10;
            _context3.t0 = _context3["catch"](2);
            return _context3.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
              message: _context3.t0.message
            })));

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[2, 10]]);
  }));

  return function (_x, _x2) {
    return _ref7.apply(this, arguments);
  };
}());
var CODING_UPSERT = createAsyncThunk("rolesSlice/coding_upsert", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
  var payload,
      _ref9,
      rejectWithValue,
      params,
      queriesjson,
      data,
      _args4 = arguments;

  return _regeneratorRuntime().wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          payload = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
          _ref9 = _args4.length > 1 ? _args4[1] : undefined, rejectWithValue = _ref9.rejectWithValue;
          _context4.prev = 2;
          params = _objectSpread2({
            _key: payload._key
          }, payload);
          queriesjson = queries$6.coding_update(params);
          _context4.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __uspsertUrl__);

        case 7:
          data = _context4.sent;
          return _context4.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 11:
          _context4.prev = 11;
          _context4.t0 = _context4["catch"](2);
          return _context4.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context4.t0.message
          })));

        case 14:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4, null, [[2, 11]]);
})));
var CODABALE_CONCEPT_DELETE = createAsyncThunk("rolesSlice/codable_concept_delete", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
  var payload,
      _ref11,
      rejectWithValue,
      params,
      queriesjson,
      data,
      _args5 = arguments;

  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          payload = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
          _ref11 = _args5.length > 1 ? _args5[1] : undefined, rejectWithValue = _ref11.rejectWithValue;
          _context5.prev = 2;
          params = _objectSpread2({
            _id: payload._id
          }, payload);
          queriesjson = queries$6.role_delete(params);
          _context5.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __softDelete__);

        case 7:
          data = _context5.sent;
          return _context5.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 11:
          _context5.prev = 11;
          _context5.t0 = _context5["catch"](2);
          return _context5.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context5.t0.message
          })));

        case 14:
        case "end":
          return _context5.stop();
      }
    }
  }, _callee5, null, [[2, 11]]);
})));
var GET_ROLE_BY_ID = createAsyncThunk("rolesSlice/get_role_by_id", /*#__PURE__*/function () {
  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref12, _ref13) {
    var roleid, rejectWithValue, readqueries, data;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            roleid = _ref12.roleid;
            rejectWithValue = _ref13.rejectWithValue;
            _context6.prev = 2;
            readqueries = queries$6.get_role_by_id(roleid);
            _context6.next = 6;
            return fetchData({
              body: JSON.stringify(readqueries)
            }, __GetRoleById__);

          case 6:
            data = _context6.sent;
            return _context6.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
              data: data
            }));

          case 10:
            _context6.prev = 10;
            _context6.t0 = _context6["catch"](2);
            return _context6.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
              message: _context6.t0.message
            })));

          case 13:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, null, [[2, 10]]);
  }));

  return function (_x3, _x4) {
    return _ref14.apply(this, arguments);
  };
}());
var PERMISSION_MANAGEMENT_READ = createAsyncThunk("rolesSlice/permission_management_read", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
  var payload,
      _ref16,
      rejectWithValue,
      readqueries,
      data,
      arry,
      _args7 = arguments;

  return _regeneratorRuntime().wrap(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          payload = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
          _ref16 = _args7.length > 1 ? _args7[1] : undefined, rejectWithValue = _ref16.rejectWithValue;
          _context7.prev = 2;
          readqueries = queries$6.permission_management_read(payload);
          _context7.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context7.sent;
          arry = [];
          data.result.map(function (val) {
            if (val.PermissionManagement) {
              arry.push(_objectSpread2({}, val.PermissionManagement));
            }
          });
          return _context7.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context7.prev = 12;
          _context7.t0 = _context7["catch"](2);
          return _context7.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context7.t0.message
          })));

        case 15:
        case "end":
          return _context7.stop();
      }
    }
  }, _callee7, null, [[2, 12]]);
})));
var PERMISSION_MANAGEMENT_ROLE_READ = createAsyncThunk("rolesSlice/permission_management_role_read", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
  var payload,
      _ref18,
      rejectWithValue,
      readqueries,
      data,
      arry,
      _args8 = arguments;

  return _regeneratorRuntime().wrap(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          payload = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
          _ref18 = _args8.length > 1 ? _args8[1] : undefined, rejectWithValue = _ref18.rejectWithValue;
          _context8.prev = 2;
          readqueries = queries$6.permission_role_read(payload);
          _context8.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context8.sent;
          arry = [];
          data.result.map(function (val) {
            if (val.PermissionRoleMapping) {
              arry.push(_objectSpread2({}, val.PermissionRoleMapping));
            }
          });
          return _context8.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context8.prev = 12;
          _context8.t0 = _context8["catch"](2);
          return _context8.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context8.t0.message
          })));

        case 15:
        case "end":
          return _context8.stop();
      }
    }
  }, _callee8, null, [[2, 12]]);
})));
var ROLE_READ = createAsyncThunk("rolesSlice/role_read", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
  var payload,
      _ref20,
      rejectWithValue,
      Roleid,
      getRoledetails,
      Role,
      readqueries,
      data,
      _readqueries,
      _data,
      _args9 = arguments;

  return _regeneratorRuntime().wrap(function _callee9$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          payload = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};
          _ref20 = _args9.length > 1 ? _args9[1] : undefined, rejectWithValue = _ref20.rejectWithValue;
          _context9.prev = 2;
          Roleid = payload.Roleid, payload.tenantid;
          getRoledetails = queries$6.getRoleDetails(Roleid);
          _context9.next = 7;
          return fetchData({
            body: JSON.stringify(getRoledetails)
          }, __readDocumentUrl__);

        case 7:
          Role = _context9.sent;

          if (!((Role === null || Role === void 0 ? void 0 : Role.result[0]) === "Super Admin Role")) {
            _context9.next = 16;
            break;
          }

          readqueries = queries$6.role_read_tenetid(payload);
          _context9.next = 12;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 12:
          data = _context9.sent;
          return _context9.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data.result
          }));

        case 16:
          _readqueries = queries$6.role_read_tenetid(payload);
          _context9.next = 19;
          return fetchData({
            body: JSON.stringify(_readqueries)
          }, __readDocumentUrl__);

        case 19:
          _data = _context9.sent;
          return _context9.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: _data.result
          }));

        case 21:
          _context9.next = 26;
          break;

        case 23:
          _context9.prev = 23;
          _context9.t0 = _context9["catch"](2);
          return _context9.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context9.t0.message
          })));

        case 26:
        case "end":
          return _context9.stop();
      }
    }
  }, _callee9, null, [[2, 23]]);
})));
var rolesSlice = createSlice({
  name: "rolesSlice",
  initialState: {
    permission_role_upsert: _objectSpread2({}, defaultState.List),
    codable_concept_upsert: _objectSpread2({}, defaultState.List),
    permission_management_read: _objectSpread2({}, defaultState.List),
    permission_management_role_read: _objectSpread2({}, defaultState.List),
    role_read: _objectSpread2({}, defaultState.List),
    codable_concept_delete: _objectSpread2({}, defaultState.List),
    coding_upsert: _objectSpread2({}, defaultState.List),
    get_role_by_id: _objectSpread2({}, defaultState.List),
    role_soft_delete: _objectSpread2({}, defaultState.List)
  },
  extraReducers: (_extraReducers$7 = {}, _defineProperty(_extraReducers$7, PERMISSION_ROLE_UPSERT.fulfilled, function (state, action) {
    state.permission_role_upsert.loading = false, state.permission_role_upsert.error = false, state.permission_role_upsert = action.payload;
  }), _defineProperty(_extraReducers$7, PERMISSION_ROLE_UPSERT.pending, function (state, action) {
    state.permission_role_upsert.loading = true, state.permission_role_upsert.error = false, state.permission_role_upsert.loading = true;
  }), _defineProperty(_extraReducers$7, PERMISSION_ROLE_UPSERT.rejected, function (state, action) {
    state.permission_role_upsert.loading = false, state.permission_role_upsert.error = true, state.permission_role_upsert = action.payload;
  }), _defineProperty(_extraReducers$7, CODABALE_CONCEPT_UPSERT.fulfilled, function (state, action) {
    state.codable_concept_upsert.loading = false, state.codable_concept_upsert.error = false, state.codable_concept_upsert = action.payload;
  }), _defineProperty(_extraReducers$7, CODABALE_CONCEPT_UPSERT.pending, function (state, action) {
    state.codable_concept_upsert.loading = true, state.codable_concept_upsert.error = false, state.codable_concept_upsert.loading = true;
  }), _defineProperty(_extraReducers$7, CODABALE_CONCEPT_UPSERT.rejected, function (state, action) {
    state.codable_concept_upsert.loading = false, state.codable_concept_upsert.error = true, state.codable_concept_upsert = action.payload;
  }), _defineProperty(_extraReducers$7, PERMISSION_MANAGEMENT_READ.fulfilled, function (state, action) {
    state.permission_management_read.loading = false, state.permission_management_read.error = false, state.permission_management_read = action.payload;
  }), _defineProperty(_extraReducers$7, PERMISSION_MANAGEMENT_READ.pending, function (state, action) {
    state.permission_management_read.loading = true, state.permission_management_read.error = false, state.permission_management_read.loading = true;
  }), _defineProperty(_extraReducers$7, PERMISSION_MANAGEMENT_READ.rejected, function (state, action) {
    state.permission_management_read.loading = false, state.permission_management_read.error = true, state.permission_management_read = action.payload;
  }), _defineProperty(_extraReducers$7, PERMISSION_MANAGEMENT_ROLE_READ.fulfilled, function (state, action) {
    state.permission_management_role_read.loading = false, state.permission_management_role_read.error = false, state.permission_management_role_read = action.payload;
  }), _defineProperty(_extraReducers$7, PERMISSION_MANAGEMENT_ROLE_READ.pending, function (state, action) {
    state.permission_management_role_read.loading = true, state.permission_management_role_read.error = false, state.permission_management_role_read.loading = true;
  }), _defineProperty(_extraReducers$7, PERMISSION_MANAGEMENT_ROLE_READ.rejected, function (state, action) {
    state.permission_management_role_read.loading = false, state.permission_management_role_read.error = true, state.permission_management_role_read = action.payload;
  }), _defineProperty(_extraReducers$7, ROLE_READ.fulfilled, function (state, action) {
    state.role_read.loading = false, state.role_read.error = false, state.role_read = action.payload;
  }), _defineProperty(_extraReducers$7, ROLE_READ.pending, function (state, action) {
    state.role_read.loading = true, state.role_read.error = false, state.role_read.loading = true;
  }), _defineProperty(_extraReducers$7, ROLE_READ.rejected, function (state, action) {
    state.role_read.loading = false, state.role_read.error = true, state.role_read = action.payload;
  }), _defineProperty(_extraReducers$7, CODABALE_CONCEPT_DELETE.fulfilled, function (state, action) {
    state.role_read.loading = false, state.role_read.error = false, state.role_read = action.payload;
  }), _defineProperty(_extraReducers$7, CODABALE_CONCEPT_DELETE.pending, function (state, action) {
    state.role_read.loading = true, state.role_read.error = false, state.role_read.loading = true;
  }), _defineProperty(_extraReducers$7, CODABALE_CONCEPT_DELETE.rejected, function (state, action) {
    state.role_read.loading = false, state.role_read.error = true, state.role_read = action.payload;
  }), _defineProperty(_extraReducers$7, CODING_UPSERT.fulfilled, function (state, action) {
    state.coding_upsert.loading = false, state.coding_upsert.error = false, state.coding_upsert = action.payload;
  }), _defineProperty(_extraReducers$7, CODING_UPSERT.pending, function (state, action) {
    state.coding_upsert.loading = true, state.coding_upsert.error = false, state.coding_upsert.loading = true;
  }), _defineProperty(_extraReducers$7, CODING_UPSERT.rejected, function (state, action) {
    state.coding_upsert.loading = false, state.coding_upsert.error = true, state.coding_upsert = action.payload;
  }), _defineProperty(_extraReducers$7, GET_ROLE_BY_ID.fulfilled, function (state, action) {
    state.get_role_by_id.loading = false, state.get_role_by_id.error = false, state.get_role_by_id = action.payload;
  }), _defineProperty(_extraReducers$7, GET_ROLE_BY_ID.pending, function (state, action) {
    state.get_role_by_id.loading = true, state.get_role_by_id.error = false, state.get_role_by_id.loading = true;
  }), _defineProperty(_extraReducers$7, GET_ROLE_BY_ID.rejected, function (state, action) {
    state.get_role_by_id.loading = false, state.get_role_by_id.error = true, state.get_role_by_id = action.payload;
  }), _defineProperty(_extraReducers$7, ROLE_SOFT_DELETE.fulfilled, function (state, action) {
    state.role_soft_delete.loading = false, state.role_soft_delete.error = false, state.role_soft_delete = action.payload;
  }), _defineProperty(_extraReducers$7, ROLE_SOFT_DELETE.pending, function (state, action) {
    state.role_soft_delete.loading = true, state.role_soft_delete.error = false, state.role_soft_delete.loading = true;
  }), _defineProperty(_extraReducers$7, ROLE_SOFT_DELETE.rejected, function (state, action) {
    state.role_soft_delete.loading = false, state.role_soft_delete.error = true, state.role_soft_delete = action.payload;
  }), _extraReducers$7)
});
var roleActions = {
  CODING_UPSERT: CODING_UPSERT,
  PERMISSION_ROLE_UPSERT: PERMISSION_ROLE_UPSERT,
  CODABALE_CONCEPT_UPSERT: CODABALE_CONCEPT_UPSERT,
  PERMISSION_MANAGEMENT_READ: PERMISSION_MANAGEMENT_READ,
  PERMISSION_MANAGEMENT_ROLE_READ: PERMISSION_MANAGEMENT_ROLE_READ,
  ROLE_READ: ROLE_READ,
  CODABALE_CONCEPT_DELETE: CODABALE_CONCEPT_DELETE,
  GET_ROLE_BY_ID: GET_ROLE_BY_ID,
  ROLE_SOFT_DELETE: ROLE_SOFT_DELETE
};
var rolesSlice$1 = rolesSlice.reducer;

var queries$5 = {
  role_read: function role_read(data) {
    var filter = {
      filter: "CodeableConceptMaster.Type == 'PRACTROLE' && CodeableConceptMaster.status == true"
    };
    return _objectSpread2(_objectSpread2({
      db_name: dbName,
      entity: "CodeableConceptMaster"
    }, filter), {}, {
      return_fields: "MERGE(CodeableConceptMaster,{coding:(for cod IN TO_ARRAY(CodeableConceptMaster.coding) RETURN DOCUMENT(cod))})"
    });
  },
  permission_role_read: function permission_role_read(data) {
    var filter = {};

    if (data.role_id >= 0) {
      filter = {
        filter: "PermissionRoleMapping.role_id == ".concat(data.role_id)
      };
    }

    return _objectSpread2(_objectSpread2({
      db_name: dbName,
      entity: "PermissionRoleMapping"
    }, filter), {}, {
      return_fields: "{PermissionRoleMapping}"
    });
  },
  repository_read: function repository_read(data) {
    return {
      db_name: dbName,
      metadataid: IDM_METADATA_ID$1
    };
  },
  getRoleDetails: function getRoleDetails(roleid) {
    return {
      db_name: dbName,
      "entity": "IDM_PermissionRoleMapping",
      "filter": "IDM_PermissionRoleMapping.roleid ==\"".concat(roleid, "\""),
      "return_fields": "IDM_PermissionRoleMapping.rolename"
    };
  },
  repositary_read_client: function repositary_read_client(tenantid) {
    return {
      db_name: dbName,
      tenantId: tenantid,
      parentrepoId: ParentRepoId,
      metadataid: IDM_METADATA_ID$1
    };
  }
};

var _extraReducers$6;
var REPOSITORY_READ_DOCUMENT = createAsyncThunk("repositorySlice/repository_read", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  var payload,
      _ref2,
      rejectWithValue,
      Roleid,
      getRoledetails,
      Role,
      readqueries,
      data,
      readquery,
      datas,
      _args = arguments;

  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          payload = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          _ref2 = _args.length > 1 ? _args[1] : undefined, rejectWithValue = _ref2.rejectWithValue;
          Roleid = payload.Roleid, payload.tenantid;
          _context.prev = 3;
          getRoledetails = queries$5.getRoleDetails(Roleid);
          _context.next = 7;
          return fetchData({
            body: JSON.stringify(getRoledetails)
          }, __readDocumentUrl__);

        case 7:
          Role = _context.sent;

          if (!((Role === null || Role === void 0 ? void 0 : Role.result[0]) === "Super Admin Role")) {
            _context.next = 16;
            break;
          }

          readqueries = queries$5.repository_read();
          _context.next = 12;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __ListIDMRepositories__);

        case 12:
          data = _context.sent;
          return _context.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 16:
          readquery = queries$5.repository_read();
          _context.next = 19;
          return fetchData({
            body: JSON.stringify(readquery)
          }, __ListIDMRepositories__);

        case 19:
          datas = _context.sent;
          return _context.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: datas
          }));

        case 21:
          _context.next = 26;
          break;

        case 23:
          _context.prev = 23;
          _context.t0 = _context["catch"](3);
          return _context.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context.t0.message
          })));

        case 26:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[3, 23]]);
})));
var repositorySlice = createSlice({
  name: "repositorySlice",
  initialState: {
    repository_read: _objectSpread2({}, defaultState.List)
  },
  extraReducers: (_extraReducers$6 = {}, _defineProperty(_extraReducers$6, REPOSITORY_READ_DOCUMENT.fulfilled, function (state, action) {
    state.repository_read.loading = false, state.repository_read.error = false, state.repository_read = action.payload;
  }), _defineProperty(_extraReducers$6, REPOSITORY_READ_DOCUMENT.pending, function (state, action) {
    state.repository_read.loading = true, state.repository_read.error = false, state.repository_read.loading = true;
  }), _defineProperty(_extraReducers$6, REPOSITORY_READ_DOCUMENT.rejected, function (state, action) {
    state.repository_read.loading = false, state.repository_read.error = true, state.repository_read = action.payload;
  }), _extraReducers$6)
});
var repositoryActions = {
  REPOSITORY_READ_DOCUMENT: REPOSITORY_READ_DOCUMENT
};
var repositorySlice$1 = repositorySlice.reducer;

var queries$4 = {
  getRoleDetails: function getRoleDetails(roleid) {
    return {
      db_name: dbName,
      "entity": "IDM_PermissionRoleMapping",
      "filter": "IDM_PermissionRoleMapping.roleid ==\"".concat(roleid, "\""),
      "return_fields": "IDM_PermissionRoleMapping.rolename"
    };
  },
  permission_read: function permission_read(data) {
    return {
      db_name: dbName,
      entity: "IDM_PermissionManagement"
    };
  },
  permission_read_by_id: function permission_read_by_id(_id) {
    return {
      db_name: dbName,
      entity: "IDM_PermissionManagement",
      _id: _id !== null && _id !== void 0 ? _id : ""
    };
  },
  permission_delete: function permission_delete(_key) {
    return {
      db_name: dbName,
      metadata_dbname: idm_metadata_dbname,
      entity: "IDM_PermissionManagement",
      filter: "IDM_PermissionManagement._key=='".concat(_key, "'")
    };
  },
  permission_upsert: function permission_upsert(data) {
    var filter = {};

    if (data._key) {
      filter = {
        filter: {
          _key: data._key
        }
      };
    }

    return [_objectSpread2(_objectSpread2({
      db_name: dbName,
      entity: "IDM_PermissionManagement",
      is_metadata: true,
      metadataId: METADATAID,
      metadata_dbname: idm_metadata_dbname
    }, filter), {}, {
      doc: {
        permsnid: data === null || data === void 0 ? void 0 : data.permsnid,
        permsnname: data === null || data === void 0 ? void 0 : data.permsnname,
        status: data === null || data === void 0 ? void 0 : data.status,
        metadataid: IDM_METADATA_ID$1,
        clientid: "clients/540256733",
        projectid: "projects/540346760",
        permsn_repo: data === null || data === void 0 ? void 0 : data.permsn_repo,
        tenantid: data === null || data === void 0 ? void 0 : data.tenantid
      }
    })];
  }
};

var _extraReducers$5;

var _excluded = ["permsn_repo"],
    _excluded2 = ["permsn_repo"];
var PERMISSION_UPSERT = createAsyncThunk("permissionSlice/permission_upsert", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  var payload,
      _ref2,
      rejectWithValue,
      params,
      queriesjson,
      data,
      _args = arguments;

  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          payload = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          _ref2 = _args.length > 1 ? _args[1] : undefined, rejectWithValue = _ref2.rejectWithValue;
          _context.prev = 2;
          console.log("payload", payload);
          params = _objectSpread2({
            _key: payload._key
          }, payload);
          queriesjson = queries$4.permission_upsert(params);
          _context.next = 8;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __UpsertPermission__);

        case 8:
          data = _context.sent;
          return _context.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 12:
          _context.prev = 12;
          _context.t0 = _context["catch"](2);
          return _context.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context.t0.message
          })));

        case 15:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[2, 12]]);
})));
var PERMISSION_DELETE = createAsyncThunk("permissionSlice/permission_delete", /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3, _ref4) {
    var _key, rejectWithValue, queriesjson, data;

    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _key = _ref3._key;
            rejectWithValue = _ref4.rejectWithValue;
            _context2.prev = 2;
            queriesjson = queries$4.permission_delete(_key);
            _context2.next = 6;
            return fetchData({
              body: JSON.stringify(queriesjson)
            }, __DeletePermission__);

          case 6:
            data = _context2.sent;
            return _context2.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
              data: data
            }));

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2["catch"](2);
            return _context2.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
              message: _context2.t0.message
            })));

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[2, 10]]);
  }));

  return function (_x, _x2) {
    return _ref5.apply(this, arguments);
  };
}());
var PERMISSION_READ = createAsyncThunk("permissionSlice/permission_read", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
  var payload,
      _ref7,
      rejectWithValue,
      Roleid,
      getRoledetails,
      Role,
      readqueries,
      data,
      _readqueries,
      _data,
      _args3 = arguments;

  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          payload = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
          _ref7 = _args3.length > 1 ? _args3[1] : undefined, rejectWithValue = _ref7.rejectWithValue;
          _context3.prev = 2;
          Roleid = payload.Roleid, payload.tenantid;
          getRoledetails = queries$4.getRoleDetails(Roleid);
          _context3.next = 7;
          return fetchData({
            body: JSON.stringify(getRoledetails)
          }, __readDocumentUrl__);

        case 7:
          Role = _context3.sent;

          if (!((Role === null || Role === void 0 ? void 0 : Role.result[0]) === "Super Admin Role")) {
            _context3.next = 16;
            break;
          }

          readqueries = queries$4.permission_read(payload);
          _context3.next = 12;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __GetAllClientPermissions__);

        case 12:
          data = _context3.sent;
          return _context3.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 16:
          _readqueries = queries$4.permission_read(payload);
          _context3.next = 19;
          return fetchData({
            body: JSON.stringify(_readqueries)
          }, __GetAllClientPermissions__);

        case 19:
          _data = _context3.sent;
          return _context3.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: _data
          }));

        case 21:
          _context3.next = 26;
          break;

        case 23:
          _context3.prev = 23;
          _context3.t0 = _context3["catch"](2);
          return _context3.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context3.t0.message
          })));

        case 26:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, null, [[2, 23]]);
})));
var PERMISSION_READ_AS_OPTIONS = createAsyncThunk("permissionSlice/permission_read_as_options", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
  var payload,
      _ref9,
      rejectWithValue,
      Roleid,
      getRoledetails,
      Role,
      _data$result,
      readqueries,
      data,
      res,
      _data2$result,
      _readqueries2,
      _data2,
      _res,
      _args4 = arguments;

  return _regeneratorRuntime().wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          payload = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
          _ref9 = _args4.length > 1 ? _args4[1] : undefined, rejectWithValue = _ref9.rejectWithValue;
          _context4.prev = 2;
          Roleid = payload.Roleid, payload.tenantid;
          getRoledetails = queries$4.getRoleDetails(Roleid);
          _context4.next = 7;
          return fetchData({
            body: JSON.stringify(getRoledetails)
          }, __readDocumentUrl__);

        case 7:
          Role = _context4.sent;

          if (!((Role === null || Role === void 0 ? void 0 : Role.result[0]) === "Super Admin Role")) {
            _context4.next = 17;
            break;
          }

          readqueries = queries$4.permission_read(payload);
          _context4.next = 12;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __GetAllClientPermissions__);

        case 12:
          data = _context4.sent;
          res = data === null || data === void 0 ? void 0 : (_data$result = data.result) === null || _data$result === void 0 ? void 0 : _data$result.map(function (item) {
            item.permsn_repo;
                var rest = _objectWithoutProperties(item, _excluded);

            return _objectSpread2(_objectSpread2({}, rest), {}, {
              label: rest === null || rest === void 0 ? void 0 : rest.permsnname,
              value: rest === null || rest === void 0 ? void 0 : rest._id
            });
          });
          return _context4.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: res
          }));

        case 17:
          _readqueries2 = queries$4.permission_read(payload);
          _context4.next = 20;
          return fetchData({
            body: JSON.stringify(_readqueries2)
          }, __GetAllClientPermissions__);

        case 20:
          _data2 = _context4.sent;
          _res = _data2 === null || _data2 === void 0 ? void 0 : (_data2$result = _data2.result) === null || _data2$result === void 0 ? void 0 : _data2$result.map(function (item) {
            item.permsn_repo;
                var rest = _objectWithoutProperties(item, _excluded2);

            return _objectSpread2(_objectSpread2({}, rest), {}, {
              label: rest === null || rest === void 0 ? void 0 : rest.permsnname,
              value: rest === null || rest === void 0 ? void 0 : rest._id
            });
          });
          return _context4.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: _res
          }));

        case 23:
          _context4.next = 28;
          break;

        case 25:
          _context4.prev = 25;
          _context4.t0 = _context4["catch"](2);
          return _context4.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context4.t0.message
          })));

        case 28:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4, null, [[2, 25]]);
})));
var PERMISSION_READ_BY_ID = createAsyncThunk("permissionSlice/permission_read_by_id", /*#__PURE__*/function () {
  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(_ref10, _ref11) {
    var _id, rejectWithValue, readqueries, data;

    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _id = _ref10._id;
            rejectWithValue = _ref11.rejectWithValue;
            _context5.prev = 2;
            readqueries = queries$4.permission_read_by_id(_id);
            _context5.next = 6;
            return fetchData({
              body: JSON.stringify(readqueries)
            }, __GetPermissionByID__);

          case 6:
            data = _context5.sent;
            return _context5.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
              data: data
            }));

          case 10:
            _context5.prev = 10;
            _context5.t0 = _context5["catch"](2);
            return _context5.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
              message: _context5.t0.message
            })));

          case 13:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, null, [[2, 10]]);
  }));

  return function (_x3, _x4) {
    return _ref12.apply(this, arguments);
  };
}());
var permissionSlice = createSlice({
  name: "permissionSlice",
  initialState: {
    permission_upsert: _objectSpread2({}, defaultState.List),
    permission_delete: _objectSpread2({}, defaultState.List),
    permission_read: _objectSpread2({}, defaultState.List),
    permission_read_by_id: _objectSpread2({}, defaultState.List),
    permission_read_as_options: _objectSpread2({}, defaultState.List)
  },
  extraReducers: (_extraReducers$5 = {}, _defineProperty(_extraReducers$5, PERMISSION_UPSERT.fulfilled, function (state, action) {
    state.permission_upsert.loading = false, state.permission_upsert.error = false, state.permission_upsert = action.payload;
  }), _defineProperty(_extraReducers$5, PERMISSION_UPSERT.pending, function (state, action) {
    state.permission_upsert.loading = true, state.permission_upsert.error = false, state.permission_upsert.loading = true;
  }), _defineProperty(_extraReducers$5, PERMISSION_UPSERT.rejected, function (state, action) {
    state.permission_upsert.loading = false, state.permission_upsert.error = true, state.permission_upsert = action.payload;
  }), _defineProperty(_extraReducers$5, PERMISSION_DELETE.fulfilled, function (state, action) {
    state.permission_delete.loading = false, state.permission_delete.error = false, state.permission_delete = action.payload;
  }), _defineProperty(_extraReducers$5, PERMISSION_DELETE.pending, function (state, action) {
    state.permission_delete.loading = true, state.permission_delete.error = false, state.permission_delete.loading = true;
  }), _defineProperty(_extraReducers$5, PERMISSION_DELETE.rejected, function (state, action) {
    state.permission_delete.loading = false, state.permission_delete.error = true, state.permission_delete = action.payload;
  }), _defineProperty(_extraReducers$5, PERMISSION_READ.fulfilled, function (state, action) {
    state.permission_read.loading = false, state.permission_read.error = false, state.permission_read = action.payload;
  }), _defineProperty(_extraReducers$5, PERMISSION_READ.pending, function (state, action) {
    state.permission_read.loading = true, state.permission_read.error = false, state.permission_read.loading = true;
  }), _defineProperty(_extraReducers$5, PERMISSION_READ.rejected, function (state, action) {
    state.permission_read.loading = false, state.permission_read.error = true, state.permission_read = action.payload;
  }), _defineProperty(_extraReducers$5, PERMISSION_READ_BY_ID.fulfilled, function (state, action) {
    state.permission_read_by_id.loading = false, state.permission_read_by_id.error = false, state.permission_read_by_id = action.payload;
  }), _defineProperty(_extraReducers$5, PERMISSION_READ_BY_ID.pending, function (state, action) {
    state.permission_read_by_id.loading = true, state.permission_read_by_id.error = false, state.permission_read_by_id.loading = true;
  }), _defineProperty(_extraReducers$5, PERMISSION_READ_BY_ID.rejected, function (state, action) {
    state.permission_read_by_id.loading = false, state.permission_read_by_id.error = true, state.permission_read_by_id = action.payload;
  }), _defineProperty(_extraReducers$5, PERMISSION_READ_AS_OPTIONS.fulfilled, function (state, action) {
    state.permission_read_as_options.loading = false, state.permission_read_as_options.error = false, state.permission_read_as_options = action.payload;
  }), _defineProperty(_extraReducers$5, PERMISSION_READ_AS_OPTIONS.pending, function (state, action) {
    state.permission_read_as_options.loading = true, state.permission_read_as_options.error = false, state.permission_read_as_options.loading = true;
  }), _defineProperty(_extraReducers$5, PERMISSION_READ_AS_OPTIONS.rejected, function (state, action) {
    state.permission_read_as_options.loading = false, state.permission_read_as_options.error = true, state.permission_read_as_options = action.payload;
  }), _extraReducers$5)
});
var permissionActions = {
  PERMISSION_READ: PERMISSION_READ,
  PERMISSION_READ_BY_ID: PERMISSION_READ_BY_ID,
  PERMISSION_DELETE: PERMISSION_DELETE,
  PERMISSION_UPSERT: PERMISSION_UPSERT,
  PERMISSION_READ_AS_OPTIONS: PERMISSION_READ_AS_OPTIONS
};
var permissionSlice$1 = permissionSlice.reducer;

var queries$3 = {
  person_read: function person_read(data) {
    return {
      db_name: dbName,
      entity: "Person",
      filter: "Person.activestatus==true",
      sort: "Person.createddate",
      return_fields: "merge(Person,{name:(for nam in HumanNameMaster filter nam._id in Person.name return merge(nam,{use:document(nam.use),suffix:document(nam.suffix),prefix:document(nam.prefix)}))},{gender:document(Person.gender)},{telecom:(for con in ContactPointMaster filter con._id in Person.telecom return merge(con,{use:document(con.use),rank:document(con.rank)}))},{photo:document(Person.photo)},{address:document(Person.address)},{identifier:(for iden in IdentifierMaster filter iden._id in Person.identifier return merge(iden,{user:document(iden.user),Type:document(iden.Type)}))},{OrgID:document(Person.OrgID)},{orgType:document(Person.orgType)})"
    };
  },
  person_delete: function person_delete(data) {
    var filter = {};

    if (data._id) {
      filter = {
        filter: {
          _id: data._id
        }
      };
    }

    return [_objectSpread2({
      db_name: dbName,
      entity: "Person",
      // "is_metadata": true,
      metadataId: METADATAID
    }, filter)];
  },
  person_upsert: function person_upsert(data) {
    var filter = {};
    var teneteid = localStorage.getItem("tenentid");

    if (data._key) {
      filter = {
        filter: {
          _key: data._key
        }
      };
    }

    delete data._key;
    data[tenantid] = teneteid;
    return [_objectSpread2(_objectSpread2({
      db_name: dbName,
      entity: "Person",
      is_metadata: true,
      metadataId: METADATAID
    }, filter), {}, {
      doc: _objectSpread2({}, data)
    })];
  },
  contact_system_master: function contact_system_master(data) {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='CONTACTSYSTEM' && CodingMaster.activestatus==true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','code','display','Type')"
    };
  },
  entity_name_master: function entity_name_master(data) {
    return {
      db_name: dbName,
      entity: "Organization",
      filter: "Organization.activestatus==true && lower(first(document(Organization.OrgType)[*].display)) == '".concat(data, "'"),
      return_fields: "{_id:Organization._id,_key:Organization._key,id:Organization.id,name:Organization.name,alias:Organization.alias}"
    };
  },
  entity_type_master: function entity_type_master(data) {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='ORGTYPE' && CodingMaster.activestatus==true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','code','display','Type')"
    };
  },
  gender_master: function gender_master(data) {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='GENDER' && CodingMaster.activestatus==true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','code','display','Type')"
    };
  },
  id_type_master: function id_type_master(data) {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='ALTERNATEIDTYPE' && CodingMaster.activestatus==true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','code','display','Type')"
    };
  },
  prefix_master: function prefix_master(data) {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='NAMEPREFIX' && CodingMaster.activestatus==true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','code','display','Type')"
    };
  },
  priority_master: function priority_master(data) {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='PRIORITY' && CodingMaster.activestatus==true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','code','display','Type')"
    };
  },
  surffix_master: function surffix_master(data) {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='NAMESUFFIX' && CodingMaster.activestatus==true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','code','display','Type')"
    };
  },
  use_master: function use_master(data) {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='USE' && CodingMaster.activestatus==true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','code','display','Type')"
    };
  },
  single_read_person: function single_read_person(data) {
    return {
      db_name: dbName,
      entity: "Person",
      filter: " Person._key=='".concat(data._key, "' && Person.activestatus==true"),
      return_fields: "merge(Person,{name:(for nam in HumanNameMaster filter nam._id in Person.name return merge(nam,{use:document(nam.use),suffix:document(nam.suffix),prefix:document(nam.prefix)}))},{gender:document(Person.gender)},{telecom:(for con in ContactPointMaster filter con._id in Person.telecom return merge(con,{use:document(con.use),rank:document(con.rank)}))},{photo:document(Person.photo)},{address:(for add in AddressMaster filter add._id in Person.address return merge(add,{use:document(add.use),Type:document(add.Type),city:document(add.city),district:document(add.district),state:document(add.state),country:document(add.country),postalCode:document(add.postalCode)}))},{identifier:(for iden in IdentifierMaster filter iden._id in Person.identifier return merge(iden,{user:document(iden.user),Type:document(iden.Type),period:document(iden.period)}))},{OrgID:document(Person.OrgID)},{orgType:document(Person.orgType)})"
    }; // return {
    //   "db_name": dbName,
    //   "entity": "Person",
    //   "filter": `Person.activestatus==true && Person._key=='${data._key}'`,
    //   "return_fields": "merge(Person,{name:(for nam in HumanNameMaster filter nam._id in Person.name return merge(nam,{use:document(nam.use),suffix:document(nam.suffix),prefix:document(nam.prefix)}))},{gender:document(Person.gender)},{telecom:(for con in ContactPointMaster filter con._id in Person.telecom return merge(con,{use:document(con.use),rank:document(con.rank),system:document(con.system)}))},{photo:document(Person.photo)},{address:document(Person.address)},{identifier:(for iden in IdentifierMaster filter iden._id in Person.identifier return merge(iden,{user:document(iden.user),Type:document(iden.Type)}))},{OrgID:document(Person.OrgID)},{orgType:document(Person.orgType)})"
    // }
  },
  orgname: function orgname(data) {
    return {
      db_name: dbName,
      entity: "Organization",
      sort: "Organization.OrgName",
      filter: "Organization.activestatus==true",
      return_fields: "{name: Organization.OrgName, id:Organization._id}"
    };
  },
  facilityList: function facilityList(data) {
    return {
      db_name: dbName,
      entity: "Facility",
      sort: "Facility.FacName",
      filter: "Facility.activestatus==true && Facility.OrgCode == '".concat(data, "'"),
      return_fields: "{name: Facility.FacName, id:Facility._id}"
    };
  },
  patientcategory: function patientcategory(data) {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='PATIENTCATEGORY' && CodingMaster.activestatus==true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','code','display','Type')"
    };
  },
  mealtype: function mealtype(data) {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='MEALTYPE' && CodingMaster.activestatus==true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','code','display','Type')"
    };
  },
  day: function day(data) {
    return {
      db_name: dbName,
      entity: "CodingMaster",
      filter: "CodingMaster.Type=='DAY' && CodingMaster.activestatus==true",
      return_fields: "KEEP(CodingMaster,'_id','id','_key','code','display','Type')"
    };
  }
}; // person_read: (data) => {
//   let filter = {};
//   return {
//     "db_name": dbName,
//     "entity": "Person",
//     "filter": "Person.activestatus==true",
//     "limit": {
//     "count": 10,
//     "offset": 0
//     },
//     "return_fields": "merge(Person,{name:(for nam in HumanNameMaster filter nam._id in Person.name return merge(nam,{use:document(nam.use),suffix:document(nam.suffix),prefix:document(nam.prefix)}))},{gender:document(Person.gender)},{telecom:(for con in ContactPointMaster filter con._id in Person.telecom return merge(con,{use:document(con.use),rank:document(con.rank)}))},{photo:document(Person.photo)},{address:document(Person.address)},{identifier:(for iden in IdentifierMaster filter iden._id in Person.identifier return merge(iden,{user:document(iden.user),Type:document(iden.Type)}))},{OrgID:document(Person.OrgID)},{orgType:document(Person.orgType)})",
//     "sort": "Person.createddate"
//     }
// },

var _extraReducers$4;
var PATIENTCATEGORY = createAsyncThunk("personSlice/patientcategory", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  var _ref2,
      rejectWithValue,
      queriesjson,
      data,
      _args = arguments;

  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _ref2 = _args.length > 1 ? _args[1] : undefined, rejectWithValue = _ref2.rejectWithValue;
          _context.prev = 2;
          queriesjson = queries$3.patientcategory();
          _context.next = 6;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __readDocumentUrl__);

        case 6:
          data = _context.sent;
          return _context.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data.result
          }));

        case 10:
          _context.prev = 10;
          _context.t0 = _context["catch"](2);
          return _context.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context.t0.message
          })));

        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[2, 10]]);
})));
var MEALTYPE = createAsyncThunk("personSlice/mealtype", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
  var _ref4,
      rejectWithValue,
      queriesjson,
      data,
      _args2 = arguments;

  return _regeneratorRuntime().wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _ref4 = _args2.length > 1 ? _args2[1] : undefined, rejectWithValue = _ref4.rejectWithValue;
          _context2.prev = 2;
          queriesjson = queries$3.mealtype();
          _context2.next = 6;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __readDocumentUrl__);

        case 6:
          data = _context2.sent;
          return _context2.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data.result
          }));

        case 10:
          _context2.prev = 10;
          _context2.t0 = _context2["catch"](2);
          return _context2.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context2.t0.message
          })));

        case 13:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, null, [[2, 10]]);
})));
var DAYLIST = createAsyncThunk("personSlice/day", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
  var _ref6,
      rejectWithValue,
      queriesjson,
      data,
      _args3 = arguments;

  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _ref6 = _args3.length > 1 ? _args3[1] : undefined, rejectWithValue = _ref6.rejectWithValue;
          _context3.prev = 2;
          queriesjson = queries$3.day();
          _context3.next = 6;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __readDocumentUrl__);

        case 6:
          data = _context3.sent;
          return _context3.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data.result
          }));

        case 10:
          _context3.prev = 10;
          _context3.t0 = _context3["catch"](2);
          return _context3.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context3.t0.message
          })));

        case 13:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, null, [[2, 10]]);
})));
var ORGNAME = createAsyncThunk("personSlice/orgname", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
  var _ref8,
      rejectWithValue,
      queriesjson,
      data,
      _args4 = arguments;

  return _regeneratorRuntime().wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _ref8 = _args4.length > 1 ? _args4[1] : undefined, rejectWithValue = _ref8.rejectWithValue;
          _context4.prev = 2;
          queriesjson = queries$3.orgname();
          _context4.next = 6;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __readDocumentUrl__);

        case 6:
          data = _context4.sent;
          return _context4.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data.result
          }));

        case 10:
          _context4.prev = 10;
          _context4.t0 = _context4["catch"](2);
          return _context4.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context4.t0.message
          })));

        case 13:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4, null, [[2, 10]]);
})));
var FACILITYLIST = createAsyncThunk("personSlice/facilityList", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
  var payload,
      _ref10,
      rejectWithValue,
      queriesjson,
      data,
      _args5 = arguments;

  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          payload = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
          _ref10 = _args5.length > 1 ? _args5[1] : undefined, rejectWithValue = _ref10.rejectWithValue;
          _context5.prev = 2;
          console.log(payload);
          queriesjson = queries$3.facilityList(payload);
          _context5.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __readDocumentUrl__);

        case 7:
          data = _context5.sent;
          return _context5.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data.result
          }));

        case 11:
          _context5.prev = 11;
          _context5.t0 = _context5["catch"](2);
          return _context5.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context5.t0.message
          })));

        case 14:
        case "end":
          return _context5.stop();
      }
    }
  }, _callee5, null, [[2, 11]]);
})));
var PERSON_UPSERT$1 = createAsyncThunk("personSlice/person_upsert", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
  var payload,
      _ref12,
      rejectWithValue,
      params,
      queriesjson,
      data,
      _args6 = arguments;

  return _regeneratorRuntime().wrap(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          payload = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
          _ref12 = _args6.length > 1 ? _args6[1] : undefined, rejectWithValue = _ref12.rejectWithValue;
          _context6.prev = 2;
          params = _objectSpread2({
            _key: payload._key
          }, payload);
          queriesjson = queries$3.person_upsert(params);
          _context6.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __uspsertUrl__);

        case 7:
          data = _context6.sent;
          return _context6.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 11:
          _context6.prev = 11;
          _context6.t0 = _context6["catch"](2);
          return _context6.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context6.t0.message
          })));

        case 14:
        case "end":
          return _context6.stop();
      }
    }
  }, _callee6, null, [[2, 11]]);
})));
var PERSON_DELETE = createAsyncThunk("personSlice/person_delete", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
  var payload,
      _ref14,
      rejectWithValue,
      params,
      queriesjson,
      data,
      _args7 = arguments;

  return _regeneratorRuntime().wrap(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          payload = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
          _ref14 = _args7.length > 1 ? _args7[1] : undefined, rejectWithValue = _ref14.rejectWithValue;
          _context7.prev = 2;
          params = _objectSpread2({
            _id: payload._id
          }, payload);
          queriesjson = queries$3.person_delete(params);
          _context7.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __deleteUrl__);

        case 7:
          data = _context7.sent;
          return _context7.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 11:
          _context7.prev = 11;
          _context7.t0 = _context7["catch"](2);
          return _context7.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context7.t0.message
          })));

        case 14:
        case "end":
          return _context7.stop();
      }
    }
  }, _callee7, null, [[2, 11]]);
})));
var PERSON_READ = createAsyncThunk("personSlice/person_read", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
  var payload,
      _ref16,
      rejectWithValue,
      readqueries,
      data,
      _args8 = arguments;

  return _regeneratorRuntime().wrap(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          payload = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
          _ref16 = _args8.length > 1 ? _args8[1] : undefined, rejectWithValue = _ref16.rejectWithValue;
          _context8.prev = 2;
          readqueries = queries$3.person_read(payload);
          _context8.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context8.sent;
          return _context8.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data.result
          }));

        case 10:
          _context8.prev = 10;
          _context8.t0 = _context8["catch"](2);
          return _context8.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context8.t0.message
          })));

        case 13:
        case "end":
          return _context8.stop();
      }
    }
  }, _callee8, null, [[2, 10]]);
}))); //single read person

var SINGLE_PERSON_READ = createAsyncThunk("personSlice/single_read_person", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
  var payload,
      _ref18,
      rejectWithValue,
      readqueries,
      data,
      _args9 = arguments;

  return _regeneratorRuntime().wrap(function _callee9$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          payload = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};
          _ref18 = _args9.length > 1 ? _args9[1] : undefined, rejectWithValue = _ref18.rejectWithValue;
          _context9.prev = 2;
          readqueries = queries$3.single_read_person(payload);
          _context9.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context9.sent;
          return _context9.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data.result
          }));

        case 10:
          _context9.prev = 10;
          _context9.t0 = _context9["catch"](2);
          return _context9.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context9.t0.message
          })));

        case 13:
        case "end":
          return _context9.stop();
      }
    }
  }, _callee9, null, [[2, 10]]);
}))); //contact_system_master

var CONTACTSYSTEMMASTER = createAsyncThunk("personSlice/contact_system_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
  var payload,
      _ref20,
      rejectWithValue,
      readqueries,
      data,
      arry,
      _args10 = arguments;

  return _regeneratorRuntime().wrap(function _callee10$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          payload = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};
          _ref20 = _args10.length > 1 ? _args10[1] : undefined, rejectWithValue = _ref20.rejectWithValue;
          _context10.prev = 2;
          readqueries = queries$3.contact_system_master(payload);
          _context10.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context10.sent;
          arry = [];
          data.result.map(function (val) {
            arry.push(_objectSpread2(_objectSpread2({}, val), {}, {
              label: val.display,
              value: val._id
            }));
          });
          return _context10.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context10.prev = 12;
          _context10.t0 = _context10["catch"](2);
          return _context10.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context10.t0.message
          })));

        case 15:
        case "end":
          return _context10.stop();
      }
    }
  }, _callee10, null, [[2, 12]]);
}))); //entity_name_master

var ENTITYNAMEMASTER = createAsyncThunk("personSlice/entity_name_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
  var payload,
      _ref22,
      rejectWithValue,
      readqueries,
      data,
      arry,
      _args11 = arguments;

  return _regeneratorRuntime().wrap(function _callee11$(_context11) {
    while (1) {
      switch (_context11.prev = _context11.next) {
        case 0:
          payload = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};
          _ref22 = _args11.length > 1 ? _args11[1] : undefined, rejectWithValue = _ref22.rejectWithValue;
          _context11.prev = 2;
          readqueries = queries$3.entity_name_master(payload);
          _context11.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context11.sent;
          arry = [];
          data.result.map(function (val) {
            arry.push(_objectSpread2(_objectSpread2({}, val), {}, {
              label: val.name,
              value: val._id
            }));
          });
          return _context11.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context11.prev = 12;
          _context11.t0 = _context11["catch"](2);
          return _context11.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context11.t0.message
          })));

        case 15:
        case "end":
          return _context11.stop();
      }
    }
  }, _callee11, null, [[2, 12]]);
}))); //entity_type_master

var ENTITYTYPEMASTER = createAsyncThunk("personSlice/entity_type_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
  var payload,
      _ref24,
      rejectWithValue,
      readqueries,
      data,
      arry,
      _args12 = arguments;

  return _regeneratorRuntime().wrap(function _callee12$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          payload = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};
          _ref24 = _args12.length > 1 ? _args12[1] : undefined, rejectWithValue = _ref24.rejectWithValue;
          _context12.prev = 2;
          readqueries = queries$3.entity_type_master(payload);
          _context12.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context12.sent;
          arry = [];
          data.result.map(function (val) {
            arry.push(_objectSpread2(_objectSpread2({}, val), {}, {
              label: val.display,
              value: val._id
            }));
          });
          return _context12.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context12.prev = 12;
          _context12.t0 = _context12["catch"](2);
          return _context12.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context12.t0.message
          })));

        case 15:
        case "end":
          return _context12.stop();
      }
    }
  }, _callee12, null, [[2, 12]]);
}))); //gender_master

var GENDERMASTER = createAsyncThunk("personSlice/gender_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
  var payload,
      _ref26,
      rejectWithValue,
      readqueries,
      data,
      arry,
      _args13 = arguments;

  return _regeneratorRuntime().wrap(function _callee13$(_context13) {
    while (1) {
      switch (_context13.prev = _context13.next) {
        case 0:
          payload = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};
          _ref26 = _args13.length > 1 ? _args13[1] : undefined, rejectWithValue = _ref26.rejectWithValue;
          _context13.prev = 2;
          readqueries = queries$3.gender_master(payload);
          _context13.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context13.sent;
          arry = [];
          data.result.map(function (val) {
            arry.push(_objectSpread2(_objectSpread2({}, val), {}, {
              label: val.display,
              value: val._id
            }));
          });
          return _context13.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context13.prev = 12;
          _context13.t0 = _context13["catch"](2);
          return _context13.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context13.t0.message
          })));

        case 15:
        case "end":
          return _context13.stop();
      }
    }
  }, _callee13, null, [[2, 12]]);
}))); //id_type_master

var IDTYPEMASTER = createAsyncThunk("personSlice/id_type_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
  var payload,
      _ref28,
      rejectWithValue,
      readqueries,
      data,
      arry,
      _args14 = arguments;

  return _regeneratorRuntime().wrap(function _callee14$(_context14) {
    while (1) {
      switch (_context14.prev = _context14.next) {
        case 0:
          payload = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};
          _ref28 = _args14.length > 1 ? _args14[1] : undefined, rejectWithValue = _ref28.rejectWithValue;
          _context14.prev = 2;
          readqueries = queries$3.id_type_master(payload);
          _context14.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context14.sent;
          arry = [];
          data.result.map(function (val) {
            arry.push(_objectSpread2(_objectSpread2({}, val), {}, {
              label: val.display,
              value: val._id
            }));
          });
          return _context14.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context14.prev = 12;
          _context14.t0 = _context14["catch"](2);
          return _context14.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context14.t0.message
          })));

        case 15:
        case "end":
          return _context14.stop();
      }
    }
  }, _callee14, null, [[2, 12]]);
}))); //prefix_master

var PREFIXMASTER = createAsyncThunk("personSlice/prefix_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
  var payload,
      _ref30,
      rejectWithValue,
      readqueries,
      data,
      arry,
      _args15 = arguments;

  return _regeneratorRuntime().wrap(function _callee15$(_context15) {
    while (1) {
      switch (_context15.prev = _context15.next) {
        case 0:
          payload = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {};
          _ref30 = _args15.length > 1 ? _args15[1] : undefined, rejectWithValue = _ref30.rejectWithValue;
          _context15.prev = 2;
          readqueries = queries$3.prefix_master(payload);
          _context15.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context15.sent;
          arry = [];
          data.result.map(function (val) {
            arry.push(_objectSpread2(_objectSpread2({}, val), {}, {
              label: val.display,
              value: val._id
            }));
          });
          return _context15.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context15.prev = 12;
          _context15.t0 = _context15["catch"](2);
          return _context15.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context15.t0.message
          })));

        case 15:
        case "end":
          return _context15.stop();
      }
    }
  }, _callee15, null, [[2, 12]]);
}))); //priority_master

var PRIORITYMASTER = createAsyncThunk("personSlice/priority_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
  var payload,
      _ref32,
      rejectWithValue,
      readqueries,
      data,
      arry,
      _args16 = arguments;

  return _regeneratorRuntime().wrap(function _callee16$(_context16) {
    while (1) {
      switch (_context16.prev = _context16.next) {
        case 0:
          payload = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {};
          _ref32 = _args16.length > 1 ? _args16[1] : undefined, rejectWithValue = _ref32.rejectWithValue;
          _context16.prev = 2;
          readqueries = queries$3.priority_master(payload);
          _context16.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context16.sent;
          arry = [];
          data.result.map(function (val) {
            arry.push(_objectSpread2(_objectSpread2({}, val), {}, {
              label: val.display,
              value: val._id
            }));
          });
          return _context16.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context16.prev = 12;
          _context16.t0 = _context16["catch"](2);
          return _context16.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context16.t0.message
          })));

        case 15:
        case "end":
          return _context16.stop();
      }
    }
  }, _callee16, null, [[2, 12]]);
}))); //surffix_master

var SURFFIXMASTER = createAsyncThunk("personSlice/surffix_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
  var payload,
      _ref34,
      rejectWithValue,
      readqueries,
      data,
      arry,
      _args17 = arguments;

  return _regeneratorRuntime().wrap(function _callee17$(_context17) {
    while (1) {
      switch (_context17.prev = _context17.next) {
        case 0:
          payload = _args17.length > 0 && _args17[0] !== undefined ? _args17[0] : {};
          _ref34 = _args17.length > 1 ? _args17[1] : undefined, rejectWithValue = _ref34.rejectWithValue;
          _context17.prev = 2;
          readqueries = queries$3.surffix_master(payload);
          _context17.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context17.sent;
          arry = [];
          data.result.map(function (val) {
            arry.push(_objectSpread2(_objectSpread2({}, val), {}, {
              label: val.display,
              value: val._id
            }));
          });
          return _context17.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context17.prev = 12;
          _context17.t0 = _context17["catch"](2);
          return _context17.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context17.t0.message
          })));

        case 15:
        case "end":
          return _context17.stop();
      }
    }
  }, _callee17, null, [[2, 12]]);
}))); //use_master

var USEMASTER = createAsyncThunk("personSlice/use_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
  var payload,
      _ref36,
      rejectWithValue,
      readqueries,
      data,
      arry,
      _args18 = arguments;

  return _regeneratorRuntime().wrap(function _callee18$(_context18) {
    while (1) {
      switch (_context18.prev = _context18.next) {
        case 0:
          payload = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};
          _ref36 = _args18.length > 1 ? _args18[1] : undefined, rejectWithValue = _ref36.rejectWithValue;
          _context18.prev = 2;
          readqueries = queries$3.use_master(payload);
          _context18.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context18.sent;
          arry = [];
          data.result.map(function (val) {
            arry.push(_objectSpread2(_objectSpread2({}, val), {}, {
              label: val.display,
              value: val._id
            }));
          });
          return _context18.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context18.prev = 12;
          _context18.t0 = _context18["catch"](2);
          return _context18.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context18.t0.message
          })));

        case 15:
        case "end":
          return _context18.stop();
      }
    }
  }, _callee18, null, [[2, 12]]);
})));
var personSlice = createSlice({
  name: "personSlice",
  initialState: {
    patientcategory: _objectSpread2({}, defaultState.List),
    day: _objectSpread2({}, defaultState.List),
    mealtype: _objectSpread2({}, defaultState.List),
    facilityList: _objectSpread2({}, defaultState.List),
    orgname: _objectSpread2({}, defaultState.List),
    person_upsert: _objectSpread2({}, defaultState.List),
    person_delete: _objectSpread2({}, defaultState.List),
    person_read: _objectSpread2({}, defaultState.List),
    contact_system_master: _objectSpread2({}, defaultState.List),
    entity_name_master: _objectSpread2({}, defaultState.List),
    entity_type_master: _objectSpread2({}, defaultState.List),
    gender_master: _objectSpread2({}, defaultState.List),
    id_type_master: _objectSpread2({}, defaultState.List),
    prefix_master: _objectSpread2({}, defaultState.List),
    priority_master: _objectSpread2({}, defaultState.List),
    surffix_master: _objectSpread2({}, defaultState.List),
    use_master: _objectSpread2({}, defaultState.List),
    single_read_person: _objectSpread2({}, defaultState.List)
  },
  extraReducers: (_extraReducers$4 = {}, _defineProperty(_extraReducers$4, PATIENTCATEGORY.fulfilled, function (state, action) {
    state.patientcategory.loading = false, state.patientcategory.error = false, state.patientcategory = action.payload;
  }), _defineProperty(_extraReducers$4, PATIENTCATEGORY.pending, function (state, action) {
    state.patientcategory.loading = true, state.patientcategory.error = false, state.patientcategory.loading = true;
  }), _defineProperty(_extraReducers$4, PATIENTCATEGORY.rejected, function (state, action) {
    state.orgname.loading = false, state.orgname.error = true, state.orgname = action.payload;
  }), _defineProperty(_extraReducers$4, MEALTYPE.fulfilled, function (state, action) {
    state.mealtype.loading = false, state.mealtype.error = false, state.mealtype = action.payload;
  }), _defineProperty(_extraReducers$4, MEALTYPE.pending, function (state, action) {
    state.mealtype.loading = true, state.mealtype.error = false, state.mealtype.loading = true;
  }), _defineProperty(_extraReducers$4, MEALTYPE.rejected, function (state, action) {
    state.mealtype.loading = false, state.mealtype.error = true, state.mealtype = action.payload;
  }), _defineProperty(_extraReducers$4, DAYLIST.fulfilled, function (state, action) {
    state.day.loading = false, state.day.error = false, state.day = action.payload;
  }), _defineProperty(_extraReducers$4, DAYLIST.pending, function (state, action) {
    state.day.loading = true, state.day.error = false, state.day.loading = true;
  }), _defineProperty(_extraReducers$4, DAYLIST.rejected, function (state, action) {
    state.day.loading = false, state.day.error = true, state.day = action.payload;
  }), _defineProperty(_extraReducers$4, ORGNAME.fulfilled, function (state, action) {
    state.orgname.loading = false, state.orgname.error = false, state.orgname = action.payload;
  }), _defineProperty(_extraReducers$4, ORGNAME.pending, function (state, action) {
    state.orgname.loading = true, state.orgname.error = false, state.orgname.loading = true;
  }), _defineProperty(_extraReducers$4, ORGNAME.rejected, function (state, action) {
    state.orgname.loading = false, state.orgname.error = true, state.orgname = action.payload;
  }), _defineProperty(_extraReducers$4, FACILITYLIST.fulfilled, function (state, action) {
    state.facilityList.loading = false, state.facilityList.error = false, state.facilityList = action.payload;
  }), _defineProperty(_extraReducers$4, FACILITYLIST.pending, function (state, action) {
    state.facilityList.loading = true, state.facilityList.error = false, state.facilityList.loading = true;
  }), _defineProperty(_extraReducers$4, FACILITYLIST.rejected, function (state, action) {
    state.facilityList.loading = false, state.facilityList.error = true, state.facilityList = action.payload;
  }), _defineProperty(_extraReducers$4, PERSON_UPSERT$1.fulfilled, function (state, action) {
    state.person_upsert.loading = false, state.person_upsert.error = false, state.person_upsert = action.payload;
  }), _defineProperty(_extraReducers$4, PERSON_UPSERT$1.pending, function (state, action) {
    state.person_upsert.loading = true, state.person_upsert.error = false, state.person_upsert.loading = true;
  }), _defineProperty(_extraReducers$4, PERSON_UPSERT$1.rejected, function (state, action) {
    state.person_upsert.loading = false, state.person_upsert.error = true, state.person_upsert = action.payload;
  }), _defineProperty(_extraReducers$4, PERSON_DELETE.fulfilled, function (state, action) {
    state.person_delete.loading = false, state.person_delete.error = false, state.person_delete = action.payload;
  }), _defineProperty(_extraReducers$4, PERSON_DELETE.pending, function (state, action) {
    state.person_delete.loading = true, state.person_delete.error = false, state.person_delete.loading = true;
  }), _defineProperty(_extraReducers$4, PERSON_DELETE.rejected, function (state, action) {
    state.person_delete.loading = false, state.person_delete.error = true, state.person_delete = action.payload;
  }), _defineProperty(_extraReducers$4, PERSON_READ.fulfilled, function (state, action) {
    state.person_read.loading = false, state.person_read.error = false, state.person_read = action.payload;
  }), _defineProperty(_extraReducers$4, PERSON_READ.pending, function (state, action) {
    state.person_read.loading = true, state.person_read.error = false, state.person_read.loading = true;
  }), _defineProperty(_extraReducers$4, PERSON_READ.rejected, function (state, action) {
    state.person_read.loading = false, state.person_read.error = true, state.person_read = action.payload;
  }), _defineProperty(_extraReducers$4, CONTACTSYSTEMMASTER.fulfilled, function (state, action) {
    state.contact_system_master.loading = false, state.contact_system_master.error = false, state.contact_system_master = action.payload;
  }), _defineProperty(_extraReducers$4, CONTACTSYSTEMMASTER.pending, function (state, action) {
    state.contact_system_master.loading = true, state.contact_system_master.error = false, state.contact_system_master.loading = true;
  }), _defineProperty(_extraReducers$4, CONTACTSYSTEMMASTER.rejected, function (state, action) {
    state.contact_system_master.loading = false, state.contact_system_master.error = true, state.contact_system_master = action.payload;
  }), _defineProperty(_extraReducers$4, ENTITYNAMEMASTER.fulfilled, function (state, action) {
    state.entity_name_master.loading = false, state.entity_name_master.error = false, state.entity_name_master = action.payload;
  }), _defineProperty(_extraReducers$4, ENTITYNAMEMASTER.pending, function (state, action) {
    state.entity_name_master.loading = true, state.entity_name_master.error = false, state.entity_name_master.loading = true;
  }), _defineProperty(_extraReducers$4, ENTITYNAMEMASTER.rejected, function (state, action) {
    state.entity_name_master.loading = false, state.entity_name_master.error = true, state.entity_name_master = action.payload;
  }), _defineProperty(_extraReducers$4, ENTITYTYPEMASTER.fulfilled, function (state, action) {
    state.entity_type_master.loading = false, state.entity_type_master.error = false, state.entity_type_master = action.payload;
  }), _defineProperty(_extraReducers$4, ENTITYTYPEMASTER.pending, function (state, action) {
    state.entity_type_master.loading = true, state.entity_type_master.error = false, state.entity_type_master.loading = true;
  }), _defineProperty(_extraReducers$4, ENTITYTYPEMASTER.rejected, function (state, action) {
    state.entity_type_master.loading = false, state.entity_type_master.error = true, state.entity_type_master = action.payload;
  }), _defineProperty(_extraReducers$4, GENDERMASTER.fulfilled, function (state, action) {
    state.gender_master.loading = false, state.gender_master.error = false, state.gender_master = action.payload;
  }), _defineProperty(_extraReducers$4, GENDERMASTER.pending, function (state, action) {
    state.gender_master.loading = true, state.gender_master.error = false, state.gender_master.loading = true;
  }), _defineProperty(_extraReducers$4, GENDERMASTER.rejected, function (state, action) {
    state.gender_master.loading = false, state.gender_master.error = true, state.gender_master = action.payload;
  }), _defineProperty(_extraReducers$4, IDTYPEMASTER.fulfilled, function (state, action) {
    state.id_type_master.loading = false, state.id_type_master.error = false, state.id_type_master = action.payload;
  }), _defineProperty(_extraReducers$4, IDTYPEMASTER.pending, function (state, action) {
    state.id_type_master.loading = true, state.id_type_master.error = false, state.id_type_master.loading = true;
  }), _defineProperty(_extraReducers$4, IDTYPEMASTER.rejected, function (state, action) {
    state.id_type_master.loading = false, state.id_type_master.error = true, state.id_type_master = action.payload;
  }), _defineProperty(_extraReducers$4, PREFIXMASTER.fulfilled, function (state, action) {
    state.prefix_master.loading = false, state.prefix_master.error = false, state.prefix_master = action.payload;
  }), _defineProperty(_extraReducers$4, PREFIXMASTER.pending, function (state, action) {
    state.prefix_master.loading = true, state.prefix_master.error = false, state.prefix_master.loading = true;
  }), _defineProperty(_extraReducers$4, PREFIXMASTER.rejected, function (state, action) {
    state.prefix_master.loading = false, state.prefix_master.error = true, state.prefix_master = action.payload;
  }), _defineProperty(_extraReducers$4, PRIORITYMASTER.fulfilled, function (state, action) {
    state.priority_master.loading = false, state.priority_master.error = false, state.priority_master = action.payload;
  }), _defineProperty(_extraReducers$4, PRIORITYMASTER.pending, function (state, action) {
    state.priority_master.loading = true, state.priority_master.error = false, state.priority_master.loading = true;
  }), _defineProperty(_extraReducers$4, PRIORITYMASTER.rejected, function (state, action) {
    state.priority_master.loading = false, state.priority_master.error = true, state.priority_master = action.payload;
  }), _defineProperty(_extraReducers$4, SURFFIXMASTER.fulfilled, function (state, action) {
    state.surffix_master.loading = false, state.surffix_master.error = false, state.surffix_master = action.payload;
  }), _defineProperty(_extraReducers$4, SURFFIXMASTER.pending, function (state, action) {
    state.surffix_master.loading = true, state.surffix_master.error = false, state.surffix_master.loading = true;
  }), _defineProperty(_extraReducers$4, SURFFIXMASTER.rejected, function (state, action) {
    state.surffix_master.loading = false, state.surffix_master.error = true, state.surffix_master = action.payload;
  }), _defineProperty(_extraReducers$4, USEMASTER.fulfilled, function (state, action) {
    state.use_master.loading = false, state.use_master.error = false, state.use_master = action.payload;
  }), _defineProperty(_extraReducers$4, USEMASTER.pending, function (state, action) {
    state.use_master.loading = true, state.use_master.error = false, state.use_master.loading = true;
  }), _defineProperty(_extraReducers$4, USEMASTER.rejected, function (state, action) {
    state.use_master.loading = false, state.use_master.error = true, state.use_master = action.payload;
  }), _defineProperty(_extraReducers$4, SINGLE_PERSON_READ.fulfilled, function (state, action) {
    state.single_read_person.loading = false, state.single_read_person.error = false, state.single_read_person = action.payload;
  }), _defineProperty(_extraReducers$4, SINGLE_PERSON_READ.pending, function (state, action) {
    state.single_read_person.loading = true, state.single_read_person.error = false, state.single_read_person.loading = true;
  }), _defineProperty(_extraReducers$4, SINGLE_PERSON_READ.rejected, function (state, action) {
    state.single_read_person.loading = false, state.single_read_person.error = true, state.single_read_person = action.payload;
  }), _extraReducers$4)
});
var personActions$1 = {
  PERSON_READ: PERSON_READ,
  PERSON_DELETE: PERSON_DELETE,
  PERSON_UPSERT: PERSON_UPSERT$1,
  CONTACTSYSTEMMASTER: CONTACTSYSTEMMASTER,
  ENTITYNAMEMASTER: ENTITYNAMEMASTER,
  ENTITYTYPEMASTER: ENTITYTYPEMASTER,
  GENDERMASTER: GENDERMASTER,
  IDTYPEMASTER: IDTYPEMASTER,
  PREFIXMASTER: PREFIXMASTER,
  PRIORITYMASTER: PRIORITYMASTER,
  SURFFIXMASTER: SURFFIXMASTER,
  USEMASTER: USEMASTER,
  SINGLE_PERSON_READ: SINGLE_PERSON_READ,
  ORGNAME: ORGNAME,
  FACILITYLIST: FACILITYLIST,
  PATIENTCATEGORY: PATIENTCATEGORY,
  DAYLIST: DAYLIST,
  MEALTYPE: MEALTYPE
};
var personSlice$1 = personSlice.reducer;

var queries$2 = {
  user_read: function user_read(data) {
    var filter = {};
    return _objectSpread2(_objectSpread2({
      "db_name": dbName,
      "entity": "Practitioner"
    }, filter), {}, {
      "return_fields": "{Practitioner}"
    });
  },
  user_delete: function user_delete(data) {
    var filter = {};

    if (data._id) {
      filter = {
        filter: {
          _id: data._id
        }
      };
    }

    return [_objectSpread2({
      "db_name": dbName,
      "entity": "Practitioner",
      // "is_metadata": true,
      "metadataId": METADATAID
    }, filter)];
  },
  user_upsert: function user_upsert(data) {
    var filter = {};

    if (data._key) {
      filter = {
        filter: {
          _key: data._key
        }
      };
    }

    return [_objectSpread2(_objectSpread2({
      "db_name": dbName,
      "entity": "Practitioner",
      "is_metadata": true,
      "metadataId": METADATAID
    }, filter), {}, {
      "doc": _objectSpread2({}, data)
    })];
  },
  practitioner_by_id: function practitioner_by_id(data) {
    return {
      "db_name": dbName,
      "entity": "Practitioner",
      "filter": "Practitioner.PersonID==".concat(data.id, " && Practitioner.activestatus==true"),
      "return_fields": "merge(Practitioner,{identifier:(for doc in IdentifierMaster filter doc._id in Practitioner.identifier return merge(doc,{period:(for cod in doc.period return document(cod))})),address:(for a in Practitioner.address return document(a)),communication:( FOR cod IN CodeableConceptMaster filter cod._id in Practitioner.communication RETURN MERGE(cod,{coding:(FOR d IN cod.coding RETURN DOCUMENT(d))})),marital_status:(FOR cod IN CodeableConceptMaster filter cod._id==Practitioner.marital_status RETURN MERGE(cod,{coding:(FOR d IN cod.coding RETURN DOCUMENT(d))})),name:(for a in Practitioner.name return MERGE(document(a),{period:DOCUMENT(document(a).period)})),nationality:(FOR cod IN SMGeographicMaster filter cod._id==Practitioner.nationality RETURN cod),photo:(for a in Practitioner.photo return document(a)),position:(for pt in CodeableConceptMaster filter pt._id==Practitioner.position return merge(pt,{coding:(FOR d IN pt.coding RETURN DOCUMENT(d))})),practitioner_type:(for pt in CodeableConceptMaster filter pt._id==Practitioner.practitioner_type return merge(pt,{coding:(FOR d IN pt.coding RETURN DOCUMENT(d))})),telecom:(for a in Practitioner.telecom return document(a)),job_experience:(for c in Practitioner.job_experience RETURN merge(c,{jobexperience_contact_details:(for con in c.jobexperience_contact_details return document(con)), jobexperience_address:(for add in c.jobexperience_address return document(add))})),training_details:(for c in Practitioner.training_details RETURN merge(c,{training_contact_details:(for con in c.training_contact_details return document(con)), training_address:(for add in c.training_address return document(add))})),practitioner_role:(for doc in PractitionerRole filter doc._id IN Practitioner.practitioner_role return MERGE(doc,{telecom:(for rol in ContactPointMaster filter rol._id in doc.telecom return rol),role:(for cod in CodeableConceptMaster filter cod._id==doc.role return merge(cod,{coding:(for code in CodingMaster filter code._id in cod.coding return code)})),period:(for per in periodMaster filter per._id in doc.period return per)})),gender:(FOR cod IN CodeableConceptMaster filter cod._id==Practitioner.gender RETURN MERGE(cod,{coding:(FOR d IN cod.coding RETURN DOCUMENT(d))})),employee_status:(for pt in CodeableConceptMaster filter pt._id==Practitioner.employee_status return merge(pt,{coding:(FOR d IN pt.coding RETURN DOCUMENT(d))}))})"
    };
  }
};

var _extraReducers$3;
var USER_UPSERT = createAsyncThunk("userSlice/user_upsert", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  var payload,
      _ref2,
      rejectWithValue,
      params,
      queriesjson,
      data,
      _args = arguments;

  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          payload = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          _ref2 = _args.length > 1 ? _args[1] : undefined, rejectWithValue = _ref2.rejectWithValue;
          _context.prev = 2;
          params = _objectSpread2({
            _key: payload._key
          }, payload);
          queriesjson = queries$2.user_upsert(params);
          _context.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __uspsertUrl__);

        case 7:
          data = _context.sent;
          return _context.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            _key: data._key,
            data: data
          }));

        case 11:
          _context.prev = 11;
          _context.t0 = _context["catch"](2);
          return _context.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context.t0.message
          })));

        case 14:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[2, 11]]);
})));
var USER_DELETE = createAsyncThunk("userSlice/user_delete", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
  var payload,
      _ref4,
      rejectWithValue,
      params,
      queriesjson,
      data,
      _args2 = arguments;

  return _regeneratorRuntime().wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          payload = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
          _ref4 = _args2.length > 1 ? _args2[1] : undefined, rejectWithValue = _ref4.rejectWithValue;
          _context2.prev = 2;
          params = _objectSpread2({
            _id: payload._id
          }, payload);
          queriesjson = queries$2.user_delete(params);
          _context2.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __deleteUrl__);

        case 7:
          data = _context2.sent;
          return _context2.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 11:
          _context2.prev = 11;
          _context2.t0 = _context2["catch"](2);
          return _context2.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context2.t0.message
          })));

        case 14:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, null, [[2, 11]]);
})));
var USER_READ = createAsyncThunk("userSlice/user_read", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
  var payload,
      _ref6,
      rejectWithValue,
      readqueries,
      data,
      _args3 = arguments;

  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          payload = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
          _ref6 = _args3.length > 1 ? _args3[1] : undefined, rejectWithValue = _ref6.rejectWithValue;
          _context3.prev = 2;
          readqueries = queries$2.practitioner_by_id(payload);
          _context3.next = 6;
          return fetchData({
            body: JSON.stringify(readqueries)
          }, __readDocumentUrl__);

        case 6:
          data = _context3.sent;
          return _context3.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data.result
          }));

        case 10:
          _context3.prev = 10;
          _context3.t0 = _context3["catch"](2);
          return _context3.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject.List), {}, {
            message: _context3.t0.message
          })));

        case 13:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, null, [[2, 10]]);
})));
var userSlice = createSlice({
  name: "userSlice",
  initialState: {
    user_upsert: _objectSpread2({}, defaultState.List),
    user_delete: _objectSpread2({}, defaultState.List),
    user_read: _objectSpread2({}, defaultState.List)
  },
  extraReducers: (_extraReducers$3 = {}, _defineProperty(_extraReducers$3, USER_UPSERT.fulfilled, function (state, action) {
    state.user_upsert.loading = false, state.user_upsert.error = false, state.user_upsert = action.payload;
  }), _defineProperty(_extraReducers$3, USER_UPSERT.pending, function (state, action) {
    state.user_upsert.loading = true, state.user_upsert.error = false, state.user_upsert.loading = true;
  }), _defineProperty(_extraReducers$3, USER_UPSERT.rejected, function (state, action) {
    state.user_upsert.loading = false, state.user_upsert.error = true, state.user_upsert = action.payload;
  }), _defineProperty(_extraReducers$3, USER_DELETE.fulfilled, function (state, action) {
    state.user_delete.loading = false, state.user_delete.error = false, state.user_delete = action.payload;
  }), _defineProperty(_extraReducers$3, USER_DELETE.pending, function (state, action) {
    state.user_delete.loading = true, state.user_delete.error = false, state.user_delete.loading = true;
  }), _defineProperty(_extraReducers$3, USER_DELETE.rejected, function (state, action) {
    state.user_delete.loading = false, state.user_delete.error = true, state.user_delete = action.payload;
  }), _defineProperty(_extraReducers$3, USER_READ.fulfilled, function (state, action) {
    state.user_read.loading = false, state.user_read.error = false, state.user_read = action.payload;
  }), _defineProperty(_extraReducers$3, USER_READ.pending, function (state, action) {
    state.user_read.loading = true, state.user_read.error = false, state.user_read.loading = true;
  }), _defineProperty(_extraReducers$3, USER_READ.rejected, function (state, action) {
    state.user_read.loading = false, state.user_read.error = true, state.user_read = action.payload;
  }), _extraReducers$3)
});
var userActions = {
  USER_READ: USER_READ,
  USER_DELETE: USER_DELETE,
  USER_UPSERT: USER_UPSERT
};
var userSlice$1 = userSlice.reducer;

var queries$1 = {
  person_upsert: function person_upsert(data) {
    return [{
      db_name: dbName,
      entity: "Person",
      is_metadata: true,
      metadataId: METADATAID,
      metadata_dbname: idm_metadata_dbname,
      doc: _objectSpread2({}, data)
    }];
  },
  person_update: function person_update(data) {
    return [{
      db_name: dbName,
      entity: "Person",
      filter: _objectSpread2({}, data.filter),
      is_metadata: true,
      metadataId: METADATAID,
      metadata_dbname: idm_metadata_dbname,
      doc: _objectSpread2({}, data.doc)
    }];
  }
};

var _extraReducers$2;
var PERSON_UPSERT = createAsyncThunk("personSlices/person_upsert", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  var payload,
      _ref2,
      rejectWithValue,
      queriesjson,
      data,
      _args = arguments;

  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          payload = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          _ref2 = _args.length > 1 ? _args[1] : undefined, rejectWithValue = _ref2.rejectWithValue;
          _context.prev = 2;
          queriesjson = queries$1.person_upsert(payload);
          _context.next = 6;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __personUpsert__);

        case 6:
          data = _context.sent;
          return _context.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 10:
          _context.prev = 10;
          _context.t0 = _context["catch"](2);
          return _context.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context.t0.message
          })));

        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[2, 10]]);
})));
var PERSON_UPDATE = createAsyncThunk("personSlices/person_update", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
  var payload,
      _ref4,
      rejectWithValue,
      queriesjson,
      data,
      _args2 = arguments;

  return _regeneratorRuntime().wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          payload = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
          _ref4 = _args2.length > 1 ? _args2[1] : undefined, rejectWithValue = _ref4.rejectWithValue;
          _context2.prev = 2;
          queriesjson = queries$1.person_update(payload);
          _context2.next = 6;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __personUpsert__);

        case 6:
          data = _context2.sent;
          return _context2.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 10:
          _context2.prev = 10;
          _context2.t0 = _context2["catch"](2);
          return _context2.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context2.t0.message
          })));

        case 13:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, null, [[2, 10]]);
})));
var personSlices = createSlice({
  name: "persionApiSlice",
  initialState: {
    person_upsert: _objectSpread2({}, defaultState.List),
    person_update: _objectSpread2({}, defaultState.List)
  },
  extraReducers: (_extraReducers$2 = {}, _defineProperty(_extraReducers$2, PERSON_UPSERT.fulfilled, function (state, action) {
    state.person_upsert.loading = false, state.person_upsert.error = false, state.person_upsert = action.payload;
  }), _defineProperty(_extraReducers$2, PERSON_UPSERT.pending, function (state, action) {
    state.person_upsert.loading = true, state.person_upsert.error = false, state.person_upsert.loading = true;
  }), _defineProperty(_extraReducers$2, PERSON_UPSERT.rejected, function (state, action) {
    state.person_upsert.loading = false, state.person_upsert.error = true, state.person_upsert = action.payload;
  }), _defineProperty(_extraReducers$2, PERSON_UPDATE.fulfilled, function (state, action) {
    state.person_update.loading = false, state.person_update.error = false, state.person_update = action.payload;
  }), _defineProperty(_extraReducers$2, PERSON_UPDATE.pending, function (state, action) {
    state.person_update.loading = true, state.person_update.error = false, state.person_update.loading = true;
  }), _defineProperty(_extraReducers$2, PERSON_UPDATE.rejected, function (state, action) {
    state.person_update.loading = false, state.person_update.error = true, state.person_update = action.payload;
  }), _extraReducers$2)
});
var personActions = {
  PERSON_UPSERT: PERSON_UPSERT,
  PERSON_UPDATE: PERSON_UPDATE
};
var personSlices$1 = personSlices.reducer;

var queries = {
  rolelist: function rolelist(type) {
    return {
      db_name: dbName,
      entity: "CodeableConceptMaster",
      filter: "CodeableConceptMaster.Type=='".concat(type, "'"),
      return_fields: "MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})",
      sort: "CodeableConceptMaster.createddate"
    };
  },
  upsert: function upsert(data) {
    var filter = {};
    var _key = {};

    if (data._key) {
      filter = {
        filter: {
          _key: data._key
        }
      };
    }

    if (data !== null && data !== void 0 && data.coding_key) {
      _key = {
        _key: data === null || data === void 0 ? void 0 : data.coding_key
      };
    }

    if (data.id) {
      ({
        id: data.id
      });
    }

    return [_objectSpread2(_objectSpread2({
      db_name: dbName,
      entity: "CodeableConceptMaster",
      is_metadata: true,
      metadataId: METADATAID
    }, filter), {}, {
      doc: {
        text: "",
        _id: "",
        id: 0,
        coding: [_objectSpread2({
          system: "",
          version: "1",
          code: data.code,
          display: data.description,
          userSelected: true,
          Type: data.type,
          id: data.id,
          status: data.status
        }, _key)],
        Type: data.type,
        status: data.status
      }
    })];
  },
  practitioner_by_id: function practitioner_by_id(id) {
    return {
      db_name: dbName,
      entity: "Practitioner",
      filter: "Practitioner._key=='".concat(id, "' && Practitioner.activestatus==true"),
      return_fields: "merge(Practitioner,{identifier:(for doc in IdentifierMaster filter doc._id in Practitioner.identifier return merge(doc,{period:(for cod in doc.period return document(cod))})),address:(for a in Practitioner.address return document(a)),communication:( FOR cod IN CodeableConceptMaster filter cod._id in Practitioner.communication RETURN MERGE(cod,{coding:(FOR d IN cod.coding RETURN DOCUMENT(d))})),marital_status:(FOR cod IN CodeableConceptMaster filter cod._id==Practitioner.marital_status RETURN MERGE(cod,{coding:(FOR d IN cod.coding RETURN DOCUMENT(d))})),name:(for a in Practitioner.name return document(a)),nationality:(FOR cod IN SMGeographicMaster filter cod._id==Practitioner.nationality RETURN cod),photo:(for a in Practitioner.photo return document(a)),position:(for pt in CodeableConceptMaster filter pt._id==Practitioner.position return merge(pt,{coding:(FOR d IN pt.coding RETURN DOCUMENT(d))})),practitioner_type:(for pt in CodeableConceptMaster filter pt._id==Practitioner.practitioner_type return merge(pt,{coding:(FOR d IN pt.coding RETURN DOCUMENT(d))})),telecom:(for a in Practitioner.telecom return document(a)),job_experience:(for c in Practitioner.job_experience RETURN merge(c,{jobexperience_contact_details:(for con in c.jobexperience_contact_details return document(con)), jobexperience_address:(for add in c.jobexperience_address return document(add))})),training_details:(for c in Practitioner.training_details RETURN merge(c,{training_contact_details:(for con in c.training_contact_details return document(con)), training_address:(for add in c.training_address return document(add))})),practitioner_role:(for doc in PractitionerRole filter doc._id IN Practitioner.practitioner_role return MERGE(doc,{telecom:(for rol in ContactPointMaster filter rol._id in doc.telecom return rol),role:(for cod in CodeableConceptMaster filter cod._id==doc.role return merge(cod,{coding:(for code in CodingMaster filter code._id in cod.coding return code)})),period:(for per in periodMaster filter per._id in doc.period return per)})),gender:(FOR cod IN CodeableConceptMaster filter cod._id==Practitioner.gender RETURN MERGE(cod,{coding:(FOR d IN cod.coding RETURN DOCUMENT(d))})),employee_status:(for pt in CodeableConceptMaster filter pt._id==Practitioner.employee_status return merge(pt,{coding:(FOR d IN pt.coding RETURN DOCUMENT(d))}))})"
    };
  },
  // practitioner_list: (page = 0, perPage = 10, search) => {
  //   return {
  //     db_name: dbName,
  //     entity: "Practitioner",
  //     // sort : "Practitioner.createddate",
  //     sort: "Practitioner.updatedate desc",
  //     filter: `(like(document(first(Practitioner.name)).text,'%${search}%',true) || like(document(first(document(Practitioner.practitioner_type).coding)).display,'%${search}%',true) || like(document(document(document(Practitioner.practitioner_role[0]).SpecialtyID).coding[0]).display,'%${search}%',true)) && Practitioner.activestatus==true`,
  //     limit: { offset: page, count: perPage },
  //     return_fields:
  //       "{TotalCount:COUNT(FOR cnt IN Practitioner RETURN cnt._key),PersonID:Practitioner.PersonID,_id:Practitioner._id, id:Practitioner.id,name:(FOR nam IN TO_ARRAY(Practitioner.name) RETURN DOCUMENT(nam).text)[0],type: (for t in CodeableConceptMaster filter t._id == Practitioner.practitioner_type return merge(t,{coding:(for cod in CodingMaster filter cod._id in t.coding return cod.display)})),_key:Practitioner._key,status:Practitioner.status,Practitionerrole:(for pr in PractitionerRole filter pr._id in Practitioner.practitioner_role && pr.primary_specialty==true return merge(pr,{SpecialtyID:(for spe in CodeableConceptMaster filter spe._id ==pr.SpecialtyID return merge(spe,{coding:(for cod in CodingMaster filter cod._id in spe.coding return cod.display)}))}))}",
  //   };
  // },
  practitioner_list: function practitioner_list() {
    var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var perPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
    var search = arguments.length > 2 ? arguments[2] : undefined;
    return {
      db_name: dbName,
      entity: "Person",
      filter: "(like(document(first(Person.name)).text,'%".concat(search, "%',true)) && Person.roleid[0].roleid!='5'&& Person.activestatus==true"),
      limit: {
        offset: page,
        count: perPage
      },
      return_fields: "MERGE(Person,{ name:(FOR nam IN TO_ARRAY(Person.name) RETURN MERGE(DOCUMENT(nam),{use:DOCUMENT(DOCUMENT(nam).use)})), address:(FOR add IN TO_ARRAY(Person.address) RETURN MERGE(DOCUMENT(add),{country:DOCUMENT(DOCUMENT(add).country),Type:DOCUMENT(DOCUMENT(add).Type) ,use:DOCUMENT(DOCUMENT(add).use) ,city:DOCUMENT(DOCUMENT(add).city) ,state:DOCUMENT(DOCUMENT(add).state) ,postalCode:DOCUMENT(DOCUMENT(add).postalCode) })), photo:DOCUMENT(Person.photo), telecom:(for tel IN TO_ARRAY(Person.telecom) RETURN MERGE(DOCUMENT(tel),{system:DOCUMENT(DOCUMENT(tel).system),use:DOCUMENT(DOCUMENT(tel).use),rank:MERGE(DOCUMENT(DOCUMENT(tel).rank),{coding:DOCUMENT(DOCUMENT(DOCUMENT(tel).rank).coding)}) })), gender:MERGE(DOCUMENT(Person.gender),{coding:(FOR cod IN TO_ARRAY(DOCUMENT(Person.gender).coding) RETURN DOCUMENT(cod))}) })"
    };
  },
  practitioner_list_teneteid: function practitioner_list_teneteid() {
    var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var perPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
    var search = arguments.length > 2 ? arguments[2] : undefined;
    var teneteid = arguments.length > 3 ? arguments[3] : undefined;
    return {
      db_name: dbName,
      entity: "Person",
      filter: "(like(document(first(Person.name)).text,'%".concat(search, "%',true)) && Person.roleid[0].roleid!='5' && Person.tenantid == '").concat(teneteid, "' && Person.activestatus==true "),
      limit: {
        offset: page,
        count: perPage
      },
      return_fields: "MERGE(Person,{ name:(FOR nam IN TO_ARRAY(Person.name) RETURN MERGE(DOCUMENT(nam),{use:DOCUMENT(DOCUMENT(nam).use)})), address:(FOR add IN TO_ARRAY(Person.address) RETURN MERGE(DOCUMENT(add),{country:DOCUMENT(DOCUMENT(add).country),Type:DOCUMENT(DOCUMENT(add).Type) ,use:DOCUMENT(DOCUMENT(add).use) ,city:DOCUMENT(DOCUMENT(add).city) ,state:DOCUMENT(DOCUMENT(add).state) ,postalCode:DOCUMENT(DOCUMENT(add).postalCode) })), photo:DOCUMENT(Person.photo), telecom:(for tel IN TO_ARRAY(Person.telecom) RETURN MERGE(DOCUMENT(tel),{system:DOCUMENT(DOCUMENT(tel).system),use:DOCUMENT(DOCUMENT(tel).use),rank:MERGE(DOCUMENT(DOCUMENT(tel).rank),{coding:DOCUMENT(DOCUMENT(DOCUMENT(tel).rank).coding)}) })), gender:MERGE(DOCUMENT(Person.gender),{coding:(FOR cod IN TO_ARRAY(DOCUMENT(Person.gender).coding) RETURN DOCUMENT(cod))}) })"
    };
  },
  status_update_practitioner: function status_update_practitioner(data) {
    return [{
      db_name: dbName,
      entity: "Practitioner",
      filter: {
        _key: data._key
      },
      is_metadata: true,
      metadataId: METADATAID,
      doc: {
        status: data.status
      }
    }];
  },
  get_entity_by_id: function get_entity_by_id(id) {
    return {
      db_name: dbName,
      entity: "Organization",
      sort: "Organization.name",
      filter: "Organization.activestatus==true && Organization.OrgType any =='".concat(id, "'"),
      return_fields: "{_id:Organization._id,_key:Organization._key,id:Organization.id,name:Organization.name,alias:Organization.alias}"
    };
  },
  getRoleDetails: function getRoleDetails(roleid) {
    return {
      db_name: dbName,
      "entity": "IDM_PermissionRoleMapping",
      "filter": "IDM_PermissionRoleMapping.roleid ==\"".concat(roleid, "\""),
      "return_fields": "IDM_PermissionRoleMapping.rolename"
    };
  }
};

var contactList = function contactList(data) {
  var contactLists = [];

  if (data && data.length > 0) {
    data.map(function (val) {
      var contactData = {
        // "_id": "string",
        "system": val.mode ? val.mode.value : "",
        "value": val.mobile ? val.mobile : "",
        "use": val.use ? val.use.value : "",
        "rank": val.priority ? val.priority.value : "",
        "valueprefix": val.country_code ? val.country_code.value : "",
        "period": [{
          // "_id": "string",
          "start": getUtcTime(),
          "end": getUtcTime(moment().endOf('day')) // "id": "number"

        }] // "id": "number"

      };
      contactLists.push(contactData);
    });
  }

  return contactLists;
}; // Address list


var addresslist = function addresslist(data) {
  var addLists = [];

  if (data && data.length > 0) {
    data.map(function (val) {
      var _val$pincode, _val$pincode2;

      var addressData = {
        // "_id": "string",
        "use": val.use ? val.use.value : '',
        "text": val.addressLine1 ? val.addressLine1 : "",
        "line": val.addressLine2 ? val.addressLine2 : "",
        "city": val.city ? val.city.value : '',
        "district": val.district ? val.district.value : "",
        "state": val.state ? val.state.value : "",
        "postalCode": (_val$pincode = val.pincode) !== null && _val$pincode !== void 0 && _val$pincode._id ? (_val$pincode2 = val.pincode) === null || _val$pincode2 === void 0 ? void 0 : _val$pincode2._id : "",
        "country": val.country ? val.country.value : "",
        "latitude": "",
        "longitude": "",
        'Type': val.type ? val.type.value : ""
      };
      addLists.push(addressData);
    });
  }

  return addLists;
};

var generateJSON = function generateJSON(data, _key, person_id, ID) {
  //person id
  var personId = {};

  if (person_id >= 0) {
    personId = {
      "PersonID": person_id
    };
  } //  filter to update the practitioner


  var filter = {};

  if (_key) {
    filter = {
      "filter": {
        "_id": _key
      }
    };
  }

  var id = {};

  if (ID >= 0) {
    id = {
      id: ID
    };
  } // PRACTITIONER IDENTIFICATION

  if (data.identification && data.identification.length > 0) {
    data.identification.map(function (val) {
      // var given = moment(val.expiry_date, "YYYY-MM-DD");
      // var current = moment().startOf('day');
      // var expiry_day = moment.duration(given.diff(current)).asDays();
      ({
        "IDType": val.id_type.value ? val.id_type.value : "",
        "IDNumber": val.id_number ? val.id_number : "",
        "ExpiryDate": val.expiry_date ? getUtcTime(moment(val.expiry_date)) : null // doc
        // "files": val.doc ? val.doc : []

      });
    });
  }

  var identifierList = [];

  if (data.identification && data.identification.length > 0) {
    data.identification.map(function (val) {
      var data = {
        // "_id": "string",
        "user": val.id_type.value ? val.id_type.value : "",
        "system": "",
        "value": val.id_number ? val.id_number : "",
        "files": val.doc ? val.doc : [],
        "period": [{
          // "_id": "string",
          "start": getUtcTime(),
          "end": val.expiry_date ? getUtcTime(moment(val.expiry_date)) : null // "id": "number"

        }] // "assigner": "string",
        // "Type": "string",
        // "id": "number",

      };
      identifierList.push(data);
    });
  } // PRACTITIONER DETAILS


  var names = [];

  if (data.names && data.names.length > 0) {
    data.names.map(function (val) {
      var nameData = {
        // "_id": "string",
        "use": val.use ? val.use.value : "",
        "text": val.first_name ? val.first_name : "",
        "family": val.last_name ? val.last_name : "",
        "given": val.middle_name ? val.middle_name : "",
        "prefix": val.prefix ? val.prefix.value : "",
        "suffix": val.suffix ? val.suffix.value : "",
        "period": [{
          // "_id": "",
          "start": getUtcTime(),
          "end": getUtcTime(moment().endOf('day')) // "id": "number"

        }]
      };
      names.push(nameData);
    });
  } // Practitioner Description


  var languagesList = [];

  if (data.practitioner_description && data.practitioner_description.communication_languages && data.practitioner_description.communication_languages.length > 0) {
    languagesList = data.practitioner_description.communication_languages.map(function (val) {
      return val.value;
    });
  } // CONTACT DETAILS
  // contact list


  var contact = [];

  if (data.contact && data.contact.length > 0) {
    data.contact.map(function (val) {
      var contactData = {
        // "_id": "string",
        "system": val.mode ? val.mode.value : "",
        "value": val.mobile ? val.mobile : "",
        "use": val.use ? val.use.value : "",
        "rank": val.priority ? val.priority.value : "",
        "valueprefix": val.country_code ? val.country_code.value : "",
        "period": [{
          // "_id": "string",
          "start": getUtcTime(),
          "end": getUtcTime(moment().endOf('day')) // "id": "number"

        }] // "id": "number"

      };
      contact.push(contactData);
    });
  }

  var practitioner_list = [];

  if (data.practitionerbyrole && data.practitionerbyrole.length > 0) {
    data.practitionerbyrole.map(function (val) {
      var key = {};
      var roleId = {};

      if (val !== null && val !== void 0 && val._key) {
        key = {
          _key: val === null || val === void 0 ? void 0 : val._key
        };
      } else {
        roleId = {
          id: 0
        };
      }

      var practitionerData = _objectSpread2(_objectSpread2({
        role: val.select_role ? val.select_role.value : "",
        active: val.status ? val.status : false,
        // "EntityName": val.entity_name ? val.entity_name.value : "",
        period: [{
          // "_id": "string",
          start: val.start_date ? getUtcTime(moment(val.start_date)) : null,
          end: val.end_date ? getUtcTime(moment(val.end_date)) : null // "id": "number"

        }],
        SpecialtyID: val.speciality ? val.speciality.value : "",
        EntityType: val.select_entity ? val.select_entity._id : "",
        OrgID: val.entity_name ? "".concat(val.entity_name.value) : "",
        EntityName: val.entity_name ? "".concat(val.entity_name.value) : "",
        locationID: val.select_location ? val.select_location.value : "",
        primary_specialty: val.primary_specialty ? val.primary_specialty : false,
        telecom: contactList(val.contact),
        files: val.doc ? val.doc : []
      }, roleId), key);

      practitioner_list.push(practitionerData);
    });
  } // Address


  var addressList = [];

  if (data.address && data.address.length > 0) {
    data.address.map(function (val) {
      var _val$pincode3, _val$pincode4;

      var addressData = {
        // "_id": "string",
        "use": val.use ? val.use.value : '',
        "text": val.addressLine1 ? val.addressLine1 : "",
        "line": val.addressLine2 ? val.addressLine2 : "",
        "city": val.city ? val.city.value : '',
        "district": val.district ? val.district.value : "",
        "state": val.state ? val.state.value : "",
        "postalCode": (_val$pincode3 = val.pincode) !== null && _val$pincode3 !== void 0 && _val$pincode3._id ? (_val$pincode4 = val.pincode) === null || _val$pincode4 === void 0 ? void 0 : _val$pincode4._id : "",
        "country": val.country ? val.country.value : "",
        "latitude": "",
        "longitude": "",
        'Type': val.type ? val.type.value : ""
      };
      addressList.push(addressData);
    }); // return addressList;
  } // Qualification


  var qualification_list = [];

  if (data.qualification && data.qualification.length > 0) {
    data.qualification.map(function (val) {
      var qualificationData = {
        "name": val.name ? val.name : "",
        "university_board": val.qualification_name ? val.qualification_name : "",
        "issue_date": val.issued_by ? getUtcTime(moment(val.issued_by)) : null,
        "valid_from": val.start_date ? getUtcTime(moment(val.start_date)) : null,
        "valid_to": val.end_date ? getUtcTime(moment(val.end_date)) : null,
        "files": val.doc ? val.doc : []
      };
      qualification_list.push(qualificationData);
    }); // return qualification_list;
  } // Publication


  var publication_list = [];

  if (data.publication && data.publication.length > 0) {
    data.publication.map(function (val) {
      var publicationData = {
        "description": val.description ? val.description : "",
        "link": val.link ? val.link : ""
      };
      publication_list.push(publicationData);
    }); // return publication_list;
  } // Training


  var training_list = [];

  if (data.training && data.training.length > 0) {
    data.training.map(function (val) {
      var trainingData = {
        "organization": val.organization ? val.organization : "",
        "course_name": val.course_name ? val.course_name : "",
        "responsible_person": val.responsible_person ? val.responsible_person : "",
        "course_start_date": val.course_start_date ? getUtcTime(moment(val.course_start_date)) : null,
        "course_end_date": val.course_end_date ? getUtcTime(moment(val.course_end_date)) : null,
        "certificate_issued_date": val.certificate_issue_date ? getUtcTime(moment(val.certificate_issue_date)) : null,
        "certificate_expiry_date": val.certificate_expiry_date ? getUtcTime(moment(val.certificate_expiry_date)) : null,
        "files": val.doc ? val.doc : [],
        "training_contact_details": contactList(val.contact),
        "training_address": addresslist(val.address)
      };
      training_list.push(trainingData);
    }); // return training_list;
  } // Job Experience


  var job_experience_list = [];

  if (data.job && data.job.length > 0) {
    data.job.map(function (val) {
      var jsobData = {
        "organization": val.organization ? val.organization : "",
        "department": val.department ? val.department : "",
        "designation": val.designation ? val.designation : "",
        "role": val.role ? val.role : "",
        "start_date": val.start_date ? getUtcTime(moment(val.start_date)) : null,
        "end_date": val.end_date ? getUtcTime(moment(val.end_date)) : null,
        "report_to": val.reporting_to ? val.reporting_to : "",
        "grade": val.grade ? val.grade : "",
        "pay_scale": val.pay_scale ? val.pay_scale : "",
        "job_description": val.job_description ? val.job_description : "",
        "files": val.doc ? val.doc : [],
        "sequence_no": val.sequence_no ? val.sequence_no : "",
        "jobexperience_contact_details": contactList(val.contact),
        "jobexperience_address": addresslist(val.address)
      };
      job_experience_list.push(jsobData);
    }); // return job_experience_list;
  } // Acheivement/Awards


  var awardsList = [];

  if (data.awards && data.awards.length > 0) {
    data.awards.map(function (val) {
      var awardsData = {
        "organization": val.organization ? val.organization : "",
        "type": val.type ? val.type : "",
        "title": val.title ? val.title : "",
        "note": val.notes ? val.notes : "",
        "date": val.date ? getUtcTime(moment(val.date)) : null,
        "files": val.doc ? val.doc : []
      };
      awardsList.push(awardsData);
    }); // return awardsList;
  }

  var json = [_objectSpread2(_objectSpread2({
    "db_name": dbName,
    "entity": "Practitioner",
    "is_metadata": true,
    "metadataId": METADATAID
  }, filter), {}, {
    "doc": _objectSpread2(_objectSpread2({}, id), {}, {
      "identifier": identifierList,
      "name": names,
      "gender": data.details.gender ? data.details.gender._id : "",
      "birthDate": data.details.dob ? moment(data.details.dob).unix() : null,
      "marital_status": data.details.marital_status ? data.details.marital_status.value : "",
      "status": data.details.status ? data.details.status : false,
      "nationality": data.details.nationality ? data.details.nationality.value : "",
      "active": true,
      // practitioner_description
      "practitioner_type": data.practitioner_description.practitioner_type ? data.practitioner_description.practitioner_type.value : "",
      "position": data.practitioner_description.position ? data.practitioner_description.position.value : "",
      "employee_status": data.practitioner_description.employee_type ? data.practitioner_description.employee_type.value : "",
      "communication": languagesList,
      // "practitioner_description": [
      //   {
      //     "communication_languages": languagesList,
      //   }
      // ],
      "telecom": contact,
      "practitioner_role": practitioner_list,
      "address": addressList,
      "qualification": qualification_list,
      "job_experience": job_experience_list,
      "achievements_awards_details": awardsList,
      "training_details": training_list,
      "publication_details": publication_list,
      "biography": [{
        "biography_description": data.details.biography_description ? data.details.biography_description : ""
      }],
      "photo": [{
        // "_id": "string",
        "date": "",
        "url": "",
        // "id": "number",
        "fileName": data.details.photo && data.details.photo.fileName ? data.details.photo.fileName : "",
        "fileid": data.details.photo && data.details.photo.fileid ? data.details.photo.fileid : "",
        "filetype": data.details.photo && data.details.photo.filetype ? data.details.photo.filetype : "",
        "objectid": data.details.photo && data.details.photo.objectid ? data.details.photo.objectid : ""
      }],
      "practitioner_id": data.details.practitoner_id ? data.details.practitoner_id : ""
    }, personId)
  })];
  return json;
};

var _extraReducers$1;
var PRACTITIONER_ROLE_READ = createAsyncThunk("practitionerSlice/practitionerlist", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  var payload,
      _ref2,
      rejectWithValue,
      type,
      data,
      arry,
      _args = arguments;

  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          payload = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          _ref2 = _args.length > 1 ? _args[1] : undefined, rejectWithValue = _ref2.rejectWithValue;
          _context.prev = 2;
          type = payload.type;
          _context.next = 6;
          return fetchData({
            body: JSON.stringify(queries.rolelist(type))
          }, __readDocumentUrl__);

        case 6:
          data = _context.sent;
          arry = [];
          data.result.map(function (val) {
            if (val.coding[0] && val.coding[0].code && val.coding[0].display) {
              var _val$coding$0$_key;

              arry.push({
                code_type: val.coding[0].code,
                description: val.coding[0].display,
                coding_key: (_val$coding$0$_key = val.coding[0]._key) !== null && _val$coding$0$_key !== void 0 ? _val$coding$0$_key : null,
                id: val.coding[0].id,
                _key: val._key,
                status: val.status,
                activestatus: val.coding[0].activestatus
              });
            }
          });
          return _context.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context.prev = 12;
          _context.t0 = _context["catch"](2);
          return _context.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context.t0.message
          })));

        case 15:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[2, 12]]);
})));
var PRACTITIONER_ROLE_UPSERT = createAsyncThunk("practitionerSlice/practitionerRoleAdd", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
  var payload,
      _ref4,
      rejectWithValue,
      upsertkey,
      queriesjson,
      data,
      _args2 = arguments;

  return _regeneratorRuntime().wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          payload = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
          _ref4 = _args2.length > 1 ? _args2[1] : undefined, rejectWithValue = _ref4.rejectWithValue;
          _context2.prev = 2;
          upsertkey = {
            code: payload.code,
            description: payload.description,
            type: payload.type,
            status: payload.status,
            _key: payload._key,
            id: payload.id,
            coding_key: payload.coding_key
          };
          queriesjson = queries.upsert(upsertkey);
          _context2.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __uspsertUrl__);

        case 7:
          data = _context2.sent;
          return _context2.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 11:
          _context2.prev = 11;
          _context2.t0 = _context2["catch"](2);
          return _context2.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context2.t0.message
          })));

        case 14:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, null, [[2, 11]]);
})));
var PRACTITIONER_LIST_READ = createAsyncThunk("practitionerSlice/practitioner", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
  var payload,
      _ref6,
      rejectWithValue,
      getRoledetails,
      Role,
      data,
      arry,
      _data,
      _arry,
      _args3 = arguments;

  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          payload = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
          _ref6 = _args3.length > 1 ? _args3[1] : undefined, rejectWithValue = _ref6.rejectWithValue;
          _context3.prev = 2;
          getRoledetails = queries.getRoleDetails(payload === null || payload === void 0 ? void 0 : payload.roleid);
          _context3.next = 6;
          return fetchData({
            body: JSON.stringify(getRoledetails)
          }, __readDocumentUrl__);

        case 6:
          Role = _context3.sent;

          if (!((Role === null || Role === void 0 ? void 0 : Role.result[0]) === "Super Admin Role")) {
            _context3.next = 16;
            break;
          }

          _context3.next = 10;
          return fetchData({
            body: JSON.stringify(queries.practitioner_list_teneteid(payload === null || payload === void 0 ? void 0 : payload.page, payload === null || payload === void 0 ? void 0 : payload.perPage, payload !== null && payload !== void 0 && payload.search ? payload === null || payload === void 0 ? void 0 : payload.search : "", payload === null || payload === void 0 ? void 0 : payload.tenantid))
          }, __readDocumentUrl__);

        case 10:
          data = _context3.sent;
          arry = [];
          data.result.map(function (val) {
            var _val$name$, _val$name$2, _val$roleid, _val$roleid$;

            // if(val.name){
            console.log(val);
            arry.push(_objectSpread2(_objectSpread2({}, val), {}, {
              name: val !== null && val !== void 0 && (_val$name$ = val.name[0]) !== null && _val$name$ !== void 0 && _val$name$.text ? val === null || val === void 0 ? void 0 : (_val$name$2 = val.name[0]) === null || _val$name$2 === void 0 ? void 0 : _val$name$2.text : "-",
              type: val !== null && val !== void 0 && (_val$roleid = val.roleid) !== null && _val$roleid !== void 0 && (_val$roleid$ = _val$roleid[0]) !== null && _val$roleid$ !== void 0 && _val$roleid$.rolename ? val === null || val === void 0 ? void 0 : val.roleid[0].rolename : "-",
              _key: val._key // status: val.status,

            })); // }
          });
          return _context3.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 16:
          _context3.next = 18;
          return fetchData({
            body: JSON.stringify(queries.practitioner_list_teneteid(payload === null || payload === void 0 ? void 0 : payload.page, payload === null || payload === void 0 ? void 0 : payload.perPage, payload !== null && payload !== void 0 && payload.search ? payload === null || payload === void 0 ? void 0 : payload.search : "", payload === null || payload === void 0 ? void 0 : payload.tenantid))
          }, __readDocumentUrl__);

        case 18:
          _data = _context3.sent;
          _arry = [];

          _data.result.map(function (val) {
            var _val$name$3, _val$name$4, _val$roleid2, _val$roleid2$;

            // if(val.name){
            console.log(val);

            _arry.push(_objectSpread2(_objectSpread2({}, val), {}, {
              name: val !== null && val !== void 0 && (_val$name$3 = val.name[0]) !== null && _val$name$3 !== void 0 && _val$name$3.text ? val === null || val === void 0 ? void 0 : (_val$name$4 = val.name[0]) === null || _val$name$4 === void 0 ? void 0 : _val$name$4.text : "-",
              type: val !== null && val !== void 0 && (_val$roleid2 = val.roleid) !== null && _val$roleid2 !== void 0 && (_val$roleid2$ = _val$roleid2[0]) !== null && _val$roleid2$ !== void 0 && _val$roleid2$.rolename ? val === null || val === void 0 ? void 0 : val.roleid[0].rolename : "-",
              _key: val._key // status: val.status,

            })); // }

          });

          return _context3.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: _arry
          }));

        case 22:
          _context3.next = 28;
          break;

        case 24:
          _context3.prev = 24;
          _context3.t0 = _context3["catch"](2);
          console.log(_context3.t0);
          return _context3.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context3.t0.message
          })));

        case 28:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, null, [[2, 24]]);
})));
var PRACTITIONER_UPSERT = createAsyncThunk("practitionerSlice/practitionerAdd", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
  var payload,
      _ref8,
      rejectWithValue,
      data,
      _key,
      personId,
      ID,
      queriesjson,
      dataRes,
      _args4 = arguments;

  return _regeneratorRuntime().wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          payload = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
          _ref8 = _args4.length > 1 ? _args4[1] : undefined, rejectWithValue = _ref8.rejectWithValue;
          _context4.prev = 2;
          data = payload.data, _key = payload._key, personId = payload.personId, ID = payload.ID;
          queriesjson = generateJSON(data, _key, personId, ID);
          _context4.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __upsertPractitioner__);

        case 7:
          dataRes = _context4.sent;
          return _context4.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: dataRes
          }));

        case 11:
          _context4.prev = 11;
          _context4.t0 = _context4["catch"](2);
          return _context4.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context4.t0.message
          })));

        case 14:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4, null, [[2, 11]]);
})));
var PRACTITIONER_STATUS_CHANGE = createAsyncThunk("practitionerSlice/practitionerStatus", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
  var payload,
      _ref10,
      rejectWithValue,
      statuschange,
      queriesjson,
      data,
      _args5 = arguments;

  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          payload = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
          _ref10 = _args5.length > 1 ? _args5[1] : undefined, rejectWithValue = _ref10.rejectWithValue;
          _context5.prev = 2;
          statuschange = {
            _key: payload._key,
            status: payload.status
          };
          queriesjson = queries.status_update_practitioner(statuschange);
          _context5.next = 7;
          return fetchData({
            body: JSON.stringify(queriesjson)
          }, __uspsertUrl__);

        case 7:
          data = _context5.sent;
          return _context5.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: data
          }));

        case 11:
          _context5.prev = 11;
          _context5.t0 = _context5["catch"](2);
          return _context5.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context5.t0.message
          })));

        case 14:
        case "end":
          return _context5.stop();
      }
    }
  }, _callee5, null, [[2, 11]]);
})));
var GET_ENTITY_BY_ID = createAsyncThunk("practitionerSlice/get_entity_id", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
  var payload,
      _ref12,
      rejectWithValue,
      id,
      data,
      arry,
      _args6 = arguments;

  return _regeneratorRuntime().wrap(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          payload = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
          _ref12 = _args6.length > 1 ? _args6[1] : undefined, rejectWithValue = _ref12.rejectWithValue;
          _context6.prev = 2;
          id = payload.id;
          _context6.next = 6;
          return fetchData({
            body: JSON.stringify(queries.get_entity_by_id(id))
          }, __readDocumentUrl__);

        case 6:
          data = _context6.sent;
          arry = [];
          data.result.map(function (value) {
            var _value$name, _value$_id;

            arry.push(_objectSpread2({
              label: (_value$name = value === null || value === void 0 ? void 0 : value.name) !== null && _value$name !== void 0 ? _value$name : "",
              value: (_value$_id = value === null || value === void 0 ? void 0 : value._id) !== null && _value$_id !== void 0 ? _value$_id : ""
            }, value));
          });
          return _context6.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arry
          }));

        case 12:
          _context6.prev = 12;
          _context6.t0 = _context6["catch"](2);
          return _context6.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context6.t0.message
          })));

        case 15:
        case "end":
          return _context6.stop();
      }
    }
  }, _callee6, null, [[2, 12]]);
})));
var practitionerSlice = createSlice({
  name: "practitionerApiSlice",
  initialState: {
    practitioner_role_list: _objectSpread2({}, defaultState.List),
    practitioner_role_upsert: _objectSpread2({}, defaultState.List),
    practitioner_list: _objectSpread2({}, defaultState.List),
    practitioner_upsert: _objectSpread2({}, defaultState.List),
    practitioner_status_update: _objectSpread2({}, defaultState.List),
    get_entity_by_id: _objectSpread2({}, defaultState.List)
  },
  extraReducers: (_extraReducers$1 = {}, _defineProperty(_extraReducers$1, PRACTITIONER_ROLE_READ.fulfilled, function (state, action) {
    state.practitioner_role_list.loading = false, state.practitioner_role_list.error = false, state.practitioner_role_list = action.payload;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_ROLE_READ.pending, function (state, action) {
    state.practitioner_role_list.loading = true, state.practitioner_role_list.error = false, state.practitioner_role_list.loading = true;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_ROLE_READ.rejected, function (state, action) {
    state.practitioner_role_list.loading = false, state.practitioner_role_list.error = true, state.practitioner_role_list = action.payload;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_ROLE_UPSERT.fulfilled, function (state, action) {
    state.practitioner_role_upsert.loading = false, state.practitioner_role_upsert.error = false, state.practitioner_role_upsert = action.payload;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_ROLE_UPSERT.pending, function (state, action) {
    state.practitioner_role_upsert.loading = true, state.practitioner_role_upsert.error = false, state.practitioner_role_upsert.loading = true;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_ROLE_UPSERT.rejected, function (state, action) {
    state.practitioner_role_upsert.loading = false, state.practitioner_role_upsert.error = true, state.practitioner_role_upsert = action.payload;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_LIST_READ.fulfilled, function (state, action) {
    state.practitioner_list.loading = false, state.practitioner_list.error = false, state.practitioner_list = action.payload;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_LIST_READ.pending, function (state, action) {
    state.practitioner_list.loading = true, state.practitioner_list.error = false, state.practitioner_list.loading = true;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_LIST_READ.rejected, function (state, action) {
    state.practitioner_list.loading = false, state.practitioner_list.error = true, state.practitioner_list = action.payload;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_UPSERT.fulfilled, function (state, action) {
    state.practitioner_upsert.loading = false, state.practitioner_upsert.error = false, state.practitioner_upsert = action.payload;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_UPSERT.pending, function (state, action) {
    state.practitioner_upsert.loading = true, state.practitioner_upsert.error = false, state.practitioner_upsert.loading = true;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_UPSERT.rejected, function (state, action) {
    state.practitioner_upsert.loading = false, state.practitioner_upsert.error = true, state.practitioner_upsert = action.payload;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_STATUS_CHANGE.fulfilled, function (state, action) {
    state.practitioner_status_update.loading = false, state.practitioner_status_update.error = false, state.practitioner_status_update = action.payload;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_STATUS_CHANGE.pending, function (state, action) {
    state.practitioner_status_update.loading = true, state.practitioner_status_update.error = false, state.practitioner_status_update.loading = true;
  }), _defineProperty(_extraReducers$1, PRACTITIONER_STATUS_CHANGE.rejected, function (state, action) {
    state.practitioner_status_update.loading = false, state.practitioner_status_update.error = true, state.practitioner_status_update = action.payload;
  }), _defineProperty(_extraReducers$1, GET_ENTITY_BY_ID.fulfilled, function (state, action) {
    state.get_entity_by_id.loading = false, state.get_entity_by_id.error = false, state.get_entity_by_id = action.payload;
  }), _defineProperty(_extraReducers$1, GET_ENTITY_BY_ID.pending, function (state, action) {
    state.get_entity_by_id.loading = true, state.get_entity_by_id.error = false, state.get_entity_by_id.loading = true;
  }), _defineProperty(_extraReducers$1, GET_ENTITY_BY_ID.rejected, function (state, action) {
    state.get_entity_by_id.loading = false, state.get_entity_by_id.error = true, state.get_entity_by_id = action.payload;
  }), _extraReducers$1)
});
var practitionerActions$1 = {
  PRACTITIONER_ROLE_READ: PRACTITIONER_ROLE_READ,
  PRACTITIONER_ROLE_UPSERT: PRACTITIONER_ROLE_UPSERT,
  PRACTITIONER_LIST_READ: PRACTITIONER_LIST_READ,
  PRACTITIONER_UPSERT: PRACTITIONER_UPSERT,
  PRACTITIONER_STATUS_CHANGE: PRACTITIONER_STATUS_CHANGE,
  GET_ENTITY_BY_ID: GET_ENTITY_BY_ID
};
var practitionerSlice$1 = practitionerSlice.reducer;

var _masterQuery;
var masterQuery = (_masterQuery = {
  "id_type": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='ALTERNATEIDTYPE' && CodeableConceptMaster.status == true\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  "id_number": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='RELATIONSHIP'\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  "prefix": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='NAMEPREFIX'\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  "suffix": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n        \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='NAMESUFFIX'\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  "gender": "{\n            \"db_name\": \"".concat(dbName, "\",\n            \"entity\": \"CodeableConceptMaster\",\n            \"filter\": \"CodeableConceptMaster.Type=='GENDER' AND DOCUMENT(CodeableConceptMaster.coding)[*].code ANY != 'ANY' AND DOCUMENT(CodeableConceptMaster.coding)[*].status ANY ==true\",\n            \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\",\n            \"sort\": \"document(CodeableConceptMaster.coding[0]).display\"\n    }"),
  "use": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n        \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='USE'\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  "practitioner_type": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='PRACTTYPE' && CodeableConceptMaster.status == true\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  "Communication_languages": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='LANGUAGE'\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  "speciality": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='SPECIALTY' && CodeableConceptMaster.status==true\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  // "entity": `{
  //     "db_name": "${dbName}",
  //     "entity": "Organization",
  //     "filter": "Organization.OrgType!=[]",
  //     "return_fields": "DISTINCT Organization.OrgType[0]"
  // }`,
  "entity": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='ORGTYPE' AND CodeableConceptMaster.activestatus==true\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN TO_ARRAY(CodeableConceptMaster.coding) RETURN DOCUMENT(cod))})\"\n    }"),
  // "entity_name": `{
  //     "db_name": "${dbName}",
  //     "entity": "Organization",
  //     "filter": "'Hospital' IN Organization.OrgType",
  //     "return_fields": "{OrgID:Organization.id,name:Organization.name}"
  // }`,
  "entity_name": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"Organization\",\n        \"filter\": \"Organization.activestatus==true\",\n        \"return_fields\": \"{_id:Organization._id,_key:Organization._key,id:Organization.id,name:Organization.name,alias:Organization.alias}\"\n    }"),
  "Address_use": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='USE'\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  "contact_mode": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='CONTACTSYSTEM'\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  "priority": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='PRIORITY'\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  "address_type": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='ADDRESSTYPE'\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  "role": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='PRACTROLE' && CodeableConceptMaster.status == true\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }"),
  "location": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"LocationMaster\",\n        \"sort\":\"LocationMaster.shortdesc\",\n        \"filter\": \"LocationMaster.activestatus==true && lower(LocationMaster.status)=='active'\", \n        \"return_fields\": \"LocationMaster\"\n    }"),
  "city": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"SMGeographicMaster\",\n        \"sort\":\"SMGeographicMaster.geogLevelName\",\n        \"filter\": \"SMGeographicMaster.geogLevelType=='CITY' && SMGeographicMaster.activestatus == true\",\n        \"return_fields\": \"{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode}\"\n    }"),
  "district": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"SMGeographicMaster\",\n         \"sort\":\"SMGeographicMaster.geogLevelName\",\n        \"filter\": \"SMGeographicMaster.geogLevelType=='DISTRICT' && SMGeographicMaster.geogLevelCode=='BLR' && SMGeographicMaster.activestatus == true\",\n        \"return_fields\": \"{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode}\"\n    }"),
  "state": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"SMGeographicMaster\",\n         \"sort\":\"SMGeographicMaster.geogLevelName\",\n        \"filter\": \"SMGeographicMaster.geogLevelType=='STATE' && SMGeographicMaster.geogLevelCode=='KAR' && SMGeographicMaster.activestatus == true\",\n        \"return_fields\": \"{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode}\"\n    }"),
  "country": "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"SMGeographicMaster\",\n         \"sort\":\"SMGeographicMaster.geogLevelName\",\n        \"filter\": \"SMGeographicMaster.geogLevelType=='COUNTRY' && SMGeographicMaster.activestatus == true\",\n        \"return_fields\": \"{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode}\"\n    }")
}, _defineProperty(_masterQuery, "country", "{\n        \"db_name\": \"primarycare\",\n        \"entity\": \"SMGeographicMaster\",\n        \"sort\": \"SMGeographicMaster.geogLevelName\",\n        \"filter\": \"document(SMGeographicMaster.geogLevelType).code=='GE002' && SMGeographicMaster.activestatus == true\",\n        \"return_fields\": \"{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,geogLevelCode:SMGeographicMaster.geogLevelCode,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode}\"\n    }"), _defineProperty(_masterQuery, "position", "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='POSITION' && CodeableConceptMaster.status==true\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }")), _defineProperty(_masterQuery, "employee_type", "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n         \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='EMPSTATUS' && CodeableConceptMaster.status==true\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }")), _defineProperty(_masterQuery, "marital_status", "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"CodeableConceptMaster\",\n        \"sort\":\"document(CodeableConceptMaster.coding[0]).display\",\n        \"filter\": \"CodeableConceptMaster.Type=='MARITALSTATUS' && CodeableConceptMaster.activestatus==true && CodeableConceptMaster.status == true\",\n        \"return_fields\": \"MERGE(CodeableConceptMaster,{coding:(FOR cod IN CodeableConceptMaster.coding RETURN DOCUMENT(cod))})\"\n    }")), _defineProperty(_masterQuery, "nationality", "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"SMGeographicMaster\",\n        \"sort\": \"SMGeographicMaster.geogLevelName\",\n        \"filter\": \"lower(document(SMGeographicMaster.geogLevelType).display)=='country' && SMGeographicMaster.activestatus == true && SMGeographicMaster.active== true\",\n        \"return_fields\": \"{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode}\"\n    }")), _defineProperty(_masterQuery, "country_code", "{\n        \"db_name\": \"".concat(dbName, "\",\n        \"entity\": \"SMGeographicMaster\",\n        \"sort\": \"SMGeographicMaster.GeoLocationISDCode\",\n        \"filter\": \"lower(document(SMGeographicMaster.geogLevelType).display)=='country' && SMGeographicMaster.activestatus == true && SMGeographicMaster.active == true\",\n        \"return_fields\": \"{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode,GeoLocationISDCode:SMGeographicMaster.GeoLocationISDCode}\"\n    }")), _masterQuery);
var masterqueries = {
  practitioner_location_rule: function practitioner_location_rule(type) {
    return {
      db_name: dbName,
      entity: "LocationMaster",
      sort: "LocationMaster.shortdesc",
      filter: "LocationMaster.managingOrgID=='".concat(type, "' && LocationMaster.activestatus==true && lower(LocationMaster.status)=='active'"),
      "return_fields": "LocationMaster"
    };
  },
  country: function country() {
    return {
      "db_name": dbName,
      "entity": "SMGeographicMaster",
      "sort": "SMGeographicMaster.geogLevelName",
      "filter": "document(SMGeographicMaster.geogLevelType).code=='GE002' && SMGeographicMaster.activestatus == true",
      "return_fields": "{_id:SMGeographicMaster._id,id:SMGeographicMaster.id,geogLevelName:SMGeographicMaster.geogLevelName,geogLevelCode:SMGeographicMaster.geogLevelCode,parentGeogLevelType:SMGeographicMaster.parentGeogLevelType,parentGeogLevelCode:SMGeographicMaster.parentGeogLevelCode}"
    };
  },
  state_by_country: function state_by_country(geogLevelCode) {
    return {
      "db_name": dbName,
      "entity": "SMGeographicMaster",
      "filter": "SMGeographicMaster.activestatus==true && lower(document(SMGeographicMaster.geogLevelType).display)=='state' && lower(document(SMGeographicMaster.parentGeogLevelCode).geogLevelCode)==lower('".concat(geogLevelCode, "')"),
      "return_fields": "{_id:SMGeographicMaster._id, id:SMGeographicMaster.id, geogLevelType:document(SMGeographicMaster.geogLevelType), geogLevelCode:SMGeographicMaster.geogLevelCode, geogLevelName:SMGeographicMaster.geogLevelName, parentGeogLevelType:document(SMGeographicMaster.parentGeogLevelType), parentGeogLevelCode:document(SMGeographicMaster.parentGeogLevelCode), active: SMGeographicMaster.activestatus,_key:SMGeographicMaster._key}"
    };
  },
  district_by_state: function district_by_state(geogLevelCode) {
    return {
      "db_name": dbName,
      "entity": "SMGeographicMaster",
      "filter": "SMGeographicMaster.activestatus==true && lower(document(SMGeographicMaster.geogLevelType).display)=='district' && lower(document(SMGeographicMaster.parentGeogLevelCode).geogLevelCode)==lower('".concat(geogLevelCode, "')"),
      "return_fields": "{_id:SMGeographicMaster._id, id:SMGeographicMaster.id, geogLevelType:document(SMGeographicMaster.geogLevelType), geogLevelCode:SMGeographicMaster.geogLevelCode, geogLevelName:SMGeographicMaster.geogLevelName, parentGeogLevelType:document(SMGeographicMaster.parentGeogLevelType), parentGeogLevelCode:document(SMGeographicMaster.parentGeogLevelCode), active: SMGeographicMaster.activestatus,_key:SMGeographicMaster._key}"
    };
  },
  city_by_district: function city_by_district(geogLevelCode) {
    return {
      "db_name": dbName,
      "entity": "SMGeographicMaster",
      "filter": "SMGeographicMaster.activestatus==true && lower(document(SMGeographicMaster.geogLevelType).display)=='city' && lower(document(SMGeographicMaster.parentGeogLevelCode).geogLevelCode)==lower('".concat(geogLevelCode, "')"),
      "return_fields": "{_id:SMGeographicMaster._id, id:SMGeographicMaster.id, geogLevelType:document(SMGeographicMaster.geogLevelType), geogLevelCode:SMGeographicMaster.geogLevelCode, geogLevelName:SMGeographicMaster.geogLevelName, parentGeogLevelType:document(SMGeographicMaster.parentGeogLevelType), parentGeogLevelCode:document(SMGeographicMaster.parentGeogLevelCode), active: SMGeographicMaster.activestatus,_key:SMGeographicMaster._key}"
    };
  },
  pincode_by_city: function pincode_by_city(geogLevelCode) {
    return {
      "db_name": dbName,
      "entity": "SMGeographicMaster",
      "filter": "SMGeographicMaster.activestatus==true && lower(document(SMGeographicMaster.geogLevelType).display)=='pincode' && lower(document(SMGeographicMaster.parentGeogLevelCode).geogLevelCode)==lower('".concat(geogLevelCode, "')"),
      "return_fields": "{_id:SMGeographicMaster._id, id:SMGeographicMaster.id, geogLevelType:document(SMGeographicMaster.geogLevelType), geogLevelCode:SMGeographicMaster.geogLevelCode, geogLevelName:SMGeographicMaster.geogLevelName, parentGeogLevelType:document(SMGeographicMaster.parentGeogLevelType), parentGeogLevelCode:document(SMGeographicMaster.parentGeogLevelCode), active: SMGeographicMaster.activestatus,_key:SMGeographicMaster._key}"
    };
  },
  state_by_country_: function state_by_country_() {
    return {
      "db_name": dbName,
      "entity": "SMGeographicMaster",
      "filter": "SMGeographicMaster.activestatus==true && lower(document(SMGeographicMaster.geogLevelType).display)=='state'",
      "return_fields": "{_id:SMGeographicMaster._id, id:SMGeographicMaster.id, geogLevelType:document(SMGeographicMaster.geogLevelType), geogLevelCode:SMGeographicMaster.geogLevelCode, geogLevelName:SMGeographicMaster.geogLevelName, parentGeogLevelType:document(SMGeographicMaster.parentGeogLevelType), parentGeogLevelCode:document(SMGeographicMaster.parentGeogLevelCode), active: SMGeographicMaster.activestatus,_key:SMGeographicMaster._key}"
    };
  },
  district_by_state_: function district_by_state_() {
    return {
      "db_name": dbName,
      "entity": "SMGeographicMaster",
      "filter": "SMGeographicMaster.activestatus==true && lower(document(SMGeographicMaster.geogLevelType).display)=='district'",
      "return_fields": "{_id:SMGeographicMaster._id, id:SMGeographicMaster.id, geogLevelType:document(SMGeographicMaster.geogLevelType), geogLevelCode:SMGeographicMaster.geogLevelCode, geogLevelName:SMGeographicMaster.geogLevelName, parentGeogLevelType:document(SMGeographicMaster.parentGeogLevelType), parentGeogLevelCode:document(SMGeographicMaster.parentGeogLevelCode), active: SMGeographicMaster.activestatus,_key:SMGeographicMaster._key}"
    };
  },
  city_by_district_: function city_by_district_() {
    return {
      "db_name": dbName,
      "entity": "SMGeographicMaster",
      "filter": "SMGeographicMaster.activestatus==true && lower(document(SMGeographicMaster.geogLevelType).display)=='city'",
      "return_fields": "{_id:SMGeographicMaster._id, id:SMGeographicMaster.id, geogLevelType:document(SMGeographicMaster.geogLevelType), geogLevelCode:SMGeographicMaster.geogLevelCode, geogLevelName:SMGeographicMaster.geogLevelName, parentGeogLevelType:document(SMGeographicMaster.parentGeogLevelType), parentGeogLevelCode:document(SMGeographicMaster.parentGeogLevelCode), active: SMGeographicMaster.activestatus,_key:SMGeographicMaster._key}"
    };
  },
  pincode_by_city_: function pincode_by_city_() {
    return {
      "db_name": dbName,
      "entity": "SMGeographicMaster",
      "filter": "SMGeographicMaster.activestatus==true && lower(document(SMGeographicMaster.geogLevelType).display)=='pincode'",
      "return_fields": "{_id:SMGeographicMaster._id, id:SMGeographicMaster.id, geogLevelType:document(SMGeographicMaster.geogLevelType), geogLevelCode:SMGeographicMaster.geogLevelCode, geogLevelName:SMGeographicMaster.geogLevelName, parentGeogLevelType:document(SMGeographicMaster.parentGeogLevelType), parentGeogLevelCode:document(SMGeographicMaster.parentGeogLevelCode), active: SMGeographicMaster.activestatus,_key:SMGeographicMaster._key}"
    };
  }
};

var getOptionWithMaster = function getOptionWithMaster(data) {
  var getoptions = [];

  if (data && (data === null || data === void 0 ? void 0 : data.length) > 0) {
    data.map(function (val) {
      getoptions.push(_objectSpread2({
        label: val.coding ? val.coding[0] ? val.coding[0].display : "" : val,
        value: val._id
      }, val));
    });
  }

  return getoptions;
};

var getmasterOprions = function getmasterOprions(key, value, master, valueKey) {
  var list = [];

  if (value && (value === null || value === void 0 ? void 0 : value.length) > 0) {
    list = master[key].filter(function (val) {
      return val[valueKey ? valueKey : "value"] === value;
    }) ? master[key].filter(function (val) {
      return val[valueKey ? valueKey : "value"] === value;
    }) : [];
  }

  return list;
};

var contactListData = function contactListData(data, masters) {
  var list = [];

  if (data && (data === null || data === void 0 ? void 0 : data.length) > 0) {
    data.map(function (val) {
      var contactData = {
        "mode": getmasterOprions("contact_mode", val.system, masters)[0],
        "mobile": val.value ? val.value : "",
        "use": getmasterOprions("Address_use", val.use, masters)[0],
        "priority": getmasterOprions("priority", "".concat(val.rank), masters)[0],
        "country_code": getmasterOprions("country_code", val.valueprefix, masters)[0]
      };
      list.push(contactData);
    });
  }

  return list;
};

var addressListData = function addressListData(data, masters) {
  var list = [];

  if (data && (data === null || data === void 0 ? void 0 : data.length) > 0) {
    data.map(function (val) {
      var _val$text, _val$line, _val$postalCode;

      var addresslistData = {
        "use": getmasterOprions("Address_use", val.use, masters)[0],
        "addressLine1": val.text && ((_val$text = val.text) === null || _val$text === void 0 ? void 0 : _val$text.length) > 0 ? val.text : "",
        "addressLine2": val.line && ((_val$line = val.line) === null || _val$line === void 0 ? void 0 : _val$line.length) > 0 ? val.line : "",
        "city": getmasterOprions("city", val.city, masters)[0],
        "district": getmasterOprions("district", val === null || val === void 0 ? void 0 : val.district, masters)[0],
        "state": getmasterOprions("state", val === null || val === void 0 ? void 0 : val.state, masters)[0],
        "pincode": val.postalCode && ((_val$postalCode = val.postalCode) === null || _val$postalCode === void 0 ? void 0 : _val$postalCode.length) > 0 ? val.postalCode : "",
        "country": getmasterOprions("country", val.country, masters)[0],
        "type": getmasterOprions("address_type", val.Type, masters)[0]
      };
      list.push(addresslistData);
    });
  }

  return list;
};

var getGeoData = function getGeoData(id, dropDownData) {
  var obj = {};

  if (id) {
    if (Array.isArray(dropDownData)) {
      //return dropDownData?.filter(val => val?._id === id)
      dropDownData === null || dropDownData === void 0 ? void 0 : dropDownData.map(function (val) {
        if ((val === null || val === void 0 ? void 0 : val._id) === id) {
          obj = _objectSpread2({
            label: val.geogLevelName,
            value: val._id
          }, val);
        }
      });
    }
  }

  return obj;
};

var generateReadJSON = function generateReadJSON(data, masters, countryData, stateData, districtData, cityData, pincodeData) {
  var _data$identifier, _data$name, _data$communication, _data$telecom, _data$practitioner_ro, _data$address, _data$qualification, _data$publication_det, _data$training_detail, _data$job_experience, _data$achievements_aw, _data$gender, _data$marital_status, _data$nationality, _data$practitioner_ty, _data$position, _data$employee_status;

  var identifier = [];

  if (data.identifier && ((_data$identifier = data.identifier) === null || _data$identifier === void 0 ? void 0 : _data$identifier.length) > 0) {
    data.identifier.map(function (val) {
      var _val$user;

      var identifierData = {
        "id_type": ((_val$user = val.user) === null || _val$user === void 0 ? void 0 : _val$user.length) > 0 && masters.id_type.filter(function (idlabel) {
          return idlabel.value === val.user;
        })[0] ? masters.id_type.filter(function (idlabel) {
          return idlabel.value === val.user;
        })[0] : {},
        "id_number": val.value,
        "expiry_date": val.period[0].end ? moment.unix(val.period[0].end).format("YYYY-MM-DD") : null,
        "doc": val.files
      };
      identifier.push(identifierData);
    });
  }

  var nameslist = [];

  if (data.name && ((_data$name = data.name) === null || _data$name === void 0 ? void 0 : _data$name.length) > 0) {
    data.name.map(function (val) {
      var namedatas = {
        use: val.use ? masters.use.filter(function (idlabel) {
          return idlabel.value === val.use;
        })[0] : {},
        prefix: val.prefix ? masters.prefix.filter(function (idlabel) {
          return idlabel.value === val.prefix;
        })[0] : {},
        first_name: val.text,
        middle_name: val.given,
        last_name: val.family,
        suffix: val.suffix ? masters.suffix.filter(function (idlabel) {
          return idlabel.value === val.suffix;
        })[0] : {}
      };
      nameslist.push(namedatas);
    });
  }

  var getlanguageoptions = [];

  if (data.communication && ((_data$communication = data.communication) === null || _data$communication === void 0 ? void 0 : _data$communication.length) > 0) {
    data.communication.map(function (val) {
      var languageoptionsData = _objectSpread2({
        label: val.coding ? val.coding[0] ? val.coding[0].display : "" : val,
        value: val._id
      }, val);

      getlanguageoptions.push(languageoptionsData);
    });
  }

  var contactlist = [];

  if (data.telecom && ((_data$telecom = data.telecom) === null || _data$telecom === void 0 ? void 0 : _data$telecom.length) > 0) {
    data.telecom.map(function (val) {
      var contactData = {
        "mode": getmasterOprions("contact_mode", val.system, masters)[0],
        "mobile": val.value ? val.value : "",
        "use": getmasterOprions("Address_use", val.use, masters)[0],
        "priority": getmasterOprions("priority", "".concat(val.rank), masters)[0],
        "country_code": getmasterOprions("country_code", val.valueprefix, masters)[0]
      };
      contactlist.push(contactData);
    });
  }

  var practitionerbyrolelist = [];

  if (data.practitioner_role && ((_data$practitioner_ro = data.practitioner_role) === null || _data$practitioner_ro === void 0 ? void 0 : _data$practitioner_ro.length) > 0) {
    data.practitioner_role.map(function (val) {
      var _val$OrgID, _val$role, _val$period, _val$period2;

      var practitionerData = {
        speciality: getmasterOprions("speciality", val.SpecialtyID, masters)[0],
        select_entity: getmasterOprions("entity", val.EntityType, masters, "_id")[0],
        entity_name: val.OrgID && ((_val$OrgID = val.OrgID) === null || _val$OrgID === void 0 ? void 0 : _val$OrgID.length) > 0 ? masters["entity_name"].filter(function (valss) {
          return valss.value.toString() === val.OrgID;
        })[0] : {},
        select_location: getmasterOprions("location", val.locationID, masters)[0],
        primary_specialty: val.primary_specialty ? val.primary_specialty : false,
        select_role: getmasterOprions("role", val.role && ((_val$role = val.role) === null || _val$role === void 0 ? void 0 : _val$role.length) > 0 ? val.role[0]._id : null, masters)[0],
        status: val.active ? val.active : false,
        start_date: val.period && ((_val$period = val.period) === null || _val$period === void 0 ? void 0 : _val$period.length) > 0 && val.period[0].start ? utcTOLocal(val.period[0].start, "YYYY-MM-DD") : null,
        end_date: val.period && ((_val$period2 = val.period) === null || _val$period2 === void 0 ? void 0 : _val$period2.length) > 0 && val.period[0].end ? utcTOLocal(val.period[0].end, "YYYY-MM-DD") : null,
        contact: contactListData(val.telecom, masters),
        doc: val.files ? val.files : [],
        // "telecom": contactList(val.contact),
        _key: val === null || val === void 0 ? void 0 : val._key
      };
      practitionerbyrolelist.push(practitionerData);
    });
  }

  var addresslist = [];

  if (data.address && ((_data$address = data.address) === null || _data$address === void 0 ? void 0 : _data$address.length) > 0) {
    data.address.map(function (val) {
      var _val$text2, _val$line2;

      var addresslistData = {
        "use": getmasterOprions("Address_use", val.use, masters)[0],
        "addressLine1": val.text && ((_val$text2 = val.text) === null || _val$text2 === void 0 ? void 0 : _val$text2.length) > 0 ? val.text : "",
        "addressLine2": val.line && ((_val$line2 = val.line) === null || _val$line2 === void 0 ? void 0 : _val$line2.length) > 0 ? val.line : "",
        // "city": getmasterOprions("city", val.city, masters)[0],
        // "district": getmasterOprions("district", val.district, masters)[0],
        // "state": getmasterOprions("state", val.state, masters)[0],
        // "pincode": (val.postalCode && val.postalCode?.length > 0) ? val.postalCode : "",
        // "country": getmasterOprions("country", val.country, masters)[0],
        "city": getGeoData(val === null || val === void 0 ? void 0 : val.city, cityData),
        "district": getGeoData(val === null || val === void 0 ? void 0 : val.district, districtData),
        "state": getGeoData(val === null || val === void 0 ? void 0 : val.state, stateData),
        "pincode": getGeoData(val.postalCode, pincodeData),
        "country": getGeoData(val.country, countryData),
        "type": getmasterOprions("address_type", val.Type, masters)[0]
      };
      addresslist.push(addresslistData);
    });
  }

  var qualificationList = [];

  if (data.qualification && ((_data$qualification = data.qualification) === null || _data$qualification === void 0 ? void 0 : _data$qualification.length) > 0) {
    data.qualification.map(function (val) {
      var qualificationData = {
        "name": val.name ? val.name : "",
        "qualification_name": val.university_board ? val.university_board : "",
        "issued_by": val.issue_date ? utcTOLocal(val.issue_date, "YYYY-MM-DD") : null,
        "start_date": val.valid_from ? utcTOLocal(val.valid_from, "YYYY-MM-DD") : null,
        "end_date": val.valid_to ? utcTOLocal(val.valid_to, "YYYY-MM-DD") : null,
        "doc": val.files ? val.files : []
      };
      qualificationList.push(qualificationData);
    });
  }

  var PublicationList = [];

  if (data.publication_details && ((_data$publication_det = data.publication_details) === null || _data$publication_det === void 0 ? void 0 : _data$publication_det.length) > 0) {
    data.publication_details.map(function (val) {
      var PublicationListdata = {
        "description": val.description ? val.description : "",
        "link": val.link ? val.link : ""
      };
      PublicationList.push(PublicationListdata);
    });
  }

  var trainingList = [];

  if (data.training_details && ((_data$training_detail = data.training_details) === null || _data$training_detail === void 0 ? void 0 : _data$training_detail.length) > 0) {
    data.training_details.map(function (val) {
      var _val$training_contact, _val$training_address;

      var trainingListData = {
        "organization": val.organization ? val.organization : "",
        "course_name": val.course_name ? val.course_name : "",
        "responsible_person": val.responsible_person ? val.responsible_person : "",
        "course_start_date": val.course_start_date ? utcTOLocal(val.course_start_date, "YYYY-MM-DD") : null,
        "course_end_date": val.course_end_date ? utcTOLocal(val.course_end_date, "YYYY-MM-DD") : null,
        "certificate_issue_date": val.certificate_issued_date ? utcTOLocal(val.certificate_issued_date, "YYYY-MM-DD") : null,
        "certificate_expiry_date": val.certificate_expiry_date ? utcTOLocal(val.certificate_expiry_date, "YYYY-MM-DD") : null,
        "doc": val.files ? val.files : [],
        "contact": contactListData((_val$training_contact = val === null || val === void 0 ? void 0 : val.training_contact_details) !== null && _val$training_contact !== void 0 ? _val$training_contact : [], masters),
        "address": addressListData((_val$training_address = val === null || val === void 0 ? void 0 : val.training_address) !== null && _val$training_address !== void 0 ? _val$training_address : [], masters)
      };
      trainingList.push(trainingListData);
    });
  }

  var jobList = [];

  if (data.job_experience && ((_data$job_experience = data.job_experience) === null || _data$job_experience === void 0 ? void 0 : _data$job_experience.length) > 0) {
    data.job_experience.map(function (val) {
      var jobListData = {
        "organization": val.organization ? val.organization : "",
        "department": val.department ? val.department : "",
        "designation": val.designation ? val.designation : "",
        "role": val.role ? val.role : "",
        "start_date": val.start_date ? utcTOLocal(val.start_date, "YYYY-MM-DD") : null,
        "end_date": val.end_date ? utcTOLocal(val.end_date, "YYYY-MM-DD") : null,
        "reporting_to": val.report_to ? val.report_to : "",
        "grade": val.grade ? val.grade : "",
        "pay_scale": val.pay_scale ? val.pay_scale : "",
        "job_description": val.job_description ? val.job_description : "",
        "doc": val.files ? val.files : [],
        "sequence_no": val.sequence_no ? val.sequence_no : "",
        "contact": contactListData(val.jobexperience_contact_details, masters),
        "address": addressListData(val.jobexperience_address, masters)
      };
      jobList.push(jobListData);
    });
  }

  var awardsList = [];

  if (data.achievements_awards_details && ((_data$achievements_aw = data.achievements_awards_details) === null || _data$achievements_aw === void 0 ? void 0 : _data$achievements_aw.length) > 0) {
    data.achievements_awards_details.map(function (val) {
      var awardsListData = {
        "organization": val.organization ? val.organization : "",
        "type": val.type ? val.type : "",
        "title": val.title ? val.title : "",
        "notes": val.note ? val.note : "",
        "date": val.date ? utcTOLocal(val.date, "YYYY-MM-DD") : null,
        "doc": val.files ? val.files : []
      };
      awardsList.push(awardsListData);
    });
  }

  var json = {
    identification: identifier,
    names: nameslist ? nameslist : [{}],
    details: {
      "practitoner_id": data.practitioner_id,
      "gender": ((_data$gender = data.gender) === null || _data$gender === void 0 ? void 0 : _data$gender.length) > 0 && masters.gender.filter(function (idlabel) {
        return idlabel.value === data.gender[0]._id;
      })[0] ? masters.gender.filter(function (idlabel) {
        return idlabel.value === data.gender[0]._id;
      })[0] : {},
      "dob": data.birthDate ? moment.unix(data.birthDate).format("YYYY-MM-DD") : null,
      "marital_status": ((_data$marital_status = data.marital_status) === null || _data$marital_status === void 0 ? void 0 : _data$marital_status.length) > 0 && masters.marital_status.filter(function (idlabel) {
        return idlabel.value === data.marital_status[0]._id;
      })[0] ? masters.marital_status.filter(function (idlabel) {
        return idlabel.value === data.marital_status[0]._id;
      })[0] : {},
      "nationality": ((_data$nationality = data.nationality) === null || _data$nationality === void 0 ? void 0 : _data$nationality.length) > 0 && masters.nationality.filter(function (idlabel) {
        return idlabel.value === data.nationality[0]._id;
      })[0] ? masters.nationality.filter(function (idlabel) {
        return idlabel.value === data.nationality[0]._id;
      })[0] : {},
      "status": data.status,
      "biography_description": data.biography && data.biography[0] && data.biography[0].biography_description ? data.biography[0].biography_description : "",
      "photo": {
        "fileName": data.photo && data.photo[0] && data.photo[0].fileName ? data.photo[0].fileName : "",
        "fileid": data.photo && data.photo[0] && data.photo[0].fileid ? data.photo[0].fileid : "",
        "filetype": data.photo && data.photo[0] && data.photo[0].filetype ? data.photo[0].filetype : "",
        "objectid": data.photo && data.photo[0] && data.photo[0].objectid ? data.photo[0].objectid : ""
      }
    },
    practitioner_description: {
      "practitioner_type": data.practitioner_type && ((_data$practitioner_ty = data.practitioner_type) === null || _data$practitioner_ty === void 0 ? void 0 : _data$practitioner_ty.length) > 0 ? getOptionWithMaster(data.practitioner_type)[0] ? getOptionWithMaster(data.practitioner_type)[0] : {} : {},
      "position": data.position && ((_data$position = data.position) === null || _data$position === void 0 ? void 0 : _data$position.length) > 0 ? getOptionWithMaster(data.position)[0] ? getOptionWithMaster(data.position)[0] : {} : {},
      "employee_type": data.employee_status && ((_data$employee_status = data.employee_status) === null || _data$employee_status === void 0 ? void 0 : _data$employee_status.length) > 0 ? getOptionWithMaster(data.employee_status)[0] ? getOptionWithMaster(data.employee_status)[0] : {} : {},
      "communication_languages": getlanguageoptions
    },
    practitionerbyrole: practitionerbyrolelist,
    // communication: {},
    contact: contactlist,
    // Submitrole: {},
    address: addresslist,
    publication: PublicationList,
    // reporting: {},
    qualification: qualificationList,
    training: trainingList,
    job: jobList,
    awards: awardsList
  };
  return json;
};

var _extraReducers;
var location = ["nationality", "city", "district", "state", "country"];

var loopMasters = function loopMasters() {
  return new es6Promise.Promise( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
      var calls;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              calls = Object.keys(masterQuery).map( /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(val) {
                  return _regeneratorRuntime().wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return fetchMaster(val, masterQuery[val]);

                        case 2:
                          return _context.abrupt("return", _context.sent);

                        case 3:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x3) {
                  return _ref2.apply(this, arguments);
                };
              }());
              es6Promise.Promise.all(calls).then(function (data) {
                var json = {};
                data.map(function (val) {
                  var arr = [];
                  val.data.map(function (value) {
                    if ("country_code" === val.name) {
                      arr.push(_objectSpread2({
                        label: value.GeoLocationISDCode,
                        value: value._id
                      }, value));
                    } else if ("location" === val.name) {
                      if (value.shortdesc) {
                        arr.push(_objectSpread2({
                          label: value.shortdesc,
                          value: value._id
                        }, value));
                      }
                    } else if ("entity" === val.name) {
                      arr.push(_objectSpread2({
                        label: value.coding ? value.coding[0] ? value.coding[0].display : "" : val,
                        value: value.coding ? value.coding[0] ? value.coding[0]._id : "" : val
                      }, value));
                    } else if (["entity_name"].indexOf(val.name) === 0) {
                      arr.push(_objectSpread2({
                        label: value.name ? value.name : "",
                        value: value._id ? value._id : ""
                      }, value));
                    } else if (location.indexOf(val.name) === -1) {
                      if (val.name === "Address_use" || val.name === "address_type" || val.name === "contact_mode") {
                        var _value$coding, _value$coding$;

                        arr.push(_objectSpread2({
                          label: value.coding ? value.coding[0] ? value.coding[0].display : "" : val,
                          value: (_value$coding = value.coding) === null || _value$coding === void 0 ? void 0 : (_value$coding$ = _value$coding[0]) === null || _value$coding$ === void 0 ? void 0 : _value$coding$._id
                        }, value));
                      } else {
                        arr.push(_objectSpread2({
                          label: value.coding ? value.coding[0] ? value.coding[0].display : "" : val,
                          value: value._id
                        }, value));
                      }
                    } else {
                      arr.push(_objectSpread2({
                        label: value.geogLevelName,
                        value: value._id
                      }, value));
                    }
                  });
                  json[val.name] = arr;
                  resolve(json);
                });
              })["catch"](function (err) {
                resolve([]);
              });

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());
};

var fetchMaster = function fetchMaster(name, query) {
  return new es6Promise.Promise( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(resolve, reject) {
      var data;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return fetchData({
                body: query
              }, __readDocumentUrl__);

            case 2:
              data = _context3.sent;
              resolve({
                data: data.result,
                name: name
              });

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }());
};

var PRACTITIONER_MASTERS = createAsyncThunk("practitionerMasterSlice/practitionerlist", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
  var payload,
      _ref5,
      rejectWithValue,
      data,
      _args4 = arguments;

  return _regeneratorRuntime().wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          payload = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
          _ref5 = _args4.length > 1 ? _args4[1] : undefined, rejectWithValue = _ref5.rejectWithValue;
          _context4.prev = 2;
          payload.type;
          _context4.next = 6;
          return loopMasters();

        case 6:
          data = _context4.sent;
          return _context4.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.Info), {}, {
            data: data
          }));

        case 10:
          _context4.prev = 10;
          _context4.t0 = _context4["catch"](2);
          return _context4.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context4.t0.message
          })));

        case 13:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4, null, [[2, 10]]);
})));
var PRACTITIONER_LOCATION_MASTERS = createAsyncThunk("practitionerMasterSlice/practitionerLocationMaster", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
  var payload,
      _ref7,
      rejectWithValue,
      _data$result,
      type,
      data,
      arr,
      _args5 = arguments;

  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          payload = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
          _ref7 = _args5.length > 1 ? _args5[1] : undefined, rejectWithValue = _ref7.rejectWithValue;
          _context5.prev = 2;
          type = payload.type;
          _context5.next = 6;
          return fetchData({
            body: JSON.stringify(masterqueries.practitioner_location_rule(type))
          }, __readDocumentUrl__);

        case 6:
          data = _context5.sent;
          arr = [];

          if ((data === null || data === void 0 ? void 0 : (_data$result = data.result) === null || _data$result === void 0 ? void 0 : _data$result.length) > 0) {
            data.result.map(function (v) {
              var _v$longdesc, _v$_id;

              arr.push({
                label: (_v$longdesc = v === null || v === void 0 ? void 0 : v.longdesc) !== null && _v$longdesc !== void 0 ? _v$longdesc : '',
                value: (_v$_id = v === null || v === void 0 ? void 0 : v._id) !== null && _v$_id !== void 0 ? _v$_id : ''
              });
            });
          }

          return _context5.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arr
          }));

        case 12:
          _context5.prev = 12;
          _context5.t0 = _context5["catch"](2);
          return _context5.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context5.t0.message
          })));

        case 15:
        case "end":
          return _context5.stop();
      }
    }
  }, _callee5, null, [[2, 12]]);
})));
var PRACTITIONER_GET_BY_ID = createAsyncThunk("practitionerMasterSlice/practitionerbyid", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
  var payload,
      _ref9,
      rejectWithValue,
      id,
      masterlist,
      data,
      country_data,
      state_data,
      district_data,
      city_data,
      pincode_data,
      readJSON,
      _args6 = arguments;

  return _regeneratorRuntime().wrap(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          payload = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
          _ref9 = _args6.length > 1 ? _args6[1] : undefined, rejectWithValue = _ref9.rejectWithValue;
          _context6.prev = 2;
          id = payload.id;
          _context6.next = 6;
          return loopMasters();

        case 6:
          masterlist = _context6.sent;
          _context6.next = 9;
          return fetchData({
            body: JSON.stringify(queries.practitioner_by_id(id))
          }, __readDocumentUrl__);

        case 9:
          data = _context6.sent;
          _context6.next = 12;
          return fetchData({
            body: JSON.stringify(masterqueries.country())
          }, __readDocumentUrl__);

        case 12:
          country_data = _context6.sent;
          _context6.next = 15;
          return fetchData({
            body: JSON.stringify(masterqueries.state_by_country_())
          }, __readDocumentUrl__);

        case 15:
          state_data = _context6.sent;
          _context6.next = 18;
          return fetchData({
            body: JSON.stringify(masterqueries.district_by_state_())
          }, __readDocumentUrl__);

        case 18:
          district_data = _context6.sent;
          _context6.next = 21;
          return fetchData({
            body: JSON.stringify(masterqueries.city_by_district_())
          }, __readDocumentUrl__);

        case 21:
          city_data = _context6.sent;
          _context6.next = 24;
          return fetchData({
            body: JSON.stringify(masterqueries.pincode_by_city_())
          }, __readDocumentUrl__);

        case 24:
          pincode_data = _context6.sent;
          readJSON = generateReadJSON(data.result[0] ? data.result[0] : null, masterlist, country_data === null || country_data === void 0 ? void 0 : country_data.result, state_data === null || state_data === void 0 ? void 0 : state_data.result, district_data === null || district_data === void 0 ? void 0 : district_data.result, city_data === null || city_data === void 0 ? void 0 : city_data.result, pincode_data === null || pincode_data === void 0 ? void 0 : pincode_data.result);
          return _context6.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: readJSON
          }));

        case 29:
          _context6.prev = 29;
          _context6.t0 = _context6["catch"](2);
          return _context6.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context6.t0.message
          })));

        case 32:
        case "end":
          return _context6.stop();
      }
    }
  }, _callee6, null, [[2, 29]]);
})));
var PRACTITIONER_COUNTRY_MASTER = createAsyncThunk("practitionerMasterSlice/practitioner_country_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
  var payload,
      _ref11,
      rejectWithValue,
      _data$result2,
      data,
      arr,
      _args7 = arguments;

  return _regeneratorRuntime().wrap(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          payload = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
          _ref11 = _args7.length > 1 ? _args7[1] : undefined, rejectWithValue = _ref11.rejectWithValue;
          _context7.prev = 2;

          _objectDestructuringEmpty(payload);

          _context7.next = 6;
          return fetchData({
            body: JSON.stringify(masterqueries.country())
          }, __readDocumentUrl__);

        case 6:
          data = _context7.sent;
          arr = [];

          if (Array.isArray(data.result) && (data === null || data === void 0 ? void 0 : (_data$result2 = data.result) === null || _data$result2 === void 0 ? void 0 : _data$result2.length) > 0) {
            data === null || data === void 0 ? void 0 : data.result.map(function (val) {
              arr.push(_objectSpread2({
                label: val.geogLevelName,
                value: val._id
              }, val));
            });
          }

          return _context7.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arr
          }));

        case 12:
          _context7.prev = 12;
          _context7.t0 = _context7["catch"](2);
          return _context7.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context7.t0.message
          })));

        case 15:
        case "end":
          return _context7.stop();
      }
    }
  }, _callee7, null, [[2, 12]]);
})));
var PRACTITIONER_STATE_MASTER = createAsyncThunk("practitionerMasterSlice/practitioner_state_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
  var payload,
      _ref13,
      rejectWithValue,
      _data$result3,
      geogLevelCode,
      data,
      arr,
      _args8 = arguments;

  return _regeneratorRuntime().wrap(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          payload = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
          _ref13 = _args8.length > 1 ? _args8[1] : undefined, rejectWithValue = _ref13.rejectWithValue;
          _context8.prev = 2;
          geogLevelCode = payload.geogLevelCode;
          _context8.next = 6;
          return fetchData({
            body: JSON.stringify(masterqueries.state_by_country(geogLevelCode))
          }, __readDocumentUrl__);

        case 6:
          data = _context8.sent;
          arr = [];

          if (Array.isArray(data.result) && (data === null || data === void 0 ? void 0 : (_data$result3 = data.result) === null || _data$result3 === void 0 ? void 0 : _data$result3.length) > 0) {
            data === null || data === void 0 ? void 0 : data.result.map(function (val) {
              arr.push(_objectSpread2({
                label: val.geogLevelName,
                value: val._id
              }, val));
            });
          }

          return _context8.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arr
          }));

        case 12:
          _context8.prev = 12;
          _context8.t0 = _context8["catch"](2);
          return _context8.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context8.t0.message
          })));

        case 15:
        case "end":
          return _context8.stop();
      }
    }
  }, _callee8, null, [[2, 12]]);
})));
var PRACTITIONER_DISTRICT_MASTER = createAsyncThunk("practitionerMasterSlice/practitioner_district_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
  var payload,
      _ref15,
      rejectWithValue,
      _data$result4,
      geogLevelCode,
      data,
      arr,
      _args9 = arguments;

  return _regeneratorRuntime().wrap(function _callee9$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          payload = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};
          _ref15 = _args9.length > 1 ? _args9[1] : undefined, rejectWithValue = _ref15.rejectWithValue;
          _context9.prev = 2;
          geogLevelCode = payload.geogLevelCode;
          _context9.next = 6;
          return fetchData({
            body: JSON.stringify(masterqueries.district_by_state(geogLevelCode))
          }, __readDocumentUrl__);

        case 6:
          data = _context9.sent;
          arr = [];

          if (Array.isArray(data.result) && (data === null || data === void 0 ? void 0 : (_data$result4 = data.result) === null || _data$result4 === void 0 ? void 0 : _data$result4.length) > 0) {
            data === null || data === void 0 ? void 0 : data.result.map(function (val) {
              arr.push(_objectSpread2({
                label: val.geogLevelName,
                value: val._id
              }, val));
            });
          }

          return _context9.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arr
          }));

        case 12:
          _context9.prev = 12;
          _context9.t0 = _context9["catch"](2);
          return _context9.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context9.t0.message
          })));

        case 15:
        case "end":
          return _context9.stop();
      }
    }
  }, _callee9, null, [[2, 12]]);
})));
var PRACTITIONER_CITY_MASTER = createAsyncThunk("practitionerMasterSlice/practitioner_city_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
  var payload,
      _ref17,
      rejectWithValue,
      _data$result5,
      geogLevelCode,
      data,
      arr,
      _args10 = arguments;

  return _regeneratorRuntime().wrap(function _callee10$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          payload = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};
          _ref17 = _args10.length > 1 ? _args10[1] : undefined, rejectWithValue = _ref17.rejectWithValue;
          _context10.prev = 2;
          geogLevelCode = payload.geogLevelCode;
          _context10.next = 6;
          return fetchData({
            body: JSON.stringify(masterqueries.city_by_district(geogLevelCode))
          }, __readDocumentUrl__);

        case 6:
          data = _context10.sent;
          arr = [];

          if (Array.isArray(data.result) && (data === null || data === void 0 ? void 0 : (_data$result5 = data.result) === null || _data$result5 === void 0 ? void 0 : _data$result5.length) > 0) {
            data === null || data === void 0 ? void 0 : data.result.map(function (val) {
              arr.push(_objectSpread2({
                label: val.geogLevelName,
                value: val._id
              }, val));
            });
          }

          return _context10.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arr
          }));

        case 12:
          _context10.prev = 12;
          _context10.t0 = _context10["catch"](2);
          return _context10.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context10.t0.message
          })));

        case 15:
        case "end":
          return _context10.stop();
      }
    }
  }, _callee10, null, [[2, 12]]);
})));
var PRACTITIONER_PINCODE_MASTER = createAsyncThunk("practitionerMasterSlice/practitioner_pincode_master", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
  var payload,
      _ref19,
      rejectWithValue,
      _data$result6,
      geogLevelCode,
      data,
      arr,
      _args11 = arguments;

  return _regeneratorRuntime().wrap(function _callee11$(_context11) {
    while (1) {
      switch (_context11.prev = _context11.next) {
        case 0:
          payload = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};
          _ref19 = _args11.length > 1 ? _args11[1] : undefined, rejectWithValue = _ref19.rejectWithValue;
          _context11.prev = 2;
          geogLevelCode = payload.geogLevelCode;
          _context11.next = 6;
          return fetchData({
            body: JSON.stringify(masterqueries.pincode_by_city(geogLevelCode))
          }, __readDocumentUrl__);

        case 6:
          data = _context11.sent;
          arr = [];

          if (Array.isArray(data.result) && (data === null || data === void 0 ? void 0 : (_data$result6 = data.result) === null || _data$result6 === void 0 ? void 0 : _data$result6.length) > 0) {
            data === null || data === void 0 ? void 0 : data.result.map(function (val) {
              arr.push(_objectSpread2({
                label: val.geogLevelName,
                value: val._id
              }, val));
            });
          }

          return _context11.abrupt("return", _objectSpread2(_objectSpread2({}, defaultState.List), {}, {
            data: arr
          }));

        case 12:
          _context11.prev = 12;
          _context11.t0 = _context11["catch"](2);
          return _context11.abrupt("return", rejectWithValue(_objectSpread2(_objectSpread2({}, defaultReject), {}, {
            message: _context11.t0.message
          })));

        case 15:
        case "end":
          return _context11.stop();
      }
    }
  }, _callee11, null, [[2, 12]]);
})));
var practitionerMasterSlice = createSlice({
  name: "practitionerMasterSlice",
  initialState: {
    practitioner_masters: _objectSpread2({}, defaultState.Info),
    practitionerbyid: _objectSpread2({}, defaultState.Info),
    practitioner_country_master: _objectSpread2({}, defaultState.Info),
    practitioner_state_master: _objectSpread2({}, defaultState.Info),
    practitioner_district_master: _objectSpread2({}, defaultState.Info),
    practitioner_city_master: _objectSpread2({}, defaultState.Info),
    practitioner_pincode_master: _objectSpread2({}, defaultState.Info),
    practitioner_location: _objectSpread2({}, defaultState.List)
  },
  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, PRACTITIONER_LOCATION_MASTERS.fulfilled, function (state, action) {
    state.practitioner_location.loading = false, state.practitioner_location.error = false, state.practitioner_location = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_LOCATION_MASTERS.pending, function (state, action) {
    state.practitioner_location.loading = true, state.practitioner_location.error = false, state.practitioner_location.loading = true;
  }), _defineProperty(_extraReducers, PRACTITIONER_LOCATION_MASTERS.rejected, function (state, action) {
    state.practitioner_location.loading = false, state.practitioner_location.error = true, state.practitioner_location = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_MASTERS.fulfilled, function (state, action) {
    state.practitioner_masters.loading = false, state.practitioner_masters.error = false, state.practitioner_masters = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_MASTERS.pending, function (state, action) {
    state.practitioner_masters.loading = true, state.practitioner_masters.error = false, state.practitioner_masters.loading = true;
  }), _defineProperty(_extraReducers, PRACTITIONER_MASTERS.rejected, function (state, action) {
    state.practitioner_masters.loading = false, state.practitioner_masters.error = true, state.practitioner_masters = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_GET_BY_ID.fulfilled, function (state, action) {
    state.practitionerbyid.loading = false, state.practitionerbyid.error = false, state.practitionerbyid = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_GET_BY_ID.pending, function (state, action) {
    state.practitionerbyid.loading = true, state.practitionerbyid.error = false, state.practitionerbyid.loading = true;
  }), _defineProperty(_extraReducers, PRACTITIONER_GET_BY_ID.rejected, function (state, action) {
    state.practitionerbyid.loading = false, state.practitionerbyid.error = true, state.practitionerbyid = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_COUNTRY_MASTER.fulfilled, function (state, action) {
    state.practitioner_country_master.loading = false, state.practitioner_country_master.error = false, state.practitioner_country_master = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_COUNTRY_MASTER.pending, function (state, action) {
    state.practitioner_country_master.loading = true, state.practitioner_country_master.error = false, state.practitioner_country_master.loading = true;
  }), _defineProperty(_extraReducers, PRACTITIONER_COUNTRY_MASTER.rejected, function (state, action) {
    state.practitioner_country_master.loading = false, state.practitioner_country_master.error = true, state.practitioner_country_master = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_STATE_MASTER.fulfilled, function (state, action) {
    state.practitioner_state_master.loading = false, state.practitioner_state_master.error = false, state.practitioner_state_master = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_STATE_MASTER.pending, function (state, action) {
    state.practitioner_state_master.loading = true, state.practitioner_state_master.error = false, state.practitioner_state_master.loading = true;
  }), _defineProperty(_extraReducers, PRACTITIONER_STATE_MASTER.rejected, function (state, action) {
    state.practitioner_state_master.loading = false, state.practitioner_state_master.error = true, state.practitioner_state_master = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_DISTRICT_MASTER.fulfilled, function (state, action) {
    state.practitioner_district_master.loading = false, state.practitioner_district_master.error = false, state.practitioner_district_master = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_DISTRICT_MASTER.pending, function (state, action) {
    state.practitioner_district_master.loading = true, state.practitioner_district_master.error = false, state.practitioner_district_master.loading = true;
  }), _defineProperty(_extraReducers, PRACTITIONER_DISTRICT_MASTER.rejected, function (state, action) {
    state.practitioner_district_master.loading = false, state.practitioner_district_master.error = true, state.practitioner_district_master = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_CITY_MASTER.fulfilled, function (state, action) {
    state.practitioner_city_master.loading = false, state.practitioner_city_master.error = false, state.practitioner_city_master = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_CITY_MASTER.pending, function (state, action) {
    state.practitioner_city_master.loading = true, state.practitioner_city_master.error = false, state.practitioner_city_master.loading = true;
  }), _defineProperty(_extraReducers, PRACTITIONER_CITY_MASTER.rejected, function (state, action) {
    state.practitioner_city_master.loading = false, state.practitioner_city_master.error = true, state.practitioner_city_master = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_PINCODE_MASTER.fulfilled, function (state, action) {
    state.practitioner_pincode_master.loading = false, state.practitioner_pincode_master.error = false, state.practitioner_pincode_master = action.payload;
  }), _defineProperty(_extraReducers, PRACTITIONER_PINCODE_MASTER.pending, function (state, action) {
    state.practitioner_pincode_master.loading = true, state.practitioner_pincode_master.error = false, state.practitioner_pincode_master.loading = true;
  }), _defineProperty(_extraReducers, PRACTITIONER_PINCODE_MASTER.rejected, function (state, action) {
    state.practitioner_pincode_master.loading = false, state.practitioner_pincode_master.error = true, state.practitioner_pincode_master = action.payload;
  }), _extraReducers)
});
var practitionerMasterActions = {
  PRACTITIONER_MASTERS: PRACTITIONER_MASTERS,
  PRACTITIONER_GET_BY_ID: PRACTITIONER_GET_BY_ID,
  PRACTITIONER_COUNTRY_MASTER: PRACTITIONER_COUNTRY_MASTER,
  PRACTITIONER_STATE_MASTER: PRACTITIONER_STATE_MASTER,
  PRACTITIONER_DISTRICT_MASTER: PRACTITIONER_DISTRICT_MASTER,
  PRACTITIONER_CITY_MASTER: PRACTITIONER_CITY_MASTER,
  PRACTITIONER_PINCODE_MASTER: PRACTITIONER_PINCODE_MASTER,
  PRACTITIONER_LOCATION_MASTERS: PRACTITIONER_LOCATION_MASTERS
};
var practitionerMasterSlice$1 = practitionerMasterSlice.reducer;

var index = combineReducers({
  organizationSlice: organizationSlice$1,
  rolesSlice: rolesSlice$1,
  repositorySlice: repositorySlice$1,
  permissionSlice: permissionSlice$1,
  personSlice: personSlice$1,
  userSlice: userSlice$1,
  personSlices: personSlices$1,
  practitionerSlice: practitionerSlice$1,
  practitionerMasterSlice: practitionerMasterSlice$1
});

var organization_role_actions = _objectSpread2({}, organizationActions);

var practitioner_role_actions = _objectSpread2(_objectSpread2({}, practitionerActions$1), practitionerMasterActions);

var roles_actions = _objectSpread2({}, roleActions);

var repository_actions = _objectSpread2({}, repositoryActions);

var permission_actions = _objectSpread2({}, permissionActions);

var person_actions = _objectSpread2({}, personActions$1);

var user_actions = _objectSpread2({}, userActions);

var persons_action = _objectSpread2({}, personActions);

var user_management_actions = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, roles_actions), repository_actions), permission_actions), person_actions), user_actions), persons_action);

var organizationMasterActions = _objectSpread2({}, organization_role_actions);
var practitionerActions = _objectSpread2({}, practitioner_role_actions);
var userManagementActions = _objectSpread2({}, user_management_actions);

var actions = _objectSpread2(_objectSpread2(_objectSpread2({}, organizationMasterActions), userManagementActions), practitionerActions);

exports.actions = actions;
exports.rootReducer = index;
